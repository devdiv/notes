(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{278:function(t,v,_){"use strict";_.r(v);var a=_(0),r=Object(a.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("div",{staticClass:"content"},[_("h2",{attrs:{id:"ruby-运算符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ruby-运算符"}},[t._v("#")]),t._v(" Ruby 运算符")]),t._v(" "),_("p",[t._v("1、算术运算符")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("运算符")]),t._v(" "),_("th",[t._v("描述")]),t._v(" "),_("th",[t._v("实例")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("+")]),t._v(" "),_("td",[t._v("加法 - 把运算符两边的操作数相加")]),t._v(" "),_("td",[t._v("a + b 将得到 30")])]),t._v(" "),_("tr",[_("td",[t._v("-")]),t._v(" "),_("td",[t._v("减法 - 把左操作数减去右操作数")]),t._v(" "),_("td",[t._v("a - b 将得到 -10")])]),t._v(" "),_("tr",[_("td",[t._v("*")]),t._v(" "),_("td",[t._v("乘法 - 把运算符两边的操作数相乘")]),t._v(" "),_("td",[t._v("a * b 将得到 200")])]),t._v(" "),_("tr",[_("td",[t._v("/")]),t._v(" "),_("td",[t._v("除法 - 把左操作数除以右操作数")]),t._v(" "),_("td",[t._v("b / a 将得到 2")])]),t._v(" "),_("tr",[_("td",[t._v("%")]),t._v(" "),_("td",[t._v("求模 - 把左操作数除以右操作数，返回余数")]),t._v(" "),_("td",[t._v("b % a 将得到 0")])]),t._v(" "),_("tr",[_("td",[t._v("**")]),t._v(" "),_("td",[t._v("指数 - 执行指数计算")]),t._v(" "),_("td",[t._v("a**b 将得到 10 的 20 次方")])])])]),t._v(" "),_("p",[t._v("2、比较运算符")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("运算符")]),t._v(" "),_("th",[t._v("描述")]),t._v(" "),_("th",[t._v("实例")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("==")]),t._v(" "),_("td",[t._v("检查两个操作数的值是否相等，如果相等则条件为真。")]),t._v(" "),_("td",[t._v("(a == b) 不为真。")])]),t._v(" "),_("tr",[_("td",[t._v("!=")]),t._v(" "),_("td",[t._v("检查两个操作数的值是否相等，如果不相等则条件为真。")]),t._v(" "),_("td",[t._v("(a != b) 为真。")])]),t._v(" "),_("tr",[_("td",[t._v(">")]),t._v(" "),_("td",[t._v("检查左操作数的值是否大于右操作数的值，如果是则条件为真。")]),t._v(" "),_("td",[t._v("(a > b) 不为真。")])]),t._v(" "),_("tr",[_("td",[t._v("<")]),t._v(" "),_("td",[t._v("检查左操作数的值是否小于右操作数的值，如果是则条件为真。")]),t._v(" "),_("td",[t._v("(a < b) 为真。")])]),t._v(" "),_("tr",[_("td",[t._v(">=")]),t._v(" "),_("td",[t._v("检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。")]),t._v(" "),_("td",[t._v("(a >= b) 不为真。")])]),t._v(" "),_("tr",[_("td",[t._v("<=")]),t._v(" "),_("td",[t._v("检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。")]),t._v(" "),_("td",[t._v("(a <= b) 为真。")])]),t._v(" "),_("tr",[_("td",[t._v("<=>")]),t._v(" "),_("td",[t._v("联合比较运算符。如果第一个操作数等于第二个操作数则返回 0，如果第一个操作数大于第二个操作数则返回 1，如果第一个操作数小于第二个操作数则返回 -1。")]),t._v(" "),_("td",[t._v("(a <=> b) 返回 -1。")])]),t._v(" "),_("tr",[_("td",[t._v("===")]),t._v(" "),_("td",[t._v("用于测试 case 语句的 when 子句内的相等。")]),t._v(" "),_("td",[t._v("(1...10) === 5 返回 true。")])]),t._v(" "),_("tr",[_("td",[t._v(".eql?")]),t._v(" "),_("td",[t._v("如果接收器和参数具有相同的类型和相等的值，则返回 true。")]),t._v(" "),_("td",[t._v("1 == 1.0 返回 true，但是 1.eql?(1.0) 返回 false。")])]),t._v(" "),_("tr",[_("td",[t._v("equal?")]),t._v(" "),_("td",[t._v("如果接收器和参数具有相同的对象 id，则返回 true。")]),t._v(" "),_("td",[t._v("如果 aObj 是 bObj 的副本，那么 aObj == bObj 返回 true，a.equal?bObj 返回 false，但是 a.equal?aObj 返回 true。")])])])]),t._v(" "),_("p",[t._v("3、赋值运算符")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("运算符")]),t._v(" "),_("th",[t._v("描述")]),t._v(" "),_("th",[t._v("实例")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("=")]),t._v(" "),_("td",[t._v("简单的赋值运算符，把右操作数的值赋给左操作数")]),t._v(" "),_("td",[t._v("c = a + b 将把 a + b 的值赋给 c")])]),t._v(" "),_("tr",[_("td",[t._v("+=")]),t._v(" "),_("td",[t._v("加且赋值运算符，把右操作数加上左操作数的结果赋值给左操作数")]),t._v(" "),_("td",[t._v("c += a 相当于 c = c + a")])]),t._v(" "),_("tr",[_("td",[t._v("-=")]),t._v(" "),_("td",[t._v("减且赋值运算符，把左操作数减去右操作数的结果赋值给左操作数")]),t._v(" "),_("td",[t._v("c -= a 相当于 c = c - a")])]),t._v(" "),_("tr",[_("td",[t._v("*=")]),t._v(" "),_("td",[t._v("乘且赋值运算符，把右操作数乘以左操作数的结果赋值给左操作数")]),t._v(" "),_("td",[t._v("c _= a 相当于 c = c _ a")])]),t._v(" "),_("tr",[_("td",[t._v("/=")]),t._v(" "),_("td",[t._v("除且赋值运算符，把左操作数除以右操作数的结果赋值给左操作数")]),t._v(" "),_("td",[t._v("c /= a 相当于 c = c / a")])]),t._v(" "),_("tr",[_("td",[t._v("%=")]),t._v(" "),_("td",[t._v("求模且赋值运算符，求两个操作数的模赋值给左操作数")]),t._v(" "),_("td",[t._v("c %= a 相当于 c = c % a")])]),t._v(" "),_("tr",[_("td",[t._v("**=")]),t._v(" "),_("td",[t._v("指数且赋值运算符，执行指数计算，并赋值给左操作数")]),t._v(" "),_("td",[t._v("c **= a 相当于 c = c ** a")])])])]),t._v(" "),_("p",[t._v("Ruby 也支持变量的并行赋值。这使得多个变量可以通过一行的 Ruby 代码进行初始化。例如：")]),t._v(" "),_("div",{staticClass:"language-ruby extra-class"},[_("pre",{pre:!0,attrs:{class:"language-ruby"}},[_("code",[t._v("a"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n")])])]),_("p",[t._v("并行赋值在交换两个变量的值时也很有用：")]),t._v(" "),_("div",{staticClass:"language-ruby extra-class"},[_("pre",{pre:!0,attrs:{class:"language-ruby"}},[_("code",[t._v("a"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c\n")])])]),_("p",[t._v("4、位运算符")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("运算符")]),t._v(" "),_("th",[t._v("描述")]),t._v(" "),_("th",[t._v("实例")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("&")]),t._v(" "),_("td",[t._v("如果同时存在于两个操作数中，二进制 AND 运算符复制一位到结果中。")]),t._v(" "),_("td",[t._v("(a & b) 将得到 12，即为 0000 1100")])]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td",[t._v("如果存在于任一操作数中，二进制 OR 运算符复制一位到结果中。")]),t._v(" "),_("td",[t._v("(a")])]),t._v(" "),_("tr",[_("td",[t._v("^")]),t._v(" "),_("td",[t._v("如果存在于其中一个操作数中但不同时存在于两个操作数中，二进制异或运算符复制一位到结果中。")]),t._v(" "),_("td",[t._v("(a ^ b) 将得到 49，即为 0011 0001")])]),t._v(" "),_("tr",[_("td",[t._v("~")]),t._v(" "),_("td",[t._v('二进制补码运算符是一元运算符，具有"翻转"位效果，即 0 变成 1，1 变成 0。')]),t._v(" "),_("td",[t._v("(~a ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。")])]),t._v(" "),_("tr",[_("td",[t._v("<<")]),t._v(" "),_("td",[t._v("二进制左移运算符。左操作数的值向左移动右操作数指定的位数。")]),t._v(" "),_("td",[t._v("a << 2 将得到 240，即为 1111 0000")])]),t._v(" "),_("tr",[_("td",[t._v(">>")]),t._v(" "),_("td",[t._v("二进制右移运算符。左操作数的值向右移动右操作数指定的位数。")]),t._v(" "),_("td",[t._v("a >> 2 将得到 15，即为 0000 1111")])])])]),t._v(" "),_("p",[t._v("5、逻辑运算符")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("运算符")]),t._v(" "),_("th",[t._v("描述")]),t._v(" "),_("th",[t._v("实例")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("and")]),t._v(" "),_("td",[t._v("称为逻辑与运算符。如果两个操作数都为真，则条件为真。")]),t._v(" "),_("td",[t._v("(a and b) 为真。")])]),t._v(" "),_("tr",[_("td",[t._v("or")]),t._v(" "),_("td",[t._v("称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。")]),t._v(" "),_("td",[t._v("(a or b) 为真。")])]),t._v(" "),_("tr",[_("td",[t._v("&&")]),t._v(" "),_("td",[t._v("称为逻辑与运算符。如果两个操作数都非零，则条件为真。")]),t._v(" "),_("td",[t._v("(a && b) 为真。")])]),t._v(" "),_("tr",[_("td",[_("code",[t._v("||")])]),t._v(" "),_("td",[t._v("称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。")]),t._v(" "),_("td",[t._v("(a")])]),t._v(" "),_("tr",[_("td",[t._v("!")]),t._v(" "),_("td",[t._v("称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。")]),t._v(" "),_("td",[t._v("!(a && b) 为假。")])]),t._v(" "),_("tr",[_("td",[t._v("not")]),t._v(" "),_("td",[t._v("称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。")]),t._v(" "),_("td",[t._v("not(a && b) 为假。")])])])]),t._v(" "),_("p",[t._v("6、三元运算符")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("运算符")]),t._v(" "),_("th",[t._v("描述")]),t._v(" "),_("th",[t._v("实例")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("? :")]),t._v(" "),_("td",[t._v("条件表达式")]),t._v(" "),_("td",[t._v("如果条件为真 ? 则值为 X : 否则值为 Y")])])])]),t._v(" "),_("p",[t._v("7、范围运算符")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("运算符")]),t._v(" "),_("th",[t._v("描述")]),t._v(" "),_("th",[t._v("实例")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("..")]),t._v(" "),_("td",[t._v("创建一个从开始点到结束点的范围（包含结束点）")]),t._v(" "),_("td",[t._v("1..10 创建从 1 到 10 的范围")])]),t._v(" "),_("tr",[_("td",[t._v("...")]),t._v(" "),_("td",[t._v("创建一个从开始点到结束点的范围（不包含结束点）")]),t._v(" "),_("td",[t._v("1...10 创建从 1 到 9 的范围")])])])]),t._v(" "),_("p",[t._v("8、defined? 运算符")]),t._v(" "),_("p",[t._v("defined? 是一个特殊的运算符，以方法调用的形式来判断传递的表达式是否已定义。它返回表达式的描述字符串，如果表达式未定义则返回 nil。")]),t._v(" "),_("p",[t._v("下面是 defined? 运算符的各种用法：")]),t._v(" "),_("div",{staticClass:"language-ruby extra-class"},[_("pre",{pre:!0,attrs:{class:"language-ruby"}},[_("code",[t._v("foo "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" foo    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "local-variable"')]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$_")]),t._v("     "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "global-variable"')]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" bar    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => nil（未定义）")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" method_call "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果方法已经定义，则为 True")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" puts        "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "method"')]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" puts"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bar"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => nil（在这里 bar 未定义）")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" unpack      "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => nil（在这里未定义）")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果存在可被 super 用户调用的方法，则为 True")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v("     "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "super"（如果可被调用）')]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v("     "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => nil（如果不可被调用）")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v("   "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果已传递代码块，则为 True")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v("    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "yield"（如果已传递块）')]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v("    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => nil（如果未传递块）")]),t._v("\n")])])]),_("p",[t._v('9、点运算符 "." 和双冒号运算符 "::"')]),t._v(" "),_("ul",[_("li",[t._v(". 来调用类或模块中的方法")]),t._v(" "),_("li",[t._v(":: 来引用类或模块中的常量")])]),t._v(" "),_("p",[_("strong",[t._v("注意")]),t._v(" ：在 Ruby 中，类和方法也可以被当作常量。")]),t._v(" "),_("p",[t._v("你只需要在表达式的常量名前加上 :: 前缀，即可返回适当的类或模块对象。")]),t._v(" "),_("p",[t._v("如果 :: 前的表达式为类或模块名称，则返回该类或模块内对应的常量值；如果 :: 前未没有前缀表达式，则返回主 Object 类中对应的常量值。")]),t._v(" "),_("p",[t._v("10、运算符的优先级")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("运算符")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("是")]),t._v(" "),_("td",[t._v("::")]),t._v(" "),_("td",[t._v("常量解析运算符")])]),t._v(" "),_("tr",[_("td",[t._v("是")]),t._v(" "),_("td",[t._v("[ ][ ]=")]),t._v(" "),_("td",[t._v("元素引用、元素集合")])]),t._v(" "),_("tr",[_("td",[t._v("是")]),t._v(" "),_("td",[t._v("**")]),t._v(" "),_("td",[t._v("指数")])]),t._v(" "),_("tr",[_("td",[t._v("是")]),t._v(" "),_("td",[t._v("! ~ + -")]),t._v(" "),_("td",[t._v("非、补、一元加、一元减（最后两个的方法名为 +@ 和 -@）")])]),t._v(" "),_("tr",[_("td",[t._v("是")]),t._v(" "),_("td",[t._v("* / %")]),t._v(" "),_("td",[t._v("乘法、除法、求模")])]),t._v(" "),_("tr",[_("td",[t._v("是")]),t._v(" "),_("td",[t._v("+ -")]),t._v(" "),_("td",[t._v("加法和减法")])]),t._v(" "),_("tr",[_("td",[t._v("是")]),t._v(" "),_("td",[t._v(">> <<")]),t._v(" "),_("td",[t._v("位右移、位左移")])]),t._v(" "),_("tr",[_("td",[t._v("是")]),t._v(" "),_("td",[t._v("&")]),t._v(" "),_("td",[t._v("位与")])]),t._v(" "),_("tr",[_("td",[t._v("是")]),t._v(" "),_("td",[t._v("^")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("是")]),t._v(" "),_("td",[t._v("<= < > >=")]),t._v(" "),_("td",[t._v("比较运算符")])]),t._v(" "),_("tr",[_("td",[t._v("是")]),t._v(" "),_("td",[t._v("<=> == === != =~ !~")]),t._v(" "),_("td",[t._v("相等和模式匹配运算符（!= 和 !~ 不能被定义为方法）")])]),t._v(" "),_("tr",[_("td",[t._v("-")]),t._v(" "),_("td",[t._v("&&")]),t._v(" "),_("td",[t._v("逻辑与")])]),t._v(" "),_("tr",[_("td",[t._v("-")]),t._v(" "),_("td",[_("code",[t._v("||")])]),t._v(" "),_("td",[t._v("逻辑或")])]),t._v(" "),_("tr",[_("td",[t._v("-")]),t._v(" "),_("td",[t._v(".. ...")]),t._v(" "),_("td",[t._v("范围（包含、不包含）")])]),t._v(" "),_("tr",[_("td",[t._v("-")]),t._v(" "),_("td",[t._v("? :")]),t._v(" "),_("td",[t._v("三元 if-then-else")])]),t._v(" "),_("tr",[_("td",[t._v("-")]),t._v(" "),_("td",[t._v("= %= { /= -= +=")]),t._v(" "),_("td",[t._v("= &= >>= <<= *= &&=")])]),t._v(" "),_("tr",[_("td",[t._v("-")]),t._v(" "),_("td",[t._v("defined?")]),t._v(" "),_("td",[t._v("检查指定符号是否已定义")])]),t._v(" "),_("tr",[_("td",[t._v("-")]),t._v(" "),_("td",[t._v("not")]),t._v(" "),_("td",[t._v("逻辑否定")])]),t._v(" "),_("tr",[_("td",[t._v("-")]),t._v(" "),_("td",[t._v("or and")]),t._v(" "),_("td",[t._v("逻辑组成")])])])]),t._v(" "),_("p",[_("strong",[t._v("注")]),t._v("：在方法列标识为 是 的运算符实际上是方法，因此可以被重载。")])])}],!1,null,null,null);v.default=r.exports}}]);