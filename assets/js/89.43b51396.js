(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{255:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("p",[t._v("Ruby 是一种纯粹的面向对象编程语言。它由日本的松本行弘创建于 1993 年。")]),t._v(" "),a("p",[t._v("参考:")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"http://www.ruby-lang.org/zh_cn/",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("Ruby 中文官网")]),a("OutboundLink")],1),t._v(" - 包含 Ruby 下载、文档、代码库、社区、新闻、安全等方面的详细说明。")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://www.ruby-lang.org/zh_cn/about/",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("关于 Ruby")]),a("OutboundLink")],1),t._v("- 简单介绍了 Ruby 发展、面向对象、灵活性、块、混入、更多其他特性。")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://www.ruby-lang.org/zh_cn/documentation/ruby-from-other-languages/",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("从其它语言转到 Ruby")]),a("OutboundLink")],1),t._v(" - Ruby 的大部分语法是 Perl、Python 和 Java（以及其他语言）的用户所熟悉的。 如果您曾经使用过这这些语言，学习 Ruby 就是小菜一碟。")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://rubyapi.org/",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("RubyAPI.org（英文网站）")]),a("OutboundLink")],1),t._v("- 简单搜索浏览 Ruby 类、模块和方法。")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://rubydocs.org/",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("Ruby 和 Rails 可检索 API 文档（英文网站）")]),a("OutboundLink")],1),t._v("- 可以智能搜索的 Rails 和 Ruby 文档。")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://learncodethehardway.org/ruby/",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("笨方法学 Ruby（英文网站）")]),a("OutboundLink")],1),t._v("- 一系列非常好的练习，附带讲解，可以指导你从基本的 Ruby 知识一路进阶到面向对象编程和 Web 开发。")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://ruby-doc.com/docs/ProgrammingRuby/",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("Programming Ruby（英文网站）")]),a("OutboundLink")],1),t._v("- 最有影响的 Ruby 英文教材，Pragmatic Programmers 出版的第一版可以在网上免费阅读。")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://rubylearning.com/",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("学习 Ruby（英文网站）")]),a("OutboundLink")],1),t._v("- 这里汇集了许多 Ruby 初学者的学习笔记，对 Ruby 的概念和结构有全面的介绍。")])])]),t._v(" "),t._m(1),t._v(" "),a("p",[t._v("1、中文编码")]),t._v(" "),t._m(2),t._m(3),t._v(" "),a("p",[t._v("2、注释")]),t._v(" "),t._m(4),t._m(5),t._v(" "),a("p",[t._v("1、Ruby 命令行选项")]),t._v(" "),a("p",[t._v("Ruby 一般是从命令行运行，方式如下：")]),t._v(" "),t._m(6),t._m(7),t._v(" "),a("p",[t._v("单字符的命令行选项可以组合使用。下面两行表达了同样的意思：")]),t._v(" "),t._m(8),t._m(9),t._v(" "),a("p",[t._v("下表列出了 Ruby 中的保留字。这些保留字不能作为常量或变量的名称。但是，它们可以作为方法名：")]),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),a("p",[t._v("1、puts/putc/print/gets")]),t._v(" "),t._m(12),t._v(" "),a("p",[t._v("更多请查看 Ruby 的 IO 类。")]),t._v(" "),a("p",[t._v("2、if/if...else/unless/case")]),t._v(" "),t._m(13),a("p",[t._v("3、whlie/until/for/break/next/redo")]),t._v(" "),t._m(14),a("p",[t._v("4、require 与 include")]),t._v(" "),t._m(15),t._m(16),t._m(17),t._v(" "),t._m(18),t._m(19),t._v(" "),a("p",[t._v("假设下面的模块写在 session.rb 文件中。")]),t._v(" "),t._m(20),t._m(21),a("p",[t._v("5、alias 与 undef")]),t._v(" "),t._m(22),t._v(" "),a("p",[t._v("为编号的全局变量（$1, $2,...）起别名是被禁止的。重写内置的全局变量可能会导致严重的问题。")]),t._v(" "),t._m(23),t._m(24),t._m(25),t._v(" "),t._m(26),t._m(27),t._m(28),t._v(" "),a("p",[t._v("6、yield")]),t._v(" "),t._m(29),t._m(30),t._m(31),t._v(" "),t._m(32),t._m(33),t._v(" "),a("p",[t._v("1、Ruby 变量")]),t._v(" "),a("p",[t._v("Ruby 提供了四种类型的变量：")]),t._v(" "),t._m(34),t._v(" "),a("p",[t._v("2、Ruby 环境变量")]),t._v(" "),a("p",[t._v("Ruby 解释器使用下列环境变量来控制它的行为。ENV 对象包含了所有当前设置的环境变量列表。")]),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),a("p",[t._v("1、算术运算符")]),t._v(" "),t._m(38),t._v(" "),a("p",[t._v("2、比较运算符")]),t._v(" "),t._m(39),t._v(" "),a("p",[t._v("3、赋值运算符")]),t._v(" "),t._m(40),t._v(" "),a("p",[t._v("Ruby 也支持变量的并行赋值。这使得多个变量可以通过一行的 Ruby 代码进行初始化。例如：")]),t._v(" "),t._m(41),a("p",[t._v("并行赋值在交换两个变量的值时也很有用：")]),t._v(" "),t._m(42),a("p",[t._v("4、位运算符")]),t._v(" "),t._m(43),t._v(" "),a("p",[t._v("5、逻辑运算符")]),t._v(" "),t._m(44),t._v(" "),a("p",[t._v("6、三元运算符")]),t._v(" "),t._m(45),t._v(" "),a("p",[t._v("7、范围运算符")]),t._v(" "),t._m(46),t._v(" "),a("p",[t._v("8、defined? 运算符")]),t._v(" "),a("p",[t._v("defined? 是一个特殊的运算符，以方法调用的形式来判断传递的表达式是否已定义。它返回表达式的描述字符串，如果表达式未定义则返回 nil。")]),t._v(" "),a("p",[t._v("下面是 defined? 运算符的各种用法：")]),t._v(" "),t._m(47),a("p",[t._v('9、点运算符 "." 和双冒号运算符 "::"')]),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),a("p",[t._v("你只需要在表达式的常量名前加上 :: 前缀，即可返回适当的类或模块对象。")]),t._v(" "),a("p",[t._v("如果 :: 前的表达式为类或模块名称，则返回该类或模块内对应的常量值；如果 :: 前未没有前缀表达式，则返回主 Object 类中对应的常量值。")]),t._v(" "),a("p",[t._v("10、运算符的优先级")]),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),a("p",[t._v("1、序列检查")]),t._v(" "),a("p",[t._v("范围的第一个也是最常见的用途是表达序列。序列有一个起点、一个终点和一个在序列产生连续值的方式。")]),t._v(" "),a("p",[t._v("Ruby 使用 ''..'' 和 ''...'' 范围运算符创建这些序列。两点形式创建一个包含指定的最高值的范围，三点形式创建一个不包含指定的最高值的范围。")]),t._v(" "),t._m(53),a("p",[t._v("序列检查：")]),t._v(" "),t._m(54),a("p",[t._v("2、条件检查")]),t._v(" "),a("p",[t._v("范围也可以用作条件表达式。例如，下面的代码片段从标准输入打印行，其中每个集合的第一行包含单词 start，最后一行包含单词 end.：")]),t._v(" "),t._m(55),t._m(56),a("p",[t._v("3、间隔检查")]),t._v(" "),a("p",[t._v("检查指定值是否在指定的范围内。需要使用 === 相等运算符来完成计算。")]),t._v(" "),t._m(57),t._m(58),t._v(" "),a("p",[t._v("Ruby 中的 String 对象用于存储或操作一个或多个字节的序列。")]),t._v(" "),a("p",[t._v("Ruby 字符串分为单引号字符串（'）和双引号字符串（\"），区别在于双引号字符串能够支持更多的转义字符。")]),t._v(" "),a("p",[t._v("1、转义字符")]),t._v(" "),a("p",[t._v("下标列出了可使用反斜杠符号转义的转义字符或非打印字符。")]),t._v(" "),t._m(59),t._v(" "),t._m(60),t._v(" "),a("p",[t._v("2、字符编码")]),t._v(" "),a("p",[t._v("Ruby 的默认字符集是 ASCII，字符可用单个字节表示。如果您使用 UTF-8 或其他现代的字符集，字符可能是用一个到四个字节表示。")]),t._v(" "),a("p",[t._v("您可以在程序开头使用 $KCODE 改变字符集，如下所示：")]),t._v(" "),t._m(61),a("p",[t._v("下面是 $KCODE 可能的值。")]),t._v(" "),t._m(62),t._v(" "),a("p",[t._v("3、字符串内建方法")]),t._v(" "),t._m(63),a("p",[t._v("这将返回一个包含 str 副本的新的字符串对象。现在，使用 str 对象，我们可以调用任意可用的实例方法。例如：")]),t._v(" "),t._m(64),a("p",[t._v("下面是公共的字符串方法（假设 str 是一个 String 对象）：")]),t._v(" "),t._m(65),t._v(" "),a("p",[t._v("4、字符串 unpack 指令")]),t._v(" "),t._m(66),t._v(" "),t._m(67),a("ul",[a("li",[a("router-link",{attrs:{to:"./File类和方法.html"}},[t._v("更多文件操作请参考")]),t._v("，File 类和方法")],1)]),t._v(" "),t._m(68),t._v(" "),a("p",[t._v("Ruby 数组是任何对象的有序整数索引集合。数组中的每个元素都与一个索引相关，并可通过索引进行获取。")]),t._v(" "),a("p",[t._v("数组的索引从 0 开始，这与 C 或 Java 中一样。一个负数的索相对于数组的末尾计数的，也就是说，索引为 -1 表示数组的最后一个元素，-2 表示数组中的倒数第二个元素，依此类推。")]),t._v(" "),a("p",[t._v("Ruby 数组可存储诸如 String、 Integer、 Fixnum、 Hash、 Symbol 等对象，甚至可以是其他 Array 对象。")]),t._v(" "),a("p",[t._v("Ruby 数组不需要指定大小，当向数组添加元素时，Ruby 数组会自动增长。")]),t._v(" "),a("p",[t._v("1、创建数组")]),t._v(" "),a("p",[t._v("有多种方式创建或初始化数组。一种方式是通过 new 类方法：")]),t._v(" "),t._m(69),a("p",[t._v("2、数组内建方法")]),t._v(" "),a("p",[t._v("我们需要有一个 Array 对象的实例来调用 Array 方法。下面是创建 Array 对象实例的方式：")]),t._v(" "),t._m(70),a("p",[t._v("这将返回一个使用给定对象进行填充的新数组。现在，使用创建的对象，我们可以调用任意可用的方法。例如：")]),t._v(" "),t._m(71),a("p",[t._v("下面是公共的数组方法（假设 array 是一个 Array 对象）：")]),t._v(" "),t._m(72),t._v(" "),a("p",[t._v("3、数组 pack 指令")]),t._v(" "),a("p",[t._v("下表列出了方法 Array#pack 的压缩指令。")]),t._v(" "),t._m(73),t._v(" "),t._m(74),t._m(75),t._v(" "),a("p",[t._v('哈希（Hash）是类似 "key" => "value" 这样的键值对集合。哈希类似于一个数组，只不过它的索引不局限于使用数字。')]),t._v(" "),a("p",[t._v('Hash 的索引（或者叫"键"）或值，几乎可以是任何对象。')]),t._v(" "),a("p",[t._v("Hash 虽然和数组类似，但却有一个很重要的区别：Hash 的元素没有特定的顺序。 如果顺序很重要的话就要使用数组了。")]),t._v(" "),a("p",[t._v("1、创建哈希")]),t._v(" "),a("p",[t._v("与数组一样，有各种不同的方式来创建哈希。当您访问带有默认值的哈希中的任意键时，如果键或值不存在，访问哈希将返回默认值：")]),t._v(" "),t._m(76),a("p",[t._v("2、哈希内置方法")]),t._v(" "),a("p",[t._v("如果需要调用 Hash 方法，需要先实例化一个 Hash 对象。下面是创建 Hash 对象实例的方式：")]),t._v(" "),t._m(77),a("p",[t._v("这将返回一个使用给定对象进行填充的新的哈希。现在，使用创建的对象，我们可以调用任意可用的方法。例如：")]),t._v(" "),t._m(78),a("p",[t._v("下面是公共的哈希方法（假设 hash 是一个 Hash 对象）：")]),t._v(" "),t._m(79),t._v(" "),t._m(80),t._v(" "),a("p",[t._v("简单来说：迭代(iterate)指的是重复做相同的事，所以迭代器(iterator)就是用来重复多次相同的事。")]),t._v(" "),a("p",[t._v("迭代器是集合支持的方法。存储一组数据成员的对象称为集合。在 Ruby 中，数组(Array)和哈希(Hash)可以称之为集合。")]),t._v(" "),a("p",[t._v("迭代器返回集合的所有元素。")]),t._v(" "),a("p",[t._v("1、each 迭代器")]),t._v(" "),a("p",[t._v("each 迭代器总是与一个块关联。")]),t._v(" "),t._m(81),t._m(82),a("p",[t._v("2、collect 迭代器")]),t._v(" "),a("p",[t._v("collect 方法不是数组间进行复制的正确方式。这里有另一个称为 clone 的方法，用于复制一个数组到另一个数组。")]),t._v(" "),a("p",[t._v("当您想要对每个值进行一些操作以便获得新的数组时，您通常使用 collect 方法。例如，下面的代码会生成一个数组，其值是 a 中每个值的 10 倍。")]),t._v(" "),t._m(83),t._m(84),t._m(85),t._v(" "),a("p",[t._v("模块（Module）是一种把方法、类和常量组合在一起的方式。模块（Module）为您提供了两大好处:")]),t._v(" "),t._m(86),t._v(" "),a("p",[t._v("模块（Module）定义了一个命名空间，相当于一个沙盒，在里边您的方法和常量不会与其他地方的方法常量冲突。")]),t._v(" "),a("p",[t._v("模块类似与类，但有以下不同：")]),t._v(" "),t._m(87),t._v(" "),t._m(88),a("p",[t._v("模块常量命名与类常量命名类似，以大写字母开头")]),t._v(" "),a("p",[t._v("您可以在类方法名称前面放置模块名称和一个点号来调用模块方法，您可以使用模块名称和变量引用符（两个冒号）来引用一个常量。")]),t._v(" "),t._m(89),t._m(90),a("p",[t._v("当一个类可以从多个父类继承类的特性时，该类显示为多重继承。")]),t._v(" "),t._m(91),t._v(" "),t._m(92),t._m(93),t._v(" "),t._m(94),t._v(" "),t._m(95),t._m(96),a("p",[t._v("如果方法的最后一个参数前带有 &，那么您可以向该方法传递一个块，且这个块可被赋给最后一个参数。如果 * 和 & 同时出现在参数列表中，& 应放在后面。")]),t._v(" "),t._m(97),a("p",[t._v("每个 Ruby 源文件可以声明当文件被加载时要运行的代码块（BEGIN 块），以及程序完成执行后要运行的代码块（END 块）。")]),t._v(" "),t._m(98),a("p",[t._v("一个程序可以包含多个 BEGIN 和 END 块。BEGIN 块按照它们出现的顺序执行。END 块按照它们出现的相反顺序执行。")]),t._v(" "),t._m(99),t._v(" "),a("p",[t._v("对象是类的实例。Ruby 是一种完美的面向对象编程语言。面向对象编程语言的特性包括：")]),t._v(" "),t._m(100),t._v(" "),t._m(101),t._v(" "),t._m(102),t._m(103),t._v(" "),t._m(104),t._v(" "),t._m(105),t._v(" "),t._m(106),t._m(107),t._v(" "),t._m(108),t._v(" "),a("p",[t._v("现在，您可以创建对象，如下所示：")]),t._v(" "),t._m(109),t._m(110),t._v(" "),a("p",[t._v("方法名应以小写字母开头。如果您以大写字母作为方法名的开头，Ruby 可能会把它当作常量，从而导致不正确地解析调用。")]),t._v(" "),a("p",[t._v("方法应在调用之前定义，否则 Ruby 会产生未定义的方法调用异常。")]),t._v(" "),t._m(111),a("p",[t._v("Ruby 中的每个方法默认都会返回一个值。这个返回的值是最后一个语句的值。")]),t._v(" "),t._m(112),a("p",[t._v("在调用这个方法时，将返回最后一个声明的变量 k。\nRuby 允许您声明参数数量可变的方法:")]),t._v(" "),t._m(113),a("p",[t._v("当方法定义在类的外部，方法默认标记为 private。另一方面，如果方法定义在类中的，则默认标记为 public。")]),t._v(" "),a("p",[t._v("方法默认的可见性和 private 标记可通过模块（Module）的 public 或 private 改变。")]),t._v(" "),a("p",[t._v("当你想要访问类的方法时，您首先需要实例化类。然后，使用对象，您可以访问类的任何成员。")]),t._v(" "),a("p",[t._v("Ruby 提供了一种不用实例化即可访问方法的方式。")]),t._v(" "),t._m(114),t._m(115),t._v(" "),a("p",[t._v("异常语句 rescue/retry/raise/ensure/else/Catch/Throw")]),t._v(" "),t._m(116),t._v(" "),t._m(117),t._m(118),t._v(" "),t._m(119),t._v(" "),t._m(120),t._v(" "),t._m(121),a("p",[t._v("2、retry")]),t._v(" "),t._m(122),t._v(" "),t._m(123),t._v(" "),t._m(124),t._m(125),t._m(126),t._v(" "),t._m(127),t._m(128),t._v(" "),a("p",[t._v("3、raise")]),t._v(" "),t._m(129),t._v(" "),t._m(130),t._m(131),t._m(132),a("p",[t._v("4、ensure")]),t._v(" "),a("p",[t._v("有时候，无论是否抛出异常，您需要保证一些处理在代码块结束时完成。例如，您可能在进入时打开了一个文件，当您退出块时，您需要确保关闭文件。")]),t._v(" "),t._m(133),t._v(" "),t._m(134),t._m(135),a("p",[t._v("5、else")]),t._v(" "),a("p",[t._v("如果提供了 else 子句，它一般是放置在 rescue 子句之后，任意 ensure 之前。")]),t._v(" "),a("p",[t._v("else 子句的主体只有在代码主体没有抛出异常时执行。")]),t._v(" "),t._m(136),t._m(137),a("p",[t._v("6、Catch 和 Throw")]),t._v(" "),a("p",[t._v("raise 和 rescue 的异常机制能在发生错误时放弃执行，有时候需要在正常处理时跳出一些深层嵌套的结构。此时 catch 和 throw 就派上用场了。")]),t._v(" "),a("p",[t._v("catch 定义了一个使用给定的名称（可以是 Symbol 或 String）作为标签的块。块会正常执行直到遇到一个 throw。")]),t._v(" "),t._m(138),a("p",[t._v("下面的实例中，如果用户键入 '!' 回应任何提示，使用一个 throw 终止与用户的交互。")]),t._v(" "),t._m(139),a("p",[t._v("7、类 Exception")]),t._v(" "),a("p",[t._v("Ruby 的标准类和模块抛出异常。所有的异常类组成一个层次，包括顶部的 Exception 类在内。下一层是七种不同的类型：")]),t._v(" "),t._m(140),t._v(" "),a("p",[t._v("Fatal 是该层中另一种异常，但是 Ruby 解释器只在内部使用它。")]),t._v(" "),a("p",[t._v("ScriptError 和 StandardError 都有一些子类，但是在这里我们不需要了解这些细节。最重要的事情是创建我们自己的异常类，它们必须是类 Exception 或其子代的子类。")]),t._v(" "),a("p",[t._v("让我们看一个实例：")]),t._v(" "),t._m(141),a("p",[t._v("现在，看下面的实例，将用到上面的异常：")]),t._v(" "),t._m(142),a("p",[t._v("在这里，最重要的一行是 raise FileSaveError.new($!)。我们调用 raise 来示意异常已经发生，把它传给 FileSaveError 的一个新的实例，由于特定的异常引起数据写入失败。")]),t._v(" "),t._m(143),t._v(" "),a("p",[t._v("正则表达式是一种特殊序列的字符，它通过使用有专门语法的模式来匹配或查找字符串集合。")]),t._v(" "),a("p",[t._v('正则表达式用事先定义好的一些特定字符、及这些特定字符的组合，组成一个"规则字符串"，这个"规则字符串"用来表达对字符串的一种过滤逻辑。')]),t._v(" "),t._m(144),a("p",[t._v("1、正则表达式修饰符")]),t._v(" "),a("p",[t._v("正则表达式从字面上看可能包含一个可选的修饰符，用于控制各方面的匹配。修饰符在第二个斜杠字符后指定，如上面实例所示。下标列出了 可能的修饰符：")]),t._v(" "),t._m(145),t._v(" "),a("p",[t._v("就像字符串通过 %Q 进行分隔一样，Ruby 允许您以 %r 作为正则表达式的开头，后面跟着任意分隔符。这在描述包含大量您不想转义的斜杠字符时非常有用。")]),t._v(" "),t._m(146),a("p",[t._v("2、正则表达式模式")]),t._v(" "),t._m(147),t._v(" "),a("p",[t._v("下表列出了 Ruby 中可用的正则表达式语法。")]),t._v(" "),t._m(148),t._v(" "),a("p",[t._v("3、正则表达式实例")]),t._v(" "),t._m(149),t._v(" "),t._m(150),t._v(" "),t._m(151),t._v(" "),t._m(152),t._v(" "),t._m(153),t._v(" "),t._m(154),t._v(" "),t._m(155),t._v(" "),t._m(156),t._v(" "),t._m(157),t._v(" "),a("p",[t._v("这会匹配最小次数的重复。")]),t._v(" "),t._m(158),t._v(" "),t._m(159),t._v(" "),t._m(160),t._v(" "),t._m(161),t._v(" "),a("p",[t._v("这会再次匹配之前匹配过的分组。")]),t._v(" "),t._m(162),t._v(" "),t._m(163),t._v(" "),t._m(164),t._v(" "),t._m(165),t._v(" "),a("p",[t._v("这需要指定匹配位置。")]),t._v(" "),t._m(166),t._v(" "),t._m(167),t._v(" "),t._m(168),t._v(" "),a("p",[t._v("4、搜索和替换")]),t._v(" "),t._m(169),t._v(" "),t._m(170),t._v(" "),t._m(171),t._v(" "),t._m(172),t._m(173),t._m(174),t._v(" "),a("p",[t._v("Time 类在 Ruby 中用于表示日期和时间。它是基于操作系统提供的系统日期和时间之上。该类可能无法表示 1970 年之前或者 2038 年之后的日期。")]),t._v(" "),a("p",[t._v("1、创建当前的日期和时间")]),t._v(" "),t._m(175),a("p",[t._v("2、获取 Date & Time 组件")]),t._v(" "),t._m(176),a("p",[t._v("3、时区和夏令时")]),t._v(" "),t._m(177),t._v(" "),t._m(178),a("p",[t._v("下面的实例在数组中获取所有的组件,该数组可被传到 Time.utc 或 Time.local 函数来获取日期的不同格式，如下所示：")]),t._v(" "),t._m(179),t._v(" "),t._m(180),t._m(181),a("p",[t._v("4、格式化时间和日期")]),t._v(" "),t._m(182),a("p",[t._v("5、时间格式化指令")]),t._v(" "),a("p",[t._v("下表所列出的指令与方法 Time.strftime 一起使用。")]),t._v(" "),t._m(183),t._v(" "),a("p",[t._v("6、时间算法")]),t._v(" "),t._m(184),t._m(185),t._v(" "),a("p",[t._v("1、File.new")]),t._v(" "),a("p",[t._v("创建一个 File 对象用于读取、写入或者读写，读写权限取决于 mode 参数。可以使用 File.close 方法来关闭该文件。")]),t._v(" "),t._m(186),a("p",[t._v("2、File.open")]),t._v(" "),t._m(187),t._m(188),t._v(" "),t._m(189),t._v(" "),t._m(190),t._v(" "),t._m(191),t._v(" "),a("p",[t._v("3、File.chmod")]),t._v(" "),a("p",[t._v("下表列出了 chmod 方法中可使用的不同的掩码：")]),t._v(" "),t._m(192),t._v(" "),a("p",[t._v("4、文件常用操作方法总结：")]),t._v(" "),t._m(193),t._v(" "),a("p",[t._v("文件常用操作实例：")]),t._v(" "),t._m(194),t._m(195),t._v(" "),a("p",[t._v("1、目录操作常见有以下几种方法：")]),t._v(" "),t._m(196),t._v(" "),t._m(197),a("p",[t._v("2、创建临时文件 & 目录")]),t._v(" "),a("p",[t._v("临时文件是那些在程序执行过程中被简单地创建，但不会永久性存储的信息。")]),t._v(" "),a("p",[t._v("Dir.tmpdir 提供了当前系统上临时目录的路径，但是该方法默认情况下是不可用的。为了让 Dir.tmpdir 可用，使用必需的 'tmpdir' 是必要的。")]),t._v(" "),a("p",[t._v("您可以把 Dir.tmpdir 和 File.join 一起使用，来创建一个独立于平台的临时文件：")]),t._v(" "),t._m(198),a("p",[t._v("这段代码创建了一个临时文件，并向其中写入数据，然后删除文件。Ruby 的标准库也包含了一个名为 Tempfile 的库，该库可用于创建临时文件：")]),t._v(" "),t._m(199),a("ul",[a("li",[a("router-link",{attrs:{to:"./Dir类和方法.html"}},[t._v("更多目录操作请参考")]),t._v("，Dir 类和方法")],1)]),t._v(" "),t._m(200),t._v(" "),a("p",[t._v("1、类方法")]),t._v(" "),t._m(201),t._v(" "),a("p",[t._v("2、实例方法")]),t._v(" "),a("p",[t._v("假设 f 是 File 类的一个实例：")]),t._v(" "),t._m(202),t._v(" "),t._m(203),t._v(" "),a("p",[t._v("Dir 是一个表示用于给出操作系统中目录中的文件名的目录流。Dir 类也拥有与目录相关的操作，比如通配符文件名匹配、改变工作目录等。")]),t._v(" "),a("p",[t._v("1、类方法")]),t._v(" "),t._m(204),t._v(" "),a("p",[t._v("2、实例方法")]),t._v(" "),a("p",[t._v("假设 d 是 Dir 类的一个实例：")]),t._v(" "),t._m(205),t._v(" "),t._m(206),t._v(" "),a("p",[t._v("1、CGI 方法")]),t._v(" "),a("p",[t._v("2、CGI Cookie")]),t._v(" "),a("p",[t._v("3、CGI Session")]),t._v(" "),a("p",[t._v("4、CGI 实例")]),t._v(" "),t._m(207),t._v(" "),a("p",[t._v("Ruby1.9 之后，我们可以直接通过使用 String 类的实例方法 encoding, force_encoding, encode, encode!进行相关的编码操作。")]),t._v(" "),a("p",[t._v("本文重点参考了 Ruby 安装目录：/share/doc/ruby/html/String.html 中对字符编码转换方法的相关说明。")]),t._v(" "),a("p",[t._v("我们可以通过以下方法，对字符类型进行编码转换：")]),t._v(" "),t._m(208),t._v(" "),t._m(209),t._m(210),t._v(" "),t._m(211),t._v(" "),t._m(212),t._v(" "),t._m(213),t._v(" "),t._m(214),t._v(" "),t._m(215),a("p",[t._v("第一种格式将 str 的内容从 str.encoding 转换为 encoding。第二种格式将 str 的内容从 src_encoding 转换为 dst_encoding。options 哈希给出了转换的详细信息。有关详细信息，请参见字符串#encode。即使没有进行任何更改，也返回该字符串。")]),t._v(" "),a("p",[t._v("方法定义：")]),t._v(" "),t._m(216),t._m(217),t._v(" "),t._m(218),a("p",[t._v("方法定义：")]),t._v(" "),t._m(219),t._m(220),t._v(" "),t._m(221),a("p",[t._v("方法定义：")]),t._v(" "),t._m(222),t._m(223),t._v(" "),t._m(224),a("p",[t._v("方法定义：")]),t._v(" "),t._m(225),a("p",[t._v("实例：")]),t._v(" "),t._m(226)])}),[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"ruby"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby"}},[this._v("#")]),this._v(" Ruby")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-开始"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-开始"}},[this._v("#")]),this._v(" Ruby 开始")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[this._v("#!/usr/bin/ruby -w")]),this._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[this._v("# -*- coding: UTF-8 -*-")]),this._v("\n\nputs "),s("span",{pre:!0,attrs:{class:"token string"}},[this._v('"你好，世界！"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v(";")]),this._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("注")]),this._v("：Ruby2.0~2.6 版本中文注释有可能需要使用: "),s("code",[this._v("# -*- coding: GBK -*-")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby -w")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding: UTF-8 -*-")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这是一个单行注释")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#a = 3")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这是一个多行注释")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('=begin\na = [0,1,2,3]\nhashPara = {:name=>"name1",:number=>"num1"}\n=end')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-环境"}},[this._v("#")]),this._v(" Ruby 环境")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$ruby")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" options "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" programfile "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" arguments "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("选项")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("-a")]),t._v(" "),a("td",[t._v("与 -n 或 -p 一起使用时，可以打开自动拆分模式(auto split mode)。请查看 -n 和 -p 选项。")])]),t._v(" "),a("tr",[a("td",[t._v("-c")]),t._v(" "),a("td",[t._v("只检查语法，不执行程序。")])]),t._v(" "),a("tr",[a("td",[t._v("-C dir")]),t._v(" "),a("td",[t._v("在执行前改变目录（等价于 -X）。")])]),t._v(" "),a("tr",[a("td",[t._v("-d")]),t._v(" "),a("td",[t._v("启用调试模式（等价于 -debug）。")])]),t._v(" "),a("tr",[a("td",[t._v("-F pat")]),t._v(" "),a("td",[t._v("指定 pat 作为默认的分离模式（$;）。")])]),t._v(" "),a("tr",[a("td",[t._v("-e prog")]),t._v(" "),a("td",[t._v("指定 prog 作为程序在命令行中执行。可以指定多个 -e 选项，用来执行多个程序。")])]),t._v(" "),a("tr",[a("td",[t._v("-h")]),t._v(" "),a("td",[t._v("显示命令行选项的一个概览。")])]),t._v(" "),a("tr",[a("td",[t._v("-i [ ext]")]),t._v(" "),a("td",[t._v("把文件内容重写为程序输出。原始文件会被加上扩展名 ext 保存下来。如果未指定 ext，原始文件会被删除。")])]),t._v(" "),a("tr",[a("td",[t._v("-I dir")]),t._v(" "),a("td",[t._v("添加 dir 作为加载库的目录。")])]),t._v(" "),a("tr",[a("td",[t._v("-K [ kcode]")]),t._v(" "),a("td",[t._v("指定多字节字符集编码。e 或 E 对应 EUC（extended Unix code），s 或 S 对应 SJIS（Shift-JIS），u 或 U 对应 UTF-8，a、A、n 或 N 对应 ASCII。")])]),t._v(" "),a("tr",[a("td",[t._v("-l")]),t._v(" "),a("td",[t._v("启用自动行尾处理。从输入行取消一个换行符，并向输出行追加一个换行符。")])]),t._v(" "),a("tr",[a("td",[t._v("-n")]),t._v(" "),a("td",[t._v("把代码放置在一个输入循环中（就像在 while gets; ... end 中一样）。")])]),t._v(" "),a("tr",[a("td",[t._v("-0[ octal]")]),t._v(" "),a("td",[t._v("设置默认的记录分隔符（$/）为八进制。如果未指定 octal 则默认为 \\0。")])]),t._v(" "),a("tr",[a("td",[t._v("-p")]),t._v(" "),a("td",[t._v("把代码放置在一个输入循环中。在每次迭代后输出变量 $_ 的值。")])]),t._v(" "),a("tr",[a("td",[t._v("-r lib")]),t._v(" "),a("td",[t._v("使用 require 来加载 lib 作为执行前的库。")])]),t._v(" "),a("tr",[a("td",[t._v("-s")]),t._v(" "),a("td",[t._v("解读程序名称和文件名参数之间的匹配模式 -xxx 的任何参数作为开关，并定义相应的变量。")])]),t._v(" "),a("tr",[a("td",[t._v("-T [level]")]),t._v(" "),a("td",[t._v("设置安全级别，执行不纯度测试（如果未指定 level，则默认值为 1）。")])]),t._v(" "),a("tr",[a("td",[t._v("-v")]),t._v(" "),a("td",[t._v("显示版本，并启用冗余模式。")])]),t._v(" "),a("tr",[a("td",[t._v("-w")]),t._v(" "),a("td",[t._v("启用冗余模式。如果未指定程序文件，则从 STDIN 读取。")])]),t._v(" "),a("tr",[a("td",[t._v("-x [dir]")]),t._v(" "),a("td",[t._v("删除 #!ruby 行之前的文本。如果指定了 dir，则把目录改变为 dir。")])]),t._v(" "),a("tr",[a("td",[t._v("-X dir")]),t._v(" "),a("td",[t._v("在执行前改变目录（等价于 -C）。")])]),t._v(" "),a("tr",[a("td",[t._v("-y")]),t._v(" "),a("td",[t._v("启用解析器调试模式。")])]),t._v(" "),a("tr",[a("td",[t._v("--copyright")]),t._v(" "),a("td",[t._v("显示版权声明。")])]),t._v(" "),a("tr",[a("td",[t._v("--debug")]),t._v(" "),a("td",[t._v("启用调试模式（等价于 -d）。")])]),t._v(" "),a("tr",[a("td",[t._v("--help")]),t._v(" "),a("td",[t._v("显示命令行选项的一个概览（等价于 -h）。")])]),t._v(" "),a("tr",[a("td",[t._v("--version")]),t._v(" "),a("td",[t._v("显示版本。")])]),t._v(" "),a("tr",[a("td",[t._v("--verbose")]),t._v(" "),a("td",[t._v("启用冗余模式（等价于 -v）。设置 $VERBOSE 为 true。")])]),t._v(" "),a("tr",[a("td",[t._v("--yydebug")]),t._v(" "),a("td",[t._v("启用解析器调试模式（等价于 -y）。")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$ruby")]),t._v(" -ne "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'print if /Ruby/'")]),t._v(" /usr/share/bin\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$ruby")]),t._v(" -n -e "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'print if /Ruby/'")]),t._v(" /usr/share/bin\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-保留字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-保留字"}},[this._v("#")]),this._v(" Ruby 保留字")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th"),t._v(" "),a("th"),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("BEGIN")]),t._v(" "),a("td",[t._v("do")]),t._v(" "),a("td",[t._v("next")]),t._v(" "),a("td",[t._v("then")])]),t._v(" "),a("tr",[a("td",[t._v("END")]),t._v(" "),a("td",[t._v("else")]),t._v(" "),a("td",[t._v("nil")]),t._v(" "),a("td",[t._v("true")])]),t._v(" "),a("tr",[a("td",[t._v("alias")]),t._v(" "),a("td",[t._v("elsif")]),t._v(" "),a("td",[t._v("not")]),t._v(" "),a("td",[t._v("undef")])]),t._v(" "),a("tr",[a("td",[t._v("and")]),t._v(" "),a("td",[t._v("end")]),t._v(" "),a("td",[t._v("or")]),t._v(" "),a("td",[t._v("unless")])]),t._v(" "),a("tr",[a("td",[t._v("begin")]),t._v(" "),a("td",[t._v("ensure")]),t._v(" "),a("td",[t._v("redo")]),t._v(" "),a("td",[t._v("until")])]),t._v(" "),a("tr",[a("td",[t._v("break")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("rescue")]),t._v(" "),a("td",[t._v("when")])]),t._v(" "),a("tr",[a("td",[t._v("case")]),t._v(" "),a("td",[t._v("for")]),t._v(" "),a("td",[t._v("retry")]),t._v(" "),a("td",[t._v("while")])]),t._v(" "),a("tr",[a("td",[t._v("class")]),t._v(" "),a("td",[t._v("if")]),t._v(" "),a("td",[t._v("return")]),t._v(" "),a("td",[t._v("while")])]),t._v(" "),a("tr",[a("td",[t._v("def")]),t._v(" "),a("td",[t._v("in")]),t._v(" "),a("td",[t._v("self")]),t._v(" "),a("td",[a("strong",[t._v("FILE")])])]),t._v(" "),a("tr",[a("td",[t._v("defined?")]),t._v(" "),a("td",[t._v("module")]),t._v(" "),a("td",[t._v("super")]),t._v(" "),a("td",[a("strong",[t._v("LINE")])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-语句"}},[this._v("#")]),this._v(" Ruby 语句")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("语句")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("puts")])]),t._v(" "),a("td",[t._v("语句输出整个字符串到屏幕上，光标会跳到下一行。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("putc")])]),t._v(" "),a("td",[t._v("语句可用于依次输出一个字符。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("print")])]),t._v(" "),a("td",[t._v("语句与 puts 类似，光标定位在同一行。")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" conditional "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elsif")]),t._v(" conditional "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n      code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unless")]),t._v(" conditional "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   code\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n   code "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" expression\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" expression "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" expression "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   code "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n   code "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding: UTF-8 -*-")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" conditional "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   code\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#或者")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" conditional "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   code\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("until")]),t._v(" conditional "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   code\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" variable "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" variable "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" expression "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   code\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".5")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n   puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"局部变量的值为 '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".5")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("next")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n   puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"局部变量的值为 '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".5")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n      puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"局部变量的值为 '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("redo")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[this._v("# require语法")]),this._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[this._v("require")]),this._v(" filename\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 示例")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 $LOAD_PATH << '.' 让 Ruby 知道必须在当前目录中搜索被引用的文件。如果您不想使用 $LOAD_PATH，那么您可以使用 require_relative 来从一个相对目录引用文件。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$LOAD_PATH")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 文件扩展名 .rb 不是必需的。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'trig.rb'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'moral'")]),t._v("\n\ny "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Trig")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Trig")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PI")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Moral")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Moral")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VERY_BAD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("注意：")]),this._v(" 文件包含相同的函数名称时，会在引用调用程序时导致代码模糊，但是模块避免了这种代码模糊，而且我们可以使用模块的名称调用适当的函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[this._v("# include 语法")]),this._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[this._v("include")]),this._v(" modulename\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果模块是定义在一个单独的文件中，那么在嵌入模块之前就需要使用 "),s("code",[this._v("require")]),this._v(" 语句引用该文件。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Session")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DEFAULT_SESSION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Ne")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Session")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_last_session")])]),t._v("\n      puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"the last session is:"')]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Session")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_current_sesion")])]),t._v("\n      puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"the current session is:"')]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$LOAD_PATH")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Session"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SessionHandle")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Session")]),t._v("\n   default_session_count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_session_count")])]),t._v("\n      puts "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Session")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DEFAULT_SESSION")]),t._v("\n      number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("\n      puts number\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\nsh "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SessionHandle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Week")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FIRST_DAY")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Week")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_current_sesion\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Week")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_last_session\nsh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_session_count\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("alias")]),this._v("用于为方法或全局变量起别名。别名不能在方法主体内定义。即使方法被重写，方法的别名也保持方法的当前定义。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[this._v("alias")]),this._v(" 方法名 方法名\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[this._v("alias")]),this._v(" 全局变量 全局变量\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 示例")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alias")]),t._v(" foo bar "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#为 bar 定义了别名为 foo")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alias")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$MATCH")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#为 $& 定义了别名为 $MATCH")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("undef")]),this._v("用于取消方法定义。"),s("code",[this._v("undef")]),this._v("不能出现在方法主体内。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[this._v("undef")]),this._v(" 方法名\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[this._v("#示例")]),this._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[this._v("undef")]),this._v(" bar "),s("span",{pre:!0,attrs:{class:"token comment"}},[this._v("#取消名为 bar的方法定义")]),this._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("通过使用 "),s("code",[this._v("undef")]),this._v(" 和 "),s("code",[this._v("alias")]),this._v("，类的接口可以从父类独立修改，但请注意，在自身内部方法调用时，它可能会破坏程序。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding: UTF-8 -*-")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")])]),t._v("\n   puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"在 test 方法内"')]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v("\n   puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"你又回到了 test 方法内"')]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\ntest "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"你在块内"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#执行结果为：")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在 test 方法内")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 你在块内")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 你又回到了 test 方法内")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 你在块内")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding: UTF-8 -*-")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")])]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n   puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"在 test 方法内"')]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# yield 语句后跟着参数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\ntest "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"你在块 '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v(' 内"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 执行结果为：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 你在块 5 内")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在 test 方法内")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 你在块 100 内")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果您想使用 "),s("code",[this._v("yield")]),this._v(" 语句传递多个参数，使用逗号分隔。如下所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#yield后面跟两个参数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此时块如下所示：")]),t._v("\ntest "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" statement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-变量"}},[this._v("#")]),this._v(" Ruby 变量")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("局部变量：局部变量是在方法中定义的变量。局部变量在方法外是不可用的。局部变量以小写字母或 "),a("code",[t._v("_")]),t._v(" 开始。")]),t._v(" "),a("li",[t._v("实例变量：实例变量可以跨任何特定的实例或对象中的方法使用。这意味着，实例变量可以从对象到对象的改变。实例变量在变量名之前放置符号（"),a("code",[t._v("@")]),t._v("）。")]),t._v(" "),a("li",[t._v("类变量：类变量可以跨不同的对象使用。类变量属于类，且是类的一个属性。类变量在变量名之前放置符号（"),a("code",[t._v("@@")]),t._v("）。")]),t._v(" "),a("li",[t._v("全局变量：类变量不能跨类使用。如果您想要有一个可以跨类使用的变量，您需要定义全局变量。全局变量总是以美元符号（"),a("code",[t._v("$")]),t._v("）开始。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("变量")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("DLN_LIBRARY_PATH")]),t._v(" "),a("td",[t._v("动态加载模块搜索的路径。")])]),t._v(" "),a("tr",[a("td",[t._v("HOME")]),t._v(" "),a("td",[t._v('当没有参数传递给 Dir::chdir 时，要移动到的目录。也用于 File::expand_path 来扩展 "~"。')])]),t._v(" "),a("tr",[a("td",[t._v("LOGDIR")]),t._v(" "),a("td",[t._v("当没有参数传递给 Dir::chdir 且未设置环境变量 HOME 时，要移动到的目录。")])]),t._v(" "),a("tr",[a("td",[t._v("PATH")]),t._v(" "),a("td",[t._v("执行子进程的搜索路径，以及在指定 -S 选项后，Ruby 程序的搜索路径。每个路径用冒号分隔（在 DOS 和 Windows 中用分号分隔）。")])]),t._v(" "),a("tr",[a("td",[t._v("RUBYLIB")]),t._v(" "),a("td",[t._v("库的搜索路径。每个路径用冒号分隔（在 DOS 和 Windows 中用分号分隔）。")])]),t._v(" "),a("tr",[a("td",[t._v("RUBYLIB_PREFIX")]),t._v(" "),a("td",[t._v("用于修改 RUBYLIB 搜索路径，通过使用格式 path1;path2 或 path1path2，把库的前缀 path1 替换为 path2。")])]),t._v(" "),a("tr",[a("td",[t._v("RUBYOPT")]),t._v(" "),a("td",[t._v("传给 Ruby 解释器的命令行选项。在 taint 模式时被忽略（其中，$SAFE 大于 0）。")])]),t._v(" "),a("tr",[a("td",[t._v("RUBYPATH")]),t._v(" "),a("td",[t._v("指定 -S 选项后，Ruby 程序的搜索路径。优先级高于 PATH。在 taint 模式时被忽略（其中，$SAFE 大于 0）。")])]),t._v(" "),a("tr",[a("td",[t._v("RUBYSHELL")]),t._v(" "),a("td",[t._v("指定执行命令时所使用的 shell。如果未设置该环境变量，则使用 SHELL 或 COMSPEC。")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("对于 Unix，使用 "),s("code",[this._v("env")]),this._v(" 命令来查看所有环境变量的列表。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-运算符"}},[this._v("#")]),this._v(" Ruby 运算符")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("运算符")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("实例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("+")]),t._v(" "),a("td",[t._v("加法 - 把运算符两边的操作数相加")]),t._v(" "),a("td",[t._v("a + b 将得到 30")])]),t._v(" "),a("tr",[a("td",[t._v("-")]),t._v(" "),a("td",[t._v("减法 - 把左操作数减去右操作数")]),t._v(" "),a("td",[t._v("a - b 将得到 -10")])]),t._v(" "),a("tr",[a("td",[t._v("*")]),t._v(" "),a("td",[t._v("乘法 - 把运算符两边的操作数相乘")]),t._v(" "),a("td",[t._v("a * b 将得到 200")])]),t._v(" "),a("tr",[a("td",[t._v("/")]),t._v(" "),a("td",[t._v("除法 - 把左操作数除以右操作数")]),t._v(" "),a("td",[t._v("b / a 将得到 2")])]),t._v(" "),a("tr",[a("td",[t._v("%")]),t._v(" "),a("td",[t._v("求模 - 把左操作数除以右操作数，返回余数")]),t._v(" "),a("td",[t._v("b % a 将得到 0")])]),t._v(" "),a("tr",[a("td",[t._v("**")]),t._v(" "),a("td",[t._v("指数 - 执行指数计算")]),t._v(" "),a("td",[t._v("a**b 将得到 10 的 20 次方")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("运算符")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("实例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("==")]),t._v(" "),a("td",[t._v("检查两个操作数的值是否相等，如果相等则条件为真。")]),t._v(" "),a("td",[t._v("(a == b) 不为真。")])]),t._v(" "),a("tr",[a("td",[t._v("!=")]),t._v(" "),a("td",[t._v("检查两个操作数的值是否相等，如果不相等则条件为真。")]),t._v(" "),a("td",[t._v("(a != b) 为真。")])]),t._v(" "),a("tr",[a("td",[t._v(">")]),t._v(" "),a("td",[t._v("检查左操作数的值是否大于右操作数的值，如果是则条件为真。")]),t._v(" "),a("td",[t._v("(a > b) 不为真。")])]),t._v(" "),a("tr",[a("td",[t._v("<")]),t._v(" "),a("td",[t._v("检查左操作数的值是否小于右操作数的值，如果是则条件为真。")]),t._v(" "),a("td",[t._v("(a < b) 为真。")])]),t._v(" "),a("tr",[a("td",[t._v(">=")]),t._v(" "),a("td",[t._v("检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。")]),t._v(" "),a("td",[t._v("(a >= b) 不为真。")])]),t._v(" "),a("tr",[a("td",[t._v("<=")]),t._v(" "),a("td",[t._v("检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。")]),t._v(" "),a("td",[t._v("(a <= b) 为真。")])]),t._v(" "),a("tr",[a("td",[t._v("<=>")]),t._v(" "),a("td",[t._v("联合比较运算符。如果第一个操作数等于第二个操作数则返回 0，如果第一个操作数大于第二个操作数则返回 1，如果第一个操作数小于第二个操作数则返回 -1。")]),t._v(" "),a("td",[t._v("(a <=> b) 返回 -1。")])]),t._v(" "),a("tr",[a("td",[t._v("===")]),t._v(" "),a("td",[t._v("用于测试 case 语句的 when 子句内的相等。")]),t._v(" "),a("td",[t._v("(1...10) === 5 返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v(".eql?")]),t._v(" "),a("td",[t._v("如果接收器和参数具有相同的类型和相等的值，则返回 true。")]),t._v(" "),a("td",[t._v("1 == 1.0 返回 true，但是 1.eql?(1.0) 返回 false。")])]),t._v(" "),a("tr",[a("td",[t._v("equal?")]),t._v(" "),a("td",[t._v("如果接收器和参数具有相同的对象 id，则返回 true。")]),t._v(" "),a("td",[t._v("如果 aObj 是 bObj 的副本，那么 aObj == bObj 返回 true，a.equal?bObj 返回 false，但是 a.equal?aObj 返回 true。")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("运算符")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("实例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("=")]),t._v(" "),a("td",[t._v("简单的赋值运算符，把右操作数的值赋给左操作数")]),t._v(" "),a("td",[t._v("c = a + b 将把 a + b 的值赋给 c")])]),t._v(" "),a("tr",[a("td",[t._v("+=")]),t._v(" "),a("td",[t._v("加且赋值运算符，把右操作数加上左操作数的结果赋值给左操作数")]),t._v(" "),a("td",[t._v("c += a 相当于 c = c + a")])]),t._v(" "),a("tr",[a("td",[t._v("-=")]),t._v(" "),a("td",[t._v("减且赋值运算符，把左操作数减去右操作数的结果赋值给左操作数")]),t._v(" "),a("td",[t._v("c -= a 相当于 c = c - a")])]),t._v(" "),a("tr",[a("td",[t._v("*=")]),t._v(" "),a("td",[t._v("乘且赋值运算符，把右操作数乘以左操作数的结果赋值给左操作数")]),t._v(" "),a("td",[t._v("c _= a 相当于 c = c _ a")])]),t._v(" "),a("tr",[a("td",[t._v("/=")]),t._v(" "),a("td",[t._v("除且赋值运算符，把左操作数除以右操作数的结果赋值给左操作数")]),t._v(" "),a("td",[t._v("c /= a 相当于 c = c / a")])]),t._v(" "),a("tr",[a("td",[t._v("%=")]),t._v(" "),a("td",[t._v("求模且赋值运算符，求两个操作数的模赋值给左操作数")]),t._v(" "),a("td",[t._v("c %= a 相当于 c = c % a")])]),t._v(" "),a("tr",[a("td",[t._v("**=")]),t._v(" "),a("td",[t._v("指数且赋值运算符，执行指数计算，并赋值给左操作数")]),t._v(" "),a("td",[t._v("c **= a 相当于 c = c ** a")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[this._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v(",")]),this._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[this._v("=")]),this._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v(",")]),this._v(" c\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("运算符")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("实例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("&")]),t._v(" "),a("td",[t._v("如果同时存在于两个操作数中，二进制 AND 运算符复制一位到结果中。")]),t._v(" "),a("td",[t._v("(a & b) 将得到 12，即为 0000 1100")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("如果存在于任一操作数中，二进制 OR 运算符复制一位到结果中。")]),t._v(" "),a("td",[t._v("(a")])]),t._v(" "),a("tr",[a("td",[t._v("^")]),t._v(" "),a("td",[t._v("如果存在于其中一个操作数中但不同时存在于两个操作数中，二进制异或运算符复制一位到结果中。")]),t._v(" "),a("td",[t._v("(a ^ b) 将得到 49，即为 0011 0001")])]),t._v(" "),a("tr",[a("td",[t._v("~")]),t._v(" "),a("td",[t._v('二进制补码运算符是一元运算符，具有"翻转"位效果，即 0 变成 1，1 变成 0。')]),t._v(" "),a("td",[t._v("(~a ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。")])]),t._v(" "),a("tr",[a("td",[t._v("<<")]),t._v(" "),a("td",[t._v("二进制左移运算符。左操作数的值向左移动右操作数指定的位数。")]),t._v(" "),a("td",[t._v("a << 2 将得到 240，即为 1111 0000")])]),t._v(" "),a("tr",[a("td",[t._v(">>")]),t._v(" "),a("td",[t._v("二进制右移运算符。左操作数的值向右移动右操作数指定的位数。")]),t._v(" "),a("td",[t._v("a >> 2 将得到 15，即为 0000 1111")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("运算符")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("实例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("and")]),t._v(" "),a("td",[t._v("称为逻辑与运算符。如果两个操作数都为真，则条件为真。")]),t._v(" "),a("td",[t._v("(a and b) 为真。")])]),t._v(" "),a("tr",[a("td",[t._v("or")]),t._v(" "),a("td",[t._v("称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。")]),t._v(" "),a("td",[t._v("(a or b) 为真。")])]),t._v(" "),a("tr",[a("td",[t._v("&&")]),t._v(" "),a("td",[t._v("称为逻辑与运算符。如果两个操作数都非零，则条件为真。")]),t._v(" "),a("td",[t._v("(a && b) 为真。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("||")])]),t._v(" "),a("td",[t._v("称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。")]),t._v(" "),a("td",[t._v("(a")])]),t._v(" "),a("tr",[a("td",[t._v("!")]),t._v(" "),a("td",[t._v("称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。")]),t._v(" "),a("td",[t._v("!(a && b) 为假。")])]),t._v(" "),a("tr",[a("td",[t._v("not")]),t._v(" "),a("td",[t._v("称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。")]),t._v(" "),a("td",[t._v("not(a && b) 为假。")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("运算符")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("实例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("? :")]),t._v(" "),a("td",[t._v("条件表达式")]),t._v(" "),a("td",[t._v("如果条件为真 ? 则值为 X : 否则值为 Y")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("运算符")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("实例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("..")]),t._v(" "),a("td",[t._v("创建一个从开始点到结束点的范围（包含结束点）")]),t._v(" "),a("td",[t._v("1..10 创建从 1 到 10 的范围")])]),t._v(" "),a("tr",[a("td",[t._v("...")]),t._v(" "),a("td",[t._v("创建一个从开始点到结束点的范围（不包含结束点）")]),t._v(" "),a("td",[t._v("1...10 创建从 1 到 9 的范围")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" foo    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "local-variable"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$_")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "global-variable"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" bar    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => nil（未定义）")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" method_call "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果方法已经定义，则为 True")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" puts        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "method"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" puts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => nil（在这里 bar 未定义）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" unpack      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => nil（在这里未定义）")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果存在可被 super 用户调用的方法，则为 True")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "super"（如果可被调用）')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => nil（如果不可被调用）")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果已传递代码块，则为 True")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "yield"（如果已传递块）')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defined")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => nil（如果未传递块）")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v(". 来调用类或模块中的方法")]),this._v(" "),s("li",[this._v(":: 来引用类或模块中的常量")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("注意")]),this._v(" ：在 Ruby 中，类和方法也可以被当作常量。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("运算符")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("是")]),t._v(" "),a("td",[t._v("::")]),t._v(" "),a("td",[t._v("常量解析运算符")])]),t._v(" "),a("tr",[a("td",[t._v("是")]),t._v(" "),a("td",[t._v("[ ][ ]=")]),t._v(" "),a("td",[t._v("元素引用、元素集合")])]),t._v(" "),a("tr",[a("td",[t._v("是")]),t._v(" "),a("td",[t._v("**")]),t._v(" "),a("td",[t._v("指数")])]),t._v(" "),a("tr",[a("td",[t._v("是")]),t._v(" "),a("td",[t._v("! ~ + -")]),t._v(" "),a("td",[t._v("非、补、一元加、一元减（最后两个的方法名为 +@ 和 -@）")])]),t._v(" "),a("tr",[a("td",[t._v("是")]),t._v(" "),a("td",[t._v("* / %")]),t._v(" "),a("td",[t._v("乘法、除法、求模")])]),t._v(" "),a("tr",[a("td",[t._v("是")]),t._v(" "),a("td",[t._v("+ -")]),t._v(" "),a("td",[t._v("加法和减法")])]),t._v(" "),a("tr",[a("td",[t._v("是")]),t._v(" "),a("td",[t._v(">> <<")]),t._v(" "),a("td",[t._v("位右移、位左移")])]),t._v(" "),a("tr",[a("td",[t._v("是")]),t._v(" "),a("td",[t._v("&")]),t._v(" "),a("td",[t._v("位与")])]),t._v(" "),a("tr",[a("td",[t._v("是")]),t._v(" "),a("td",[t._v("^")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("是")]),t._v(" "),a("td",[t._v("<= < > >=")]),t._v(" "),a("td",[t._v("比较运算符")])]),t._v(" "),a("tr",[a("td",[t._v("是")]),t._v(" "),a("td",[t._v("<=> == === != =~ !~")]),t._v(" "),a("td",[t._v("相等和模式匹配运算符（!= 和 !~ 不能被定义为方法）")])]),t._v(" "),a("tr",[a("td",[t._v("-")]),t._v(" "),a("td",[t._v("&&")]),t._v(" "),a("td",[t._v("逻辑与")])]),t._v(" "),a("tr",[a("td",[t._v("-")]),t._v(" "),a("td",[a("code",[t._v("||")])]),t._v(" "),a("td",[t._v("逻辑或")])]),t._v(" "),a("tr",[a("td",[t._v("-")]),t._v(" "),a("td",[t._v(".. ...")]),t._v(" "),a("td",[t._v("范围（包含、不包含）")])]),t._v(" "),a("tr",[a("td",[t._v("-")]),t._v(" "),a("td",[t._v("? :")]),t._v(" "),a("td",[t._v("三元 if-then-else")])]),t._v(" "),a("tr",[a("td",[t._v("-")]),t._v(" "),a("td",[t._v("= %= { /= -= +=")]),t._v(" "),a("td",[t._v("= &= >>= <<= *= &&=")])]),t._v(" "),a("tr",[a("td",[t._v("-")]),t._v(" "),a("td",[t._v("defined?")]),t._v(" "),a("td",[t._v("检查指定符号是否已定义")])]),t._v(" "),a("tr",[a("td",[t._v("-")]),t._v(" "),a("td",[t._v("not")]),t._v(" "),a("td",[t._v("逻辑否定")])]),t._v(" "),a("tr",[a("td",[t._v("-")]),t._v(" "),a("td",[t._v("or and")]),t._v(" "),a("td",[t._v("逻辑组成")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("注")]),this._v("：在方法列标识为 是 的运算符实际上是方法，因此可以被重载。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-范围（range）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-范围（range）"}},[this._v("#")]),this._v(" Ruby 范围（Range）")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#==> 1, 2, 3, 4, 5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#==> 1, 2, 3, 4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#==> 'a', 'b', 'c', 'd'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_a  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#==> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bat'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_a "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#==> ["bar", "bas", "bat"]')]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding: UTF-8 -*-")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定范围")]),t._v("\ndigits "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".9")]),t._v("\n\nputs digits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" digits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("min\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"最小值为 '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("ret"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n\nret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" digits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("max\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"最大值为 '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("ret"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n\nret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" digits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reject "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"不符合条件的有 '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("ret"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n\ndigits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("each")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("digit"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n   puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"在循环中 '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("digit"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" gets\n   print "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/start/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/end/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding: UTF-8 -*-")]),t._v("\n\nscore "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("70")]),t._v("\n\nresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" score\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".60")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bad"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("61.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".80")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Not Bad"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("81.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".100")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Good"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Wrong Number"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\nputs result  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#==> Not Bad")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding: UTF-8 -*-")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5 在 (1..10)"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'j'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"c 在 ('a'..'j')\"")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'j'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'z'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"z 在 ('a'..'j')\"")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-字符串（string）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-字符串（string）"}},[this._v("#")]),this._v(" Ruby 字符串（String）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("注")]),this._v("：在一个双引号括起的字符串内，转义字符会被解析。在一个单引号括起的字符串内，转义字符不会被解析，原样输出。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("反斜杠符号")]),t._v(" "),a("th",[t._v("十六进制字符")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("\\a")]),t._v(" "),a("td",[t._v("0x07")]),t._v(" "),a("td",[t._v("报警符")])]),t._v(" "),a("tr",[a("td",[t._v("\\b")]),t._v(" "),a("td",[t._v("0x08")]),t._v(" "),a("td",[t._v("退格键")])]),t._v(" "),a("tr",[a("td",[t._v("\\cx")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Control-x")])]),t._v(" "),a("tr",[a("td",[t._v("\\C-x")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Control-x")])]),t._v(" "),a("tr",[a("td",[t._v("\\e")]),t._v(" "),a("td",[t._v("0x1b")]),t._v(" "),a("td",[t._v("转义符")])]),t._v(" "),a("tr",[a("td",[t._v("\\f")]),t._v(" "),a("td",[t._v("0x0c")]),t._v(" "),a("td",[t._v("换页符")])]),t._v(" "),a("tr",[a("td",[t._v("\\M-\\C-x")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Meta-Control-x")])]),t._v(" "),a("tr",[a("td",[t._v("\\n")]),t._v(" "),a("td",[t._v("0x0a")]),t._v(" "),a("td",[t._v("换行符")])]),t._v(" "),a("tr",[a("td",[t._v("\\nnn")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("八进制表示法，其中 n 的范围为 0.7")])]),t._v(" "),a("tr",[a("td",[t._v("\\r")]),t._v(" "),a("td",[t._v("0x0d")]),t._v(" "),a("td",[t._v("回车符")])]),t._v(" "),a("tr",[a("td",[t._v("\\s")]),t._v(" "),a("td",[t._v("0x20")]),t._v(" "),a("td",[t._v("空格符")])]),t._v(" "),a("tr",[a("td",[t._v("\\t")]),t._v(" "),a("td",[t._v("0x09")]),t._v(" "),a("td",[t._v("制表符")])]),t._v(" "),a("tr",[a("td",[t._v("\\v")]),t._v(" "),a("td",[t._v("0x0b")]),t._v(" "),a("td",[t._v("垂直制表符")])]),t._v(" "),a("tr",[a("td",[t._v("\\x")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("字符 x")])]),t._v(" "),a("tr",[a("td",[t._v("\\xnn")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("十六进制表示法，其中 n 的范围为 0.9、 a.f 或 A.F")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[this._v("$KCODE")]),this._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[this._v("'u'")]),this._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("编码")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("a")]),t._v(" "),a("td",[t._v("ASCII （与 none 相同）。这是默认的。")])]),t._v(" "),a("tr",[a("td",[t._v("e")]),t._v(" "),a("td",[t._v("EUC。")])]),t._v(" "),a("tr",[a("td",[t._v("n")]),t._v(" "),a("td",[t._v("None （与 ASCII 相同）。")])]),t._v(" "),a("tr",[a("td",[t._v("u")]),t._v(" "),a("td",[t._v("UTF-8。")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n\nmyStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"THIS IS TEST"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfoo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myStr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("downcase\n\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("序号")]),t._v(" "),a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[a("code",[t._v("str % arg")])]),t._v(" "),a("td",[t._v('使用格式规范格式化字符串。如果 arg 包含一个以上的替代，那么 arg 必须是一个数组。如需了解更多格式规范的信息，请查看"内核模块"下的 sprintf。')])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[a("code",[t._v("str * integer")])]),t._v(" "),a("td",[t._v("返回一个包含 integer 个 str 的新的字符串。换句话说，str 被重复了 integer 次。")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[a("code",[t._v("str + other_str")])]),t._v(" "),a("td",[t._v("连接 other_str 到 str。")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[a("code",[t._v("str << obj")])]),t._v(" "),a("td",[t._v("连接一个对象到字符串。如果对象是范围为 0.255 之间的固定数字 Fixnum，则它会被转换为一个字符。把它与 concat 进行比较。")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[a("code",[t._v("str <=> other_str")])]),t._v(" "),a("td",[t._v("把 str 与 other_str 进行比较，返回 -1（小于）、0（等于）或 1（大于）。比较是区分大小写的。")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[a("code",[t._v("str == obj")])]),t._v(" "),a("td",[t._v("检查 str 和 obj 的相等性。如果 obj 不是字符串，则返回 false，如果 str <=> obj，则返回 true，返回 0。")])]),t._v(" "),a("tr",[a("td",[t._v("7")]),t._v(" "),a("td",[a("code",[t._v("str =~ obj")])]),t._v(" "),a("td",[t._v("根据正则表达式模式 obj 匹配 str。返回匹配开始的位置，否则返回 false。")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[a("code",[t._v("str[position] str[start, length] str[start..end] str[start...end]")])]),t._v(" "),a("td",[t._v("str[position] # 注意返回的是 ASCII 码而不是字符。使用索引截取子串")])]),t._v(" "),a("tr",[a("td",[t._v("9")]),t._v(" "),a("td",[a("code",[t._v("str.capitalize")])]),t._v(" "),a("td",[t._v("把字符串转换为大写字母显示。")])]),t._v(" "),a("tr",[a("td",[t._v("10")]),t._v(" "),a("td",[a("code",[t._v("str.capitalize!")])]),t._v(" "),a("td",[t._v("与 capitalize 相同，但是 str 会发生变化并返回。")])]),t._v(" "),a("tr",[a("td",[t._v("11")]),t._v(" "),a("td",[a("code",[t._v("str.casecmp")])]),t._v(" "),a("td",[t._v("不区分大小写的字符串比较。")])]),t._v(" "),a("tr",[a("td",[t._v("12")]),t._v(" "),a("td",[a("code",[t._v("str.center")])]),t._v(" "),a("td",[t._v("居中字符串。")])]),t._v(" "),a("tr",[a("td",[t._v("13")]),t._v(" "),a("td",[a("code",[t._v("str.chomp")])]),t._v(" "),a("td",[t._v("从字符串末尾移除记录分隔符（$/），通常是 \\n。如果没有记录分隔符，则不进行任何操作。")])]),t._v(" "),a("tr",[a("td",[t._v("14")]),t._v(" "),a("td",[a("code",[t._v("str.chomp!")])]),t._v(" "),a("td",[t._v("与 chomp 相同，但是 str 会发生变化并返回。")])]),t._v(" "),a("tr",[a("td",[t._v("15")]),t._v(" "),a("td",[a("code",[t._v("str.chop")])]),t._v(" "),a("td",[t._v("移除 str 中的最后一个字符。")])]),t._v(" "),a("tr",[a("td",[t._v("16")]),t._v(" "),a("td",[a("code",[t._v("str.chop!")])]),t._v(" "),a("td",[t._v("与 chop 相同，但是 str 会发生变化并返回。")])]),t._v(" "),a("tr",[a("td",[t._v("17")]),t._v(" "),a("td",[a("code",[t._v("str.concat(other_str)")])]),t._v(" "),a("td",[t._v("连接 other_str 到 str。")])]),t._v(" "),a("tr",[a("td",[t._v("18")]),t._v(" "),a("td",[a("code",[t._v("str.count(str, ...)")])]),t._v(" "),a("td",[t._v("给一个或多个字符集计数。如果有多个字符集，则给这些集合的交集计数。")])]),t._v(" "),a("tr",[a("td",[t._v("19")]),t._v(" "),a("td",[a("code",[t._v("str.crypt(other_str)")])]),t._v(" "),a("td",[t._v("对 str 应用单向加密哈希。参数是两个字符长的字符串，每个字符的范围为 a.z、 A.Z、 0.9、 . 或 /。")])]),t._v(" "),a("tr",[a("td",[t._v("20")]),t._v(" "),a("td",[a("code",[t._v("str.delete(other_str, ...)")])]),t._v(" "),a("td",[t._v("返回 str 的副本，参数交集中的所有字符会被删除。")])]),t._v(" "),a("tr",[a("td",[t._v("21")]),t._v(" "),a("td",[a("code",[t._v("str.delete!(other_str, ...)")])]),t._v(" "),a("td",[t._v("与 delete 相同，但是 str 会发生变化并返回。")])]),t._v(" "),a("tr",[a("td",[t._v("22")]),t._v(" "),a("td",[a("code",[t._v("str.downcase")])]),t._v(" "),a("td",[t._v("返回 str 的副本，所有的大写字母会被替换为小写字母。")])]),t._v(" "),a("tr",[a("td",[t._v("23")]),t._v(" "),a("td",[a("code",[t._v("str.downcase!")])]),t._v(" "),a("td",[t._v("与 downcase 相同，但是 str 会发生变化并返回。")])]),t._v(" "),a("tr",[a("td",[t._v("24")]),t._v(" "),a("td",[a("code",[t._v("str.dump")])]),t._v(" "),a("td",[t._v("返回 str 的版本，所有的非打印字符被替换为 \\nnn 符号，所有的特殊字符被转义。")])]),t._v(" "),a("tr",[a("td",[t._v("25")]),t._v(" "),a("td",[a("code",[t._v("str.each(separator=$/) { |substr| block }")])]),t._v(" "),a("td",[t._v("使用参数作为记录分隔符（默认是 $/）分隔 str，传递每个子字符串给被提供的块。")])]),t._v(" "),a("tr",[a("td",[t._v("26")]),t._v(" "),a("td",[a("code",[t._v("str.each_byte { |fixnum| block }")])]),t._v(" "),a("td",[t._v("传递 str 的每个字节给 block，以字节的十进制表示法返回每个字节。")])]),t._v(" "),a("tr",[a("td",[t._v("27")]),t._v(" "),a("td",[a("code",[t._v("str.each_line(separator=$/) { |substr| block }")])]),t._v(" "),a("td",[t._v("使用参数作为记录分隔符（默认是 $/）分隔 str，传递每个子字符串给被提供的 block。")])]),t._v(" "),a("tr",[a("td",[t._v("28")]),t._v(" "),a("td",[a("code",[t._v("str.empty?")])]),t._v(" "),a("td",[t._v("如果 str 为空（即长度为 0），则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("29")]),t._v(" "),a("td",[a("code",[t._v("str.eql?(other)")])]),t._v(" "),a("td",[t._v("如果两个字符串有相同的长度和内容，则这两个字符串相等。")])]),t._v(" "),a("tr",[a("td",[t._v("30")]),t._v(" "),a("td",[a("code",[t._v("str.gsub(pattern, replacement) [or]str.gsub(pattern) { |match| block }")])]),t._v(" "),a("td",[t._v("返回 str 的副本，pattern 的所有出现都替换为 replacement 或 block 的值。pattern 通常是一个正则表达式 Regexp；如果是一个字符串 String，则没有正则表达式元字符被解释（即，/\\d/ 将匹配一个数字，但 '\\d' 将匹配一个反斜杠后跟一个 'd'）。")])]),t._v(" "),a("tr",[a("td",[t._v("31")]),t._v(" "),a("td",[a("code",[t._v("str[fixnum] [or] str[fixnum,fixnum] [or] str[range] [or] str[regexp] [or] str[regexp, fixnum] [or] str[other_str]")])]),t._v(" "),a("td",[t._v("使用下列的参数引用 str：参数为一个 Fixnum，则返回 fixnum 的字符编码；参数为两个 Fixnum，则返回一个从偏移（第一个 fixnum）开始截至到长度（第二个 fixnum）为止的子字符串；参数为 range，则返回该范围内的一个子字符串；参数为 regexp，则返回匹配字符串的部分；参数为带有 fixnum 的 regexp，则返回 fixnum 位置的匹配数据；参数为 other_str，则返回匹配 other_str 的子字符串。一个负数的 Fixnum 从字符串的末尾 -1 开始。")])]),t._v(" "),a("tr",[a("td",[t._v("32")]),t._v(" "),a("td",[a("code",[t._v("str[fixnum] = fixnum [or] str[fixnum] = new_str [or] str[fixnum, fixnum] = new_str [or] str[range] = aString [or] str[regexp] =new_str [or] str[regexp, fixnum] =new_str [or] str[other_str] = new_str ]")])]),t._v(" "),a("td",[t._v("替换整个字符串或部分字符串。与 slice! 同义。")])]),t._v(" "),a("tr",[a("td",[t._v("33")]),t._v(" "),a("td",[a("code",[t._v("str.gsub!(pattern, replacement) [or] str.gsub!(pattern) { |match| block }")])]),t._v(" "),a("td",[t._v("执行 String#gsub 的替换，返回 str，如果没有替换被执行则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("34")]),t._v(" "),a("td",[a("code",[t._v("str.hash")])]),t._v(" "),a("td",[t._v("返回一个基于字符串长度和内容的哈希。")])]),t._v(" "),a("tr",[a("td",[t._v("35")]),t._v(" "),a("td",[a("code",[t._v("str.hex")])]),t._v(" "),a("td",[t._v("把 str 的前导字符当作十六进制数字的字符串（一个可选的符号和一个可选的 0x），并返回相对应的数字。如果错误则返回零。")])]),t._v(" "),a("tr",[a("td",[t._v("36")]),t._v(" "),a("td",[a("code",[t._v("str.include? other_str [or] str.include? fixnum")])]),t._v(" "),a("td",[t._v("如果 str 包含给定的字符串或字符，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("37")]),t._v(" "),a("td",[a("code",[t._v("str.index(substring [, offset]) [or] str.index(fixnum [, offset]) [or]str.index(regexp [, offset])")])]),t._v(" "),a("td",[t._v("返回给定子字符串、字符（fixnum）或模式（regexp）在 str 中第一次出现的索引。如果未找到则返回 nil。如果提供了第二个参数，则指定在字符串中开始搜索的位置。")])]),t._v(" "),a("tr",[a("td",[t._v("38")]),t._v(" "),a("td",[a("code",[t._v("str.insert(index, other_str)")])]),t._v(" "),a("td",[t._v("在给定索引的字符前插入 other_str，修改 str。负值索引从字符串的末尾开始计数，并在给定字符后插入。其意图是在给定的索引处开始插入一个字符串。")])]),t._v(" "),a("tr",[a("td",[t._v("39")]),t._v(" "),a("td",[a("code",[t._v("str.inspect")])]),t._v(" "),a("td",[t._v("返回 str 的可打印版本，带有转义的特殊字符。")])]),t._v(" "),a("tr",[a("td",[t._v("40")]),t._v(" "),a("td",[a("code",[t._v("str.intern [or] str.to_sym")])]),t._v(" "),a("td",[t._v("返回与 str 相对应的符号，如果之前不存在，则创建符号。")])]),t._v(" "),a("tr",[a("td",[t._v("41")]),t._v(" "),a("td",[a("code",[t._v("str.length")])]),t._v(" "),a("td",[t._v("返回 str 的长度。把它与 size 进行比较。")])]),t._v(" "),a("tr",[a("td",[t._v("42")]),t._v(" "),a("td",[a("code",[t._v("str.ljust(integer, padstr=' ')")])]),t._v(" "),a("td",[t._v("如果 integer 大于 str 的长度，则返回长度为 integer 的新字符串，新字符串以 str 左对齐，并以 padstr 作为填充。否则，返回 str。")])]),t._v(" "),a("tr",[a("td",[t._v("43")]),t._v(" "),a("td",[a("code",[t._v("str.lstrip")])]),t._v(" "),a("td",[t._v("返回 str 的副本，移除了前导的空格。")])]),t._v(" "),a("tr",[a("td",[t._v("44")]),t._v(" "),a("td",[a("code",[t._v("str.lstrip!")])]),t._v(" "),a("td",[t._v("从 str 中移除前导的空格，如果没有变化则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("45")]),t._v(" "),a("td",[a("code",[t._v("str.match(pattern)")])]),t._v(" "),a("td",[t._v("如果 pattern 不是正则表达式，则把 pattern 转换为正则表达式 Regexp，然后在 str 上调用它的匹配方法。")])]),t._v(" "),a("tr",[a("td",[t._v("46")]),t._v(" "),a("td",[a("code",[t._v("str.oct")])]),t._v(" "),a("td",[t._v("把 str 的前导字符当作十进制数字的字符串（一个可选的符号），并返回相对应的数字。如果转换失败，则返回 0。")])]),t._v(" "),a("tr",[a("td",[t._v("47")]),t._v(" "),a("td",[a("code",[t._v("str.replace(other_str)")])]),t._v(" "),a("td",[t._v("把 str 中的内容替换为 other_str 中的相对应的值。")])]),t._v(" "),a("tr",[a("td",[t._v("48")]),t._v(" "),a("td",[a("code",[t._v("str.reverse")])]),t._v(" "),a("td",[t._v("返回一个新字符串，新字符串是 str 的倒序。")])]),t._v(" "),a("tr",[a("td",[t._v("49")]),t._v(" "),a("td",[a("code",[t._v("str.reverse!")])]),t._v(" "),a("td",[t._v("逆转 str，str 会发生变化并返回。")])]),t._v(" "),a("tr",[a("td",[t._v("50")]),t._v(" "),a("td",[a("code",[t._v("str.rindex(substring [, fixnum]) [or]str.rindex(fixnum [, fixnum]) [or]str.rindex(regexp [, fixnum])")])]),t._v(" "),a("td",[t._v("返回给定子字符串、字符（fixnum）或模式（regexp）在 str 中最后一次出现的索引。如果未找到则返回 nil。如果提供了第二个参数，则指定在字符串中结束搜索的位置。超出该点的字符将不被考虑。")])]),t._v(" "),a("tr",[a("td",[t._v("51")]),t._v(" "),a("td",[a("code",[t._v("str.rjust(integer, padstr=' ')")])]),t._v(" "),a("td",[t._v("如果 integer 大于 str 的长度，则返回长度为 integer 的新字符串，新字符串以 str 右对齐，并以 padstr 作为填充。否则，返回 str。")])]),t._v(" "),a("tr",[a("td",[t._v("52")]),t._v(" "),a("td",[a("code",[t._v("str.rstrip")])]),t._v(" "),a("td",[t._v("返回 str 的副本，移除了尾随的空格。")])]),t._v(" "),a("tr",[a("td",[t._v("53")]),t._v(" "),a("td",[a("code",[t._v("str.rstrip!")])]),t._v(" "),a("td",[t._v("从 str 中移除尾随的空格，如果没有变化则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("54")]),t._v(" "),a("td",[a("code",[t._v("str.scan(pattern) [or]str.scan(pattern) { |match, ...| block }")])]),t._v(" "),a("td",[t._v("两种形式匹配 pattern（可以是一个正则表达式 Regexp 或一个字符串 String）遍历 str。针对每个匹配，会生成一个结果，结果会添加到结果数组中或传递给 block。如果 pattern 不包含分组，则每个独立的结果由匹配的字符串、$& 组成。如果 pattern 包含分组，每个独立的结果是一个包含每个分组入口的数组。")])]),t._v(" "),a("tr",[a("td",[t._v("55")]),t._v(" "),a("td",[a("code",[t._v("str.slice(fixnum) [or] str.slice(fixnum, fixnum) [or]str.slice(range) [or] str.slice(regexp) [or]str.slice(regexp, fixnum) [or] str.slice(other_str)See str[fixnum], etc.str.slice!(fixnum) [or] str.slice!(fixnum, fixnum) [or] str.slice!(range) [or] str.slice!(regexp) [or] str.slice!(other_str)")])]),t._v(" "),a("td",[t._v("从 str 中删除指定的部分，并返回删除的部分。如果值超出范围，参数带有 Fixnum 的形式，将生成一个 IndexError。参数为 range 的形式，将生成一个 RangeError，参数为 Regexp 和 String 的形式，将忽略执行动作。")])]),t._v(" "),a("tr",[a("td",[t._v("56")]),t._v(" "),a("td",[a("code",[t._v("str.split(pattern=$;, [limit])")])]),t._v(" "),a("td",[t._v("基于分隔符，把 str 分成子字符串，并返回这些子字符串的数组。如果 pattern 是一个字符串 String，那么在分割 str 时，它将作为分隔符使用。如果 pattern 是一个单一的空格，那么 str 是基于空格进行分割，会忽略前导空格和连续空格字符。如果 pattern 是一个正则表达式 Regexp，则 str 在 pattern 匹配的地方被分割。当 pattern 匹配一个零长度的字符串时，str 被分割成单个字符。如果省略了 pattern 参数，则使用 $; 的值。如果 $; 为 nil（默认的），str 基于空格进行分割，就像是指定了 `` 作为分隔符一样。如果省略了 limit 参数，会抑制尾随的 null 字段。如果 limit 是一个正数，则最多返回该数量的字段（如果 limit 为 1，则返回整个字符串作为数组中的唯一入口）。如果 limit 是一个负数，则返回的字段数量不限制，且不抑制尾随的 null 字段。")])]),t._v(" "),a("tr",[a("td",[t._v("57")]),t._v(" "),a("td",[a("code",[t._v("str.squeeze([other_str]*)")])]),t._v(" "),a("td",[t._v("使用为 String#count 描述的程序从 other_str 参数建立一系列字符。返回一个新的字符串，其中集合中出现的相同的字符会被替换为单个字符。如果没有给出参数，则所有相同的字符都被替换为单个字符。")])]),t._v(" "),a("tr",[a("td",[t._v("58")]),t._v(" "),a("td",[a("code",[t._v("str.squeeze!([other_str]*)")])]),t._v(" "),a("td",[t._v("与 squeeze 相同，但是 str 会发生变化并返回，如果没有变化则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("59")]),t._v(" "),a("td",[a("code",[t._v("str.strip")])]),t._v(" "),a("td",[t._v("返回 str 的副本，移除了前导的空格和尾随的空格。")])]),t._v(" "),a("tr",[a("td",[t._v("60")]),t._v(" "),a("td",[a("code",[t._v("str.strip!")])]),t._v(" "),a("td",[t._v("从 str 中移除前导的空格和尾随的空格，如果没有变化则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("61")]),t._v(" "),a("td",[a("code",[t._v("str.sub(pattern, replacement) [or]str.sub(pattern) { |match| block }")])]),t._v(" "),a("td",[t._v("返回 str 的副本，pattern 的第一次出现会被替换为 replacement 或 block 的值。pattern 通常是一个正则表达式 Regexp；如果是一个字符串 String，则没有正则表达式元字符被解释。")])]),t._v(" "),a("tr",[a("td",[t._v("62")]),t._v(" "),a("td",[a("code",[t._v("str.sub!(pattern, replacement) [or]str.sub!(pattern) { |match| block }")])]),t._v(" "),a("td",[t._v("执行 String#sub 替换，并返回 str，如果没有替换执行，则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("63")]),t._v(" "),a("td",[a("code",[t._v("str.succ [or] str.next")])]),t._v(" "),a("td",[t._v("返回 str 的继承。")])]),t._v(" "),a("tr",[a("td",[t._v("64")]),t._v(" "),a("td",[a("code",[t._v("str.succ! [or] str.next!")])]),t._v(" "),a("td",[t._v("相当于 String#succ，但是 str 会发生变化并返回。")])]),t._v(" "),a("tr",[a("td",[t._v("65")]),t._v(" "),a("td",[a("code",[t._v("str.sum(n=16)")])]),t._v(" "),a("td",[t._v("返回 str 中字符的 n-bit 校验和，其中 n 是可选的 Fixnum 参数，默认为 16。结果是简单地把 str 中每个字符的二进制值的总和，以 2n - 1 为模。这不是一个特别好的校验和。")])]),t._v(" "),a("tr",[a("td",[t._v("66")]),t._v(" "),a("td",[a("code",[t._v("str.swapcase")])]),t._v(" "),a("td",[t._v("返回 str 的副本，所有的大写字母转换为小写字母，所有的小写字母转换为大写字母。")])]),t._v(" "),a("tr",[a("td",[t._v("67")]),t._v(" "),a("td",[a("code",[t._v("str.swapcase!")])]),t._v(" "),a("td",[t._v("相当于 String#swapcase，但是 str 会发生变化并返回，如果没有变化则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("68")]),t._v(" "),a("td",[a("code",[t._v("str.to_f")])]),t._v(" "),a("td",[t._v("返回把 str 中的前导字符解释为浮点数的结果。超出有效数字的末尾的多余字符会被忽略。如果在 str 的开头没有有效数字，则返回 0.0。该方法不会生成异常。")])]),t._v(" "),a("tr",[a("td",[t._v("69")]),t._v(" "),a("td",[a("code",[t._v("str.to_i(base=10)")])]),t._v(" "),a("td",[t._v("返回把 str 中的前导字符解释为整数基数（基数为 2、 8、 10 或 16）的结果。超出有效数字的末尾的多余字符会被忽略。如果在 str 的开头没有有效数字，则返回 0。该方法不会生成异常。")])]),t._v(" "),a("tr",[a("td",[t._v("70")]),t._v(" "),a("td",[a("code",[t._v("str.to_s [or] str.to_str")])]),t._v(" "),a("td",[t._v("返回接收的值。")])]),t._v(" "),a("tr",[a("td",[t._v("71")]),t._v(" "),a("td",[a("code",[t._v("str.tr(from_str, to_str)")])]),t._v(" "),a("td",[t._v("返回 str 的副本，把 from_str 中的字符替换为 to_str 中相对应的字符。如果 to_str 比 from_str 短，那么它会以最后一个字符进行填充。两个字符串都可以使用 c1.c2 符号表示字符的范围。如果 from_str 以 ^ 开头，则表示除了所列出的字符以外的所有字符。")])]),t._v(" "),a("tr",[a("td",[t._v("72")]),t._v(" "),a("td",[a("code",[t._v("str.tr!(from_str, to_str)")])]),t._v(" "),a("td",[t._v("相当于 String#tr，但是 str 会发生变化并返回，如果没有变化则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("73")]),t._v(" "),a("td",[a("code",[t._v("str.tr_s(from_str, to_str)")])]),t._v(" "),a("td",[t._v("把 str 按照 String#tr 描述的规则进行处理，然后移除会影响翻译的重复字符。")])]),t._v(" "),a("tr",[a("td",[t._v("74")]),t._v(" "),a("td",[a("code",[t._v("str.tr_s!(from_str, to_str)")])]),t._v(" "),a("td",[t._v("相当于 String#tr_s，但是 str 会发生变化并返回，如果没有变化则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("75")]),t._v(" "),a("td",[a("code",[t._v("str.unpack(format)")])]),t._v(" "),a("td",[t._v("根据 format 字符串解码 str（可能包含二进制数据），返回被提取的每个值的数组。format 字符由一系列单字符指令组成。每个指令后可以跟着一个数字，表示重复该指令的次数。星号（*）将使用所有剩余的元素。指令 sSiIlL 每个后可能都跟着一个下划线（_），为指定类型使用底层平台的本地尺寸大小，否则使用独立于平台的一致的尺寸大小。format 字符串中的空格会被忽略。")])]),t._v(" "),a("tr",[a("td",[t._v("76")]),t._v(" "),a("td",[a("code",[t._v("str.upcase")])]),t._v(" "),a("td",[t._v("返回 str 的副本，所有的小写字母会被替换为大写字母。操作是环境不敏感的，只有字符 a 到 z 会受影响。")])]),t._v(" "),a("tr",[a("td",[t._v("77")]),t._v(" "),a("td",[a("code",[t._v("str.upcase!")])]),t._v(" "),a("td",[t._v("改变 str 的内容为大写，如果没有变化则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("78")]),t._v(" "),a("td",[a("code",[t._v("str.upto(other_str) { |s| block }")])]),t._v(" "),a("td",[t._v("遍历连续值，以 str 开始，以 other_str 结束（包含），轮流传递每个值给 block。String#succ 方法用于生成每个值。")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("指令")]),t._v(" "),a("th",[t._v("返回")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("A")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("移除尾随的 null 和空格。")])]),t._v(" "),a("tr",[a("td",[t._v("a")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("字符串。")])]),t._v(" "),a("tr",[a("td",[t._v("B")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("从每个字符中提取位（首先是最高有效位）。")])]),t._v(" "),a("tr",[a("td",[t._v("b")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("从每个字符中提取位（首先是最低有效位）。")])]),t._v(" "),a("tr",[a("td",[t._v("C")]),t._v(" "),a("td",[t._v("Fixnum")]),t._v(" "),a("td",[t._v("提取一个字符作为无符号整数。")])]),t._v(" "),a("tr",[a("td",[t._v("c")]),t._v(" "),a("td",[t._v("Fixnum")]),t._v(" "),a("td",[t._v("提取一个字符作为整数。")])]),t._v(" "),a("tr",[a("td",[t._v("D, d")]),t._v(" "),a("td",[t._v("Float")]),t._v(" "),a("td",[t._v("把 sizeof(double) 长度的字符当作原生的 double。")])]),t._v(" "),a("tr",[a("td",[t._v("E")]),t._v(" "),a("td",[t._v("Float")]),t._v(" "),a("td",[t._v("把 sizeof(double) 长度的字符当作 littleendian 字节顺序的 double。")])]),t._v(" "),a("tr",[a("td",[t._v("e")]),t._v(" "),a("td",[t._v("Float")]),t._v(" "),a("td",[t._v("把 sizeof(float) 长度的字符当作 littleendian 字节顺序的 float。")])]),t._v(" "),a("tr",[a("td",[t._v("F, f")]),t._v(" "),a("td",[t._v("Float")]),t._v(" "),a("td",[t._v("把 sizeof(float) 长度的字符当作原生的 float。")])]),t._v(" "),a("tr",[a("td",[t._v("G")]),t._v(" "),a("td",[t._v("Float")]),t._v(" "),a("td",[t._v("把 sizeof(double) 长度的字符当作 network 字节顺序的 double。")])]),t._v(" "),a("tr",[a("td",[t._v("g")]),t._v(" "),a("td",[t._v("Float")]),t._v(" "),a("td",[t._v("把 sizeof(float) 长度的字符当作 network 字节顺序的 float。")])]),t._v(" "),a("tr",[a("td",[t._v("H")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("从每个字符中提取十六进制（首先是最高有效位）。")])]),t._v(" "),a("tr",[a("td",[t._v("h")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("从每个字符中提取十六进制（首先是最低有效位）。")])]),t._v(" "),a("tr",[a("td",[t._v("I")]),t._v(" "),a("td",[t._v("Integer")]),t._v(" "),a("td",[t._v("把 sizeof(int) 长度（通过 _ 修改）的连续字符当作原生的 integer。")])]),t._v(" "),a("tr",[a("td",[t._v("i")]),t._v(" "),a("td",[t._v("Integer")]),t._v(" "),a("td",[t._v("把 sizeof(int) 长度（通过 _ 修改）的连续字符当作有符号的原生的 integer。")])]),t._v(" "),a("tr",[a("td",[t._v("L")]),t._v(" "),a("td",[t._v("Integer")]),t._v(" "),a("td",[t._v("把四个（通过 _ 修改）连续字符当作无符号的原生的 long integer。")])]),t._v(" "),a("tr",[a("td",[t._v("l")]),t._v(" "),a("td",[t._v("Integer")]),t._v(" "),a("td",[t._v("把四个（通过 _ 修改）连续字符当作有符号的原生的 long integer。")])]),t._v(" "),a("tr",[a("td",[t._v("M")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("引用可打印的。")])]),t._v(" "),a("tr",[a("td",[t._v("m")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("Base64 编码。")])]),t._v(" "),a("tr",[a("td",[t._v("N")]),t._v(" "),a("td",[t._v("Integer")]),t._v(" "),a("td",[t._v("把四个字符当作 network 字节顺序的无符号的 long。")])]),t._v(" "),a("tr",[a("td",[t._v("n")]),t._v(" "),a("td",[t._v("Fixnum")]),t._v(" "),a("td",[t._v("把两个字符当作 network 字节顺序的无符号的 short。")])]),t._v(" "),a("tr",[a("td",[t._v("P")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("把 sizeof(char *) 长度的字符当作指针，并从引用的位置返回 \\emph{len} 字符。")])]),t._v(" "),a("tr",[a("td",[t._v("p")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("把 sizeof(char *) 长度的字符当作一个空结束字符的指针。")])]),t._v(" "),a("tr",[a("td",[t._v("Q")]),t._v(" "),a("td",[t._v("Integer")]),t._v(" "),a("td",[t._v("把八个字符当作无符号的 quad word（64 位）。")])]),t._v(" "),a("tr",[a("td",[t._v("q")]),t._v(" "),a("td",[t._v("Integer")]),t._v(" "),a("td",[t._v("把八个字符当作有符号的 quad word（64 位）。")])]),t._v(" "),a("tr",[a("td",[t._v("S")]),t._v(" "),a("td",[t._v("Fixnum")]),t._v(" "),a("td",[t._v("把两个（如果使用 _ 则不同）连续字符当作 native 字节顺序的无符号的 short。")])]),t._v(" "),a("tr",[a("td",[t._v("s")]),t._v(" "),a("td",[t._v("Fixnum")]),t._v(" "),a("td",[t._v("把两个（如果使用 _ 则不同）连续字符当作 native 字节顺序的有符号的 short。")])]),t._v(" "),a("tr",[a("td",[t._v("U")]),t._v(" "),a("td",[t._v("Integer")]),t._v(" "),a("td",[t._v("UTF-8 字符，作为无符号整数。")])]),t._v(" "),a("tr",[a("td",[t._v("u")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("UU 编码。")])]),t._v(" "),a("tr",[a("td",[t._v("V")]),t._v(" "),a("td",[t._v("Fixnum")]),t._v(" "),a("td",[t._v("把四个字符当作 little-endian 字节顺序的无符号的 long。")])]),t._v(" "),a("tr",[a("td",[t._v("v")]),t._v(" "),a("td",[t._v("Fixnum")]),t._v(" "),a("td",[t._v("把两个字符当作 little-endian 字节顺序的无符号的 short。")])]),t._v(" "),a("tr",[a("td",[t._v("w")]),t._v(" "),a("td",[t._v("Integer")]),t._v(" "),a("td",[t._v("BER 压缩的整数。")])]),t._v(" "),a("tr",[a("td",[t._v("X")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("向后跳过一个字符。")])]),t._v(" "),a("tr",[a("td",[t._v("x")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("向前跳过一个字符。")])]),t._v(" "),a("tr",[a("td",[t._v("Z")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("和 * 一起使用，移除尾随的 null 直到第一个 null。")])]),t._v(" "),a("tr",[a("td",[t._v("@")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("跳过 length 参数给定的偏移量。")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc \\0\\0abc \\0\\0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A6Z6'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> ["abc", "abc "]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc \\0\\0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a3a3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> ["abc", " \\000\\000"]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc \\0abc \\0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Z*Z*'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> ["abc ", "abc "]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b8B8'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> ["10000110", "01100001"]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'h2H2c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> ["16", "61", 97]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\xfe\\xff\\xfe\\xff"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sS'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [-2, 65534]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"now=20is"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'M*'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> ["now is"]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"whole"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xax2aX2aX1aX2a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> ["h", "e", "l", "l", "o"]')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-数组（array）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-数组（array）"}},[this._v("#")]),this._v(" Ruby 数组（Array）")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\narray1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\narray2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\narray3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\narray4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#块")]),t._v("\narray5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\narray5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\narray6 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nputs array2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回 20")]),t._v("\nputs array2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回 20")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("array3"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#返回 ["name", "name", "name", "name"]')]),t._v("\n\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("array4"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#返回 [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("array6"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#返回 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n\ndigits "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" digits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("at"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("序号")]),t._v(" "),a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[a("code",[t._v("array & other_array")])]),t._v(" "),a("td",[t._v("返回一个新的数组，包含两个数组中共同的元素，没有重复。")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[a("code",[t._v("array * int [or] array * str")])]),t._v(" "),a("td",[t._v("返回一个新的数组，新数组通过连接 self 的 int 副本创建的。带有 String 参数时，相当于 self.join(str)。")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[a("code",[t._v("array + other_array")])]),t._v(" "),a("td",[t._v("返回一个新的数组，新数组通过连接两个数组产生第三个数组创建的。")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[a("code",[t._v("array - other_array")])]),t._v(" "),a("td",[t._v("返回一个新的数组，新数组是从初始数组中移除了在 other_array 中出现的项的副本。")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[a("code",[t._v("str <=> other_str")])]),t._v(" "),a("td",[t._v("把 str 与 other_str 进行比较，返回 -1（小于）、0（等于）或 1（大于）。比较是区分大小写的。")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[a("code",[t._v("array | other_array")])]),t._v(" "),a("td",[t._v("通过把 other_array 加入 array 中，移除重复项，返回一个新的数组。")])]),t._v(" "),a("tr",[a("td",[t._v("7")]),t._v(" "),a("td",[a("code",[t._v("array << obj")])]),t._v(" "),a("td",[t._v("把给定的对象附加到数组的末尾。该表达式返回数组本身，所以几个附加可以连在一起。")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[a("code",[t._v("array <=> other_array")])]),t._v(" "),a("td",[t._v("如果数组小于、等于或大于 other_array，则返回一个整数（-1、 0 或 +1）。")])]),t._v(" "),a("tr",[a("td",[t._v("9")]),t._v(" "),a("td",[a("code",[t._v("array == other_array")])]),t._v(" "),a("td",[t._v("如果两个数组包含相同的元素个数，且每个元素与另一个数组中相对应的元素相等（根据 Object.==），那么这两个数组相等。")])]),t._v(" "),a("tr",[a("td",[t._v("10")]),t._v(" "),a("td",[a("code",[t._v("array[index] [or] array[start, length] [or]array[range] [or] array.slice(index) [or]array.slice(start, length) [or] array.slice(range)")])]),t._v(" "),a("td",[t._v("返回索引为 index 的元素，或者返回从 start 开始直至 length 个元素的子数组，或者返回 range 指定的子数组。负值索引从数组末尾开始计数（-1 是最后一个元素）。如果 index（或开始索引）超出范围，则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("11")]),t._v(" "),a("td",[a("code",[t._v("array[index] = obj [or]array[start, length] = obj or an_array or nil [or]array[range] = obj or an_array or nil")])]),t._v(" "),a("td",[t._v("设置索引为 index 的元素，或者替换从 start 开始直至 length 个元素的子数组，或者替换 range 指定的子数组。如果索引大于数组的当前容量，那么数组会自动增长。负值索引从数组末尾开始计数。如果 length 为零则插入元素。如果在第二种或第三种形式中使用了 nil，则从 self 删除元素。")])]),t._v(" "),a("tr",[a("td",[t._v("12")]),t._v(" "),a("td",[a("code",[t._v("array.abbrev(pattern = nil)")])]),t._v(" "),a("td",[t._v("为 self 中字符串计算明确的缩写集合。如果传递一个模式或一个字符串，只考虑当字符串匹配模式或者以该字符串开始时的情况。")])]),t._v(" "),a("tr",[a("td",[t._v("13")]),t._v(" "),a("td",[a("code",[t._v("array.assoc(obj)")])]),t._v(" "),a("td",[t._v("搜索一个数组，其元素也是数组，使用 obj.== 把 obj 与每个包含的数组的第一个元素进行比较。如果匹配则返回第一个包含的数组，如果未找到匹配则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("14")]),t._v(" "),a("td",[a("code",[t._v("array.at(index)")])]),t._v(" "),a("td",[t._v("返回索引为 index 的元素。一个负值索引从 self 的末尾开始计数。如果索引超出范围则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("15")]),t._v(" "),a("td",[a("code",[t._v("array.clear")])]),t._v(" "),a("td",[t._v("从数组中移除所有的元素。")])]),t._v(" "),a("tr",[a("td",[t._v("16")]),t._v(" "),a("td",[a("code",[t._v("array.collect { |item| block } [or]array.map { |item| block }")])]),t._v(" "),a("td",[t._v("为 self 中的每个元素调用一次 block。创建一个新的数组，包含 block 返回的值。")])]),t._v(" "),a("tr",[a("td",[t._v("17")]),t._v(" "),a("td",[a("code",[t._v("array.collect! { |item| block } [or]array.map! { |item| block }")])]),t._v(" "),a("td",[t._v("为 self 中的每个元素调用一次 block，把元素替换为 block 返回的值。")])]),t._v(" "),a("tr",[a("td",[t._v("18")]),t._v(" "),a("td",[a("code",[t._v("array.compact")])]),t._v(" "),a("td",[t._v("返回 self 的副本，移除了所有的 nil 元素。")])]),t._v(" "),a("tr",[a("td",[t._v("19")]),t._v(" "),a("td",[a("code",[t._v("array.compact!")])]),t._v(" "),a("td",[t._v("从数组中移除所有的 nil 元素。如果没有变化则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("20")]),t._v(" "),a("td",[a("code",[t._v("array.concat(other_array)")])]),t._v(" "),a("td",[t._v("追加 other_array 中的元素到 self 中。")])]),t._v(" "),a("tr",[a("td",[t._v("21")]),t._v(" "),a("td",[a("code",[t._v("array.delete(obj) [or] array.delete(obj) { block }")])]),t._v(" "),a("td",[t._v("从 self 中删除等于 obj 的项。如果未找到相等项，则返回 nil。如果未找到相等项且给出了可选的代码 block，则返回 block 的结果。")])]),t._v(" "),a("tr",[a("td",[t._v("22")]),t._v(" "),a("td",[a("code",[t._v("array.delete_at(index)")])]),t._v(" "),a("td",[t._v("删除指定的 index 处的元素，并返回该元素。如果 index 超出范围，则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("23")]),t._v(" "),a("td",[a("code",[t._v("array.delete_if { |item| block }")])]),t._v(" "),a("td",[t._v("当 block 为 true 时，删除 self 的每个元素。")])]),t._v(" "),a("tr",[a("td",[t._v("24")]),t._v(" "),a("td",[a("code",[t._v("array.each { |item| block }")])]),t._v(" "),a("td",[t._v("为 self 中的每个元素调用一次 block，传递该元素作为参数。")])]),t._v(" "),a("tr",[a("td",[t._v("25")]),t._v(" "),a("td",[a("code",[t._v("array.each_index { |index| block }")])]),t._v(" "),a("td",[t._v("与 Array#each 相同，但是传递元素的 index，而不是传递元素本身。")])]),t._v(" "),a("tr",[a("td",[t._v("26")]),t._v(" "),a("td",[a("code",[t._v("array.empty?")])]),t._v(" "),a("td",[t._v("如果数组本身没有包含元素，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("27")]),t._v(" "),a("td",[a("code",[t._v("array.eql?(other)")])]),t._v(" "),a("td",[t._v("如果 array 和 other 是相同的对象，或者两个数组带有相同的内容，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("28")]),t._v(" "),a("td",[a("code",[t._v("array.fetch(index) [or] array.fetch(index, default) [or] array.fetch(index) { |index| block }")])]),t._v(" "),a("td",[t._v("尝试返回位置 index 处的元素。如果 index 位于数组外部，则第一种形式会抛出 IndexError 异常，第二种形式会返回 default，第三种形式会返回调用 block 传入 index 的值。负值的 index 从数组末尾开始计数。")])]),t._v(" "),a("tr",[a("td",[t._v("29")]),t._v(" "),a("td",[a("code",[t._v("array.fill(obj) [or]array.fill(obj, start [, length]) [or]array.fill(obj, range) [or]array.fill { |index| block } [or]array.fill(start [, length] ) { |index| block } [or]array.fill(range) { |index| block }")])]),t._v(" "),a("td",[t._v("前面三种形式设置 self 的被选元素为 obj。以 nil 开头相当于零。nil 的长度相当于 self.length。最后三种形式用 block 的值填充数组。block 通过带有被填充的每个元素的绝对索引来传递。")])]),t._v(" "),a("tr",[a("td",[t._v("30")]),t._v(" "),a("td",[a("code",[t._v("array.first [or] array.first(n)")])]),t._v(" "),a("td",[t._v("返回数组的第一个元素或前 n 个元素。如果数组为空，则第一种形式返回 nil，第二种形式返回一个空的数组。")])]),t._v(" "),a("tr",[a("td",[t._v("31")]),t._v(" "),a("td",[a("code",[t._v("array.flatten")])]),t._v(" "),a("td",[t._v("返回一个新的数组，新数组是一个一维的扁平化的数组（递归）。")])]),t._v(" "),a("tr",[a("td",[t._v("32")]),t._v(" "),a("td",[a("code",[t._v("array.flatten!")])]),t._v(" "),a("td",[t._v("把 array 进行扁平化。如果没有变化则返回 nil。（数组不包含子数组。）")])]),t._v(" "),a("tr",[a("td",[t._v("33")]),t._v(" "),a("td",[a("code",[t._v("array.frozen?")])]),t._v(" "),a("td",[t._v("如果 array 被冻结（或排序时暂时冻结），则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("34")]),t._v(" "),a("td",[a("code",[t._v("array.hash")])]),t._v(" "),a("td",[t._v("计算数组的哈希代码。两个具有相同内容的数组将具有相同的哈希代码。")])]),t._v(" "),a("tr",[a("td",[t._v("35")]),t._v(" "),a("td",[a("code",[t._v("array.include?(obj)")])]),t._v(" "),a("td",[t._v("如果 self 中包含 obj，则返回 true，否则返回 false。")])]),t._v(" "),a("tr",[a("td",[t._v("36")]),t._v(" "),a("td",[a("code",[t._v("array.index(obj)")])]),t._v(" "),a("td",[t._v("返回 self 中第一个等于 obj 的对象的 index。如果未找到匹配则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("37")]),t._v(" "),a("td",[a("code",[t._v("array.indexes(i1, i2, ... iN) [or] array.indices(i1, i2, ... iN)")])]),t._v(" "),a("td",[t._v("该方法在 Ruby 的最新版本中被废弃，所以请使用 Array#values_at。")])]),t._v(" "),a("tr",[a("td",[t._v("38")]),t._v(" "),a("td",[a("code",[t._v("array.indices(i1, i2, ... iN) [or] array.indexes(i1, i2, ... iN)")])]),t._v(" "),a("td",[t._v("该方法在 Ruby 的最新版本中被废弃，所以请使用 Array#values_at。")])]),t._v(" "),a("tr",[a("td",[t._v("39")]),t._v(" "),a("td",[a("code",[t._v("array.insert(index, obj...)")])]),t._v(" "),a("td",[t._v("在给定的 index 的元素前插入给定的值，index 可以是负值。")])]),t._v(" "),a("tr",[a("td",[t._v("40")]),t._v(" "),a("td",[a("code",[t._v("array.inspect")])]),t._v(" "),a("td",[t._v("创建一个数组的可打印版本。")])]),t._v(" "),a("tr",[a("td",[t._v("41")]),t._v(" "),a("td",[a("code",[t._v("array.join(sep=$,)")])]),t._v(" "),a("td",[t._v("返回一个字符串，通过把数组的每个元素转换为字符串，并使用 sep 分隔进行创建的。")])]),t._v(" "),a("tr",[a("td",[t._v("42")]),t._v(" "),a("td",[a("code",[t._v("array.last [or] array.last(n)")])]),t._v(" "),a("td",[t._v("返回 self 的最后一个元素。如果数组为空，则第一种形式返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("43")]),t._v(" "),a("td",[a("code",[t._v("array.length")])]),t._v(" "),a("td",[t._v("返回 self 中元素的个数。可能为零。")])]),t._v(" "),a("tr",[a("td",[t._v("44")]),t._v(" "),a("td",[a("code",[t._v("array.map { |item| block } [or]array.collect { |item| block }")])]),t._v(" "),a("td",[t._v("为 self 的每个元素调用一次 block。创建一个新的数组，包含 block 返回的值。")])]),t._v(" "),a("tr",[a("td",[t._v("45")]),t._v(" "),a("td",[a("code",[t._v("array.map! { |item| block } [or] array.collect! { |item| block }")])]),t._v(" "),a("td",[t._v("为 array 的每个元素调用一次 block，把元素替换为 block 返回的值。")])]),t._v(" "),a("tr",[a("td",[t._v("46")]),t._v(" "),a("td",[a("code",[t._v("array.nitems")])]),t._v(" "),a("td",[t._v("返回 self 中 non-nil 元素的个数。可能为零。")])]),t._v(" "),a("tr",[a("td",[t._v("47")]),t._v(" "),a("td",[a("code",[t._v("array.pack(aTemplateString)")])]),t._v(" "),a("td",[t._v("根据 aTemplateString 中的指令，把数组的内容压缩为二进制序列。指令 A、 a 和 Z 后可以跟一个表示结果字段宽度的数字。剩余的指令也可以带有一个表示要转换的数组元素个数的数字。如果数字是一个星号（*），则所有剩余的数组元素都将被转换。任何指令后都可以跟一个下划线（_），表示指定类型使用底层平台的本地尺寸大小，否则使用独立于平台的一致的尺寸大小。在模板字符串中空格会被忽略。")])]),t._v(" "),a("tr",[a("td",[t._v("48")]),t._v(" "),a("td",[a("code",[t._v("array.pop")])]),t._v(" "),a("td",[t._v("从 array 中移除最后一个元素，并返回该元素。如果 array 为空则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("49")]),t._v(" "),a("td",[a("code",[t._v("array.push(obj, ...)")])]),t._v(" "),a("td",[t._v("把给定的 obj 附加到数组的末尾。该表达式返回数组本身，所以几个附加可以连在一起。")])]),t._v(" "),a("tr",[a("td",[t._v("50")]),t._v(" "),a("td",[a("code",[t._v("array.rassoc(key)")])]),t._v(" "),a("td",[t._v("搜索一个数组，其元素也是数组，使用 == 把 key 与每个包含的数组的第二个元素进行比较。如果匹配则返回第一个包含的数组。")])]),t._v(" "),a("tr",[a("td",[t._v("51")]),t._v(" "),a("td",[a("code",[t._v("array.reject { |item| block }")])]),t._v(" "),a("td",[t._v("返回一个新的数组，包含当 block 不为 true 时的数组项。")])]),t._v(" "),a("tr",[a("td",[t._v("52")]),t._v(" "),a("td",[a("code",[t._v("array.reject! { |item| block }")])]),t._v(" "),a("td",[t._v("当 block 为真时，从 array 删除元素，如果没有变化则返回 nil。相当于 Array#delete_if。")])]),t._v(" "),a("tr",[a("td",[t._v("53")]),t._v(" "),a("td",[a("code",[t._v("array.replace(other_array)")])]),t._v(" "),a("td",[t._v("把 array 的内容替换为 other_array 的内容，必要的时候进行截断或扩充。")])]),t._v(" "),a("tr",[a("td",[t._v("54")]),t._v(" "),a("td",[a("code",[t._v("array.reverse")])]),t._v(" "),a("td",[t._v("返回一个新的数组，包含倒序排列的数组元素。")])]),t._v(" "),a("tr",[a("td",[t._v("55")]),t._v(" "),a("td",[a("code",[t._v("array.reverse!")])]),t._v(" "),a("td",[t._v("把 array 进行逆转。")])]),t._v(" "),a("tr",[a("td",[t._v("56")]),t._v(" "),a("td",[a("code",[t._v("array.reverse_each {|item| block }")])]),t._v(" "),a("td",[t._v("与 Array#each 相同，但是把 array 进行逆转。")])]),t._v(" "),a("tr",[a("td",[t._v("57")]),t._v(" "),a("td",[a("code",[t._v("array.rindex(obj)")])]),t._v(" "),a("td",[t._v("返回 array 中最后一个等于 obj 的对象的索引。如果未找到匹配，则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("58")]),t._v(" "),a("td",[a("code",[t._v("array.select {|item| block }")])]),t._v(" "),a("td",[t._v("调用从数组传入连续元素的 block，返回一个数组，包含 block 返回 true 值时的元素。")])]),t._v(" "),a("tr",[a("td",[t._v("59")]),t._v(" "),a("td",[a("code",[t._v("array.shift")])]),t._v(" "),a("td",[t._v("返回 self 的第一个元素，并移除该元素（把所有的其他元素下移一位）。如果数组为空，则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("60")]),t._v(" "),a("td",[a("code",[t._v("array.size")])]),t._v(" "),a("td",[t._v("返回 array 的长度（元素的个数）。length 的别名。")])]),t._v(" "),a("tr",[a("td",[t._v("61")]),t._v(" "),a("td",[a("code",[t._v("array.slice(index) [or] array.slice(start, length) [or] array.slice(range) [or] array[index] [or] array[start, length] [or] array[range]")])]),t._v(" "),a("td",[t._v("返回索引为 index 的元素，或者返回从 start 开始直至 length 个元素的子数组，或者返回 range 指定的子数组。负值索引从数组末尾开始计数（-1 是最后一个元素）。如果 index（或开始索引）超出范围，则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("62")]),t._v(" "),a("td",[a("code",[t._v("array.slice!(index) [or] array.slice!(start, length) [or] array.slice!(range)")])]),t._v(" "),a("td",[t._v("删除 index（长度是可选的）或 range 指定的元素。返回被删除的对象、子数组，如果 index 超出范围，则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("63")]),t._v(" "),a("td",[a("code",[t._v("array.sort [or] array.sort { | a,b | block }")])]),t._v(" "),a("td",[t._v("返回一个排序的数组。")])]),t._v(" "),a("tr",[a("td",[t._v("64")]),t._v(" "),a("td",[a("code",[t._v("array.sort! [or] array.sort! { | a,b | block }")])]),t._v(" "),a("td",[t._v("把数组进行排序。")])]),t._v(" "),a("tr",[a("td",[t._v("65")]),t._v(" "),a("td",[a("code",[t._v("array.to_a")])]),t._v(" "),a("td",[t._v("返回 self。如果在 Array 的子类上调用，则把接收参数转换为一个 Array 对象。")])]),t._v(" "),a("tr",[a("td",[t._v("66")]),t._v(" "),a("td",[a("code",[t._v("array.to_ary")])]),t._v(" "),a("td",[t._v("返回 self。")])]),t._v(" "),a("tr",[a("td",[t._v("67")]),t._v(" "),a("td",[a("code",[t._v("array.to_s")])]),t._v(" "),a("td",[t._v("返回 self.join。")])]),t._v(" "),a("tr",[a("td",[t._v("68")]),t._v(" "),a("td",[a("code",[t._v("array.transpose")])]),t._v(" "),a("td",[t._v("假设 self 是数组的数组，且置换行和列。")])]),t._v(" "),a("tr",[a("td",[t._v("69")]),t._v(" "),a("td",[a("code",[t._v("array.uniq")])]),t._v(" "),a("td",[t._v("返回一个新的数组，移除了 array 中的重复值。")])]),t._v(" "),a("tr",[a("td",[t._v("70")]),t._v(" "),a("td",[a("code",[t._v("array.uniq!")])]),t._v(" "),a("td",[t._v("从 self 中移除重复元素。如果没有变化（也就是说，未找到重复），则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("71")]),t._v(" "),a("td",[a("code",[t._v("array.unshift(obj, ...)")])]),t._v(" "),a("td",[t._v("把对象前置在数组的前面，其他元素上移一位。")])]),t._v(" "),a("tr",[a("td",[t._v("72")]),t._v(" "),a("td",[a("code",[t._v("array.values_at(selector,...)")])]),t._v(" "),a("td",[t._v("返回一个数组，包含 self 中与给定的 selector（一个或多个）相对应的元素。选择器可以是整数索引或者范围。")])]),t._v(" "),a("tr",[a("td",[t._v("73")]),t._v(" "),a("td",[a("code",[t._v("array.zip(arg, ...) [or] array.zip(arg, ...){ | arr | block }")])]),t._v(" "),a("td",[t._v("把任何参数转换为数组，然后把 array 的元素与每个参数中相对应的元素合并。")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("指令")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("@")]),t._v(" "),a("td",[t._v("移动到绝对位置。")])]),t._v(" "),a("tr",[a("td",[t._v("A")]),t._v(" "),a("td",[t._v("ASCII 字符串（填充 space，count 是宽度）。")])]),t._v(" "),a("tr",[a("td",[t._v("a")]),t._v(" "),a("td",[t._v("ASCII 字符串（填充 null，count 是宽度）。")])]),t._v(" "),a("tr",[a("td",[t._v("B")]),t._v(" "),a("td",[t._v("位字符串（降序）")])]),t._v(" "),a("tr",[a("td",[t._v("b")]),t._v(" "),a("td",[t._v("位字符串（升序）。")])]),t._v(" "),a("tr",[a("td",[t._v("C")]),t._v(" "),a("td",[t._v("无符号字符。")])]),t._v(" "),a("tr",[a("td",[t._v("c")]),t._v(" "),a("td",[t._v("字符。")])]),t._v(" "),a("tr",[a("td",[t._v("D, d")]),t._v(" "),a("td",[t._v("双精度浮点数，原生格式。")])]),t._v(" "),a("tr",[a("td",[t._v("E")]),t._v(" "),a("td",[t._v("双精度浮点数，little-endian 字节顺序。")])]),t._v(" "),a("tr",[a("td",[t._v("e")]),t._v(" "),a("td",[t._v("单精度浮点数，little-endian 字节顺序。")])]),t._v(" "),a("tr",[a("td",[t._v("F, f")]),t._v(" "),a("td",[t._v("单精度浮点数，原生格式。")])]),t._v(" "),a("tr",[a("td",[t._v("G")]),t._v(" "),a("td",[t._v("双精度浮点数，network（big-endian）字节顺序。")])]),t._v(" "),a("tr",[a("td",[t._v("g")]),t._v(" "),a("td",[t._v("单精度浮点数，network（big-endian）字节顺序。")])]),t._v(" "),a("tr",[a("td",[t._v("H")]),t._v(" "),a("td",[t._v("十六进制字符串（高位优先）。")])]),t._v(" "),a("tr",[a("td",[t._v("h")]),t._v(" "),a("td",[t._v("十六进制字符串（低位优先）。")])]),t._v(" "),a("tr",[a("td",[t._v("I")]),t._v(" "),a("td",[t._v("无符号整数。")])]),t._v(" "),a("tr",[a("td",[t._v("i")]),t._v(" "),a("td",[t._v("整数。")])]),t._v(" "),a("tr",[a("td",[t._v("L")]),t._v(" "),a("td",[t._v("无符号 long。")])]),t._v(" "),a("tr",[a("td",[t._v("l")]),t._v(" "),a("td",[t._v("Long。")])]),t._v(" "),a("tr",[a("td",[t._v("M")]),t._v(" "),a("td",[t._v("引用可打印的，MIME 编码。")])]),t._v(" "),a("tr",[a("td",[t._v("m")]),t._v(" "),a("td",[t._v("Base64 编码字符串。")])]),t._v(" "),a("tr",[a("td",[t._v("N")]),t._v(" "),a("td",[t._v("Long，network（big-endian）字节顺序。")])]),t._v(" "),a("tr",[a("td",[t._v("n")]),t._v(" "),a("td",[t._v("Short，network（big-endian）字节顺序。")])]),t._v(" "),a("tr",[a("td",[t._v("P")]),t._v(" "),a("td",[t._v("指向一个结构（固定长度的字符串）。")])]),t._v(" "),a("tr",[a("td",[t._v("p")]),t._v(" "),a("td",[t._v("指向一个空结束字符串。")])]),t._v(" "),a("tr",[a("td",[t._v("Q, q")]),t._v(" "),a("td",[t._v("64 位数字。")])]),t._v(" "),a("tr",[a("td",[t._v("S")]),t._v(" "),a("td",[t._v("无符号 short。")])]),t._v(" "),a("tr",[a("td",[t._v("s")]),t._v(" "),a("td",[t._v("Short。")])]),t._v(" "),a("tr",[a("td",[t._v("U")]),t._v(" "),a("td",[t._v("UTF-8。")])]),t._v(" "),a("tr",[a("td",[t._v("u")]),t._v(" "),a("td",[t._v("UU 编码字符串。")])]),t._v(" "),a("tr",[a("td",[t._v("V")]),t._v(" "),a("td",[t._v("Long，little-endian 字节顺序。")])]),t._v(" "),a("tr",[a("td",[t._v("v")]),t._v(" "),a("td",[t._v("Short，little-endian 字节顺序。")])]),t._v(" "),a("tr",[a("td",[t._v("w")]),t._v(" "),a("td",[t._v("BER 压缩的整数 \\fnm。")])]),t._v(" "),a("tr",[a("td",[t._v("X")]),t._v(" "),a("td",[t._v("向后跳过一个字节。")])]),t._v(" "),a("tr",[a("td",[t._v("x")]),t._v(" "),a("td",[t._v("Null 字节。")])]),t._v(" "),a("tr",[a("td",[t._v("Z")]),t._v(" "),a("td",[t._v("与 a 相同，除了 null 会被加上 *。")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("66")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("67")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nputs a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A3A3A3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> "a  b  c  "')]),t._v("\nputs a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a3a3a3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> "a\\000\\000b\\000\\000c\\000\\000"')]),t._v("\nputs n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ccc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> "ABC"')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-哈希（hash）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-哈希（hash）"}},[this._v("#")]),this._v(" Ruby 哈希（Hash）")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("months "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\nmonths "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"month"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmonths "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"month"')]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("months"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -> month")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("months"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -> month")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("H")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("H")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -> 100")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("H")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -> name")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jan"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"January"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 该哈希的键为一个数组")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" block "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n\n$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('", "')]),t._v("\nmonths "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"month"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmonths "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"January"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"February"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nkeys "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" months"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keys\n\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("keys"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# -> ["1", "2"]')]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("序号")]),t._v(" "),a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[a("code",[t._v("hash == other_hash")])]),t._v(" "),a("td",[t._v("检查两个哈希是否具有相同的键值对个数，键值对是否相互匹配，来判断两个哈希是否相等。")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[a("code",[t._v("hash.[key]")])]),t._v(" "),a("td",[t._v("使用键，从哈希引用值。如果未找到键，则返回默认值。")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[a("code",[t._v("hash.[key]=value")])]),t._v(" "),a("td",[t._v("把 value 给定的值与 key 给定的键进行关联。")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[a("code",[t._v("hash.clear")])]),t._v(" "),a("td",[t._v("从哈希中移除所有的键值对。")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[a("code",[t._v("hash.default(key = nil)")])]),t._v(" "),a("td",[t._v("返回 hash 的默认值，如果未通过 default= 进行设置，则返回 nil。（如果键在 hash 中不存在，则 [] 返回一个默认值。）")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[a("code",[t._v("hash.default = obj")])]),t._v(" "),a("td",[t._v("为 hash 设置默认值。")])]),t._v(" "),a("tr",[a("td",[t._v("7")]),t._v(" "),a("td",[a("code",[t._v("hash.default_proc")])]),t._v(" "),a("td",[t._v("如果 hash 通过块来创建，则返回块。")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[a("code",[t._v("hash.delete(key) [or] array.delete(key) { |key| block }")])]),t._v(" "),a("td",[t._v("通过 key 从 hash 中删除键值对。如果使用了块 且未找到匹配的键值对，则返回块的结果。把它与 delete_if 进行比较。")])]),t._v(" "),a("tr",[a("td",[t._v("9")]),t._v(" "),a("td",[a("code",[t._v("hash.delete_if { |key,value| block }")])]),t._v(" "),a("td",[t._v("block 为 true 的每个块，从 hash 中删除键值对。")])]),t._v(" "),a("tr",[a("td",[t._v("10")]),t._v(" "),a("td",[a("code",[t._v("hash.each { |key,value| block }")])]),t._v(" "),a("td",[t._v("遍历 hash，为每个 key 调用一次 block，传递 key-value 作为一个二元素数组。")])]),t._v(" "),a("tr",[a("td",[t._v("11")]),t._v(" "),a("td",[a("code",[t._v("hash.each_key { |key| block }")])]),t._v(" "),a("td",[t._v("遍历 hash，为每个 key 调用一次 block，传递 key 作为参数。")])]),t._v(" "),a("tr",[a("td",[t._v("12")]),t._v(" "),a("td",[a("code",[t._v("hash.each_key { |key_value_array| block }")])]),t._v(" "),a("td",[t._v("遍历 hash，为每个 key 调用一次 block，传递 key 和 value 作为参数。")])]),t._v(" "),a("tr",[a("td",[t._v("13")]),t._v(" "),a("td",[a("code",[t._v("hash.each_value { |value| block }")])]),t._v(" "),a("td",[t._v("遍历 hash，为每个 key 调用一次 block，传递 value 作为参数。")])]),t._v(" "),a("tr",[a("td",[t._v("14")]),t._v(" "),a("td",[a("code",[t._v("hash.empty?")])]),t._v(" "),a("td",[t._v("检查 hash 是否为空（不包含键值对），返回 true 或 false。")])]),t._v(" "),a("tr",[a("td",[t._v("15")]),t._v(" "),a("td",[a("code",[t._v("hash.fetch(key [, default] ) [or] hash.fetch(key) { | key | block }")])]),t._v(" "),a("td",[t._v("通过给定的 key 从 hash 返回值。如果未找到 key，且未提供其他参数，则抛出 IndexError 异常；如果给出了 default，则返回 default；如果指定了可选的 block，则返回 block 的结果。")])]),t._v(" "),a("tr",[a("td",[t._v("16")]),t._v(" "),a("td",[a("code",[t._v("hash.has_key?(key) [or] hash.include?(key) [or] hash.key?(key) [or] hash.member?(key)")])]),t._v(" "),a("td",[t._v("检查给定的 key 是否存在于哈希中，返回 true 或 false。")])]),t._v(" "),a("tr",[a("td",[t._v("17")]),t._v(" "),a("td",[a("code",[t._v("hash.has_value?(value)")])]),t._v(" "),a("td",[t._v("检查哈希是否包含给定的 value。")])]),t._v(" "),a("tr",[a("td",[t._v("18")]),t._v(" "),a("td",[a("code",[t._v("hash.index(value)")])]),t._v(" "),a("td",[t._v("为给定的 value 返回哈希中的 key，如果未找到匹配值则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("19")]),t._v(" "),a("td",[a("code",[t._v("hash.indexes(keys)")])]),t._v(" "),a("td",[t._v("返回一个新的数组，由给定的键的值组成。找不到的键将插入默认值。该方法已被废弃，请使用 select。")])]),t._v(" "),a("tr",[a("td",[t._v("20")]),t._v(" "),a("td",[a("code",[t._v("hash.indices(keys)")])]),t._v(" "),a("td",[t._v("返回一个新的数组，由给定的键的值组成。找不到的键将插入默认值。该方法已被废弃，请使用 select。")])]),t._v(" "),a("tr",[a("td",[t._v("21")]),t._v(" "),a("td",[a("code",[t._v("hash.inspect")])]),t._v(" "),a("td",[t._v("返回哈希的打印字符串版本。")])]),t._v(" "),a("tr",[a("td",[t._v("22")]),t._v(" "),a("td",[a("code",[t._v("hash.invert")])]),t._v(" "),a("td",[t._v("创建一个新的 hash，倒置 hash 中的 keys 和 values。也就是说，在新的哈希中，hash 中的键将变成值，值将变成键。")])]),t._v(" "),a("tr",[a("td",[t._v("23")]),t._v(" "),a("td",[a("code",[t._v("hash.keys")])]),t._v(" "),a("td",[t._v("创建一个新的数组，带有 hash 中的键。")])]),t._v(" "),a("tr",[a("td",[t._v("24")]),t._v(" "),a("td",[a("code",[t._v("hash.length")])]),t._v(" "),a("td",[t._v("以整数形式返回 hash 的大小或长度。")])]),t._v(" "),a("tr",[a("td",[t._v("25")]),t._v(" "),a("td",[a("code",[t._v("hash.merge(other_hash) [or] hash.merge(other_hash) { |key, oldval, newval| block }")])]),t._v(" "),a("td",[t._v("返回一个新的哈希，包含 hash 和 other_hash 的内容，重写 hash 中与 other_hash 带有重复键的键值对。")])]),t._v(" "),a("tr",[a("td",[t._v("26")]),t._v(" "),a("td",[a("code",[t._v("hash.merge!(other_hash) [or] hash.merge!(other_hash) { |key, oldval, newval| block }")])]),t._v(" "),a("td",[t._v("与 merge 相同，但实际上 hash 发生了变化。")])]),t._v(" "),a("tr",[a("td",[t._v("27")]),t._v(" "),a("td",[a("code",[t._v("hash.rehash")])]),t._v(" "),a("td",[t._v("基于每个 key 的当前值重新建立 hash。如果插入后值发生了改变，该方法会重新索引 hash。")])]),t._v(" "),a("tr",[a("td",[t._v("28")]),t._v(" "),a("td",[a("code",[t._v("hash.reject { |key, value| block }")])]),t._v(" "),a("td",[t._v("类似 delete_if, 但作用在一个拷贝的哈希上。相等于 hsh.dup.delete_if。")])]),t._v(" "),a("tr",[a("td",[t._v("29")]),t._v(" "),a("td",[a("code",[t._v("hash.reject! { |key, value| block }")])]),t._v(" "),a("td",[t._v("相等于 delete_if, 但是如果没有修改，返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("30")]),t._v(" "),a("td",[a("code",[t._v("hash.replace(other_hash)")])]),t._v(" "),a("td",[t._v("把 hash 的内容替换为 other_hash 的内容。")])]),t._v(" "),a("tr",[a("td",[t._v("31")]),t._v(" "),a("td",[a("code",[t._v("hash.select { |key, value| block }")])]),t._v(" "),a("td",[t._v("返回一个新的数组，由 block 返回 true 的 hash 中的键值对组成。")])]),t._v(" "),a("tr",[a("td",[t._v("32")]),t._v(" "),a("td",[a("code",[t._v("hash.shift")])]),t._v(" "),a("td",[t._v("从 hash 中移除一个键值对，并把该键值对作为二元素数组返回。")])]),t._v(" "),a("tr",[a("td",[t._v("33")]),t._v(" "),a("td",[a("code",[t._v("hash.size")])]),t._v(" "),a("td",[t._v("以整数形式返回 hash 的 size 或 length。")])]),t._v(" "),a("tr",[a("td",[t._v("34")]),t._v(" "),a("td",[a("code",[t._v("hash.sort")])]),t._v(" "),a("td",[t._v("把 hash 转换为一个包含键值对数组的二维数组，然后进行排序。")])]),t._v(" "),a("tr",[a("td",[t._v("35")]),t._v(" "),a("td",[a("code",[t._v("hash.store(key, value)")])]),t._v(" "),a("td",[t._v("存储 hash 中的一个键值对。")])]),t._v(" "),a("tr",[a("td",[t._v("36")]),t._v(" "),a("td",[a("code",[t._v("hash.to_a")])]),t._v(" "),a("td",[t._v("从 hash 中创建一个二维数组。每个键值对转换为一个数组，所有这些数组都存储在一个数组中。")])]),t._v(" "),a("tr",[a("td",[t._v("37")]),t._v(" "),a("td",[a("code",[t._v("hash.to_hash")])]),t._v(" "),a("td",[t._v("返回 hash（self）。")])]),t._v(" "),a("tr",[a("td",[t._v("38")]),t._v(" "),a("td",[a("code",[t._v("hash.to_s")])]),t._v(" "),a("td",[t._v("把 hash 转换为一个数组，然后把该数组转换为一个字符串。")])]),t._v(" "),a("tr",[a("td",[t._v("39")]),t._v(" "),a("td",[a("code",[t._v("hash.update(other_hash) [or] hash.update(other_hash) {|key, oldval, newval| block}")])]),t._v(" "),a("td",[t._v("返回一个新的哈希，包含 hash 和 other_hash 的内容，重写 hash 中与 other_hash 带有重复键的键值对。")])]),t._v(" "),a("tr",[a("td",[t._v("40")]),t._v(" "),a("td",[a("code",[t._v("hash.value?(value)")])]),t._v(" "),a("td",[t._v("检查 hash 是否包含给定的 value。")])]),t._v(" "),a("tr",[a("td",[t._v("41")]),t._v(" "),a("td",[a("code",[t._v("hash.values")])]),t._v(" "),a("td",[t._v("返回一个新的数组，包含 hash 的所有值。")])]),t._v(" "),a("tr",[a("td",[t._v("42")]),t._v(" "),a("td",[a("code",[t._v("hash.values_at(obj, ...)")])]),t._v(" "),a("td",[t._v("返回一个新的数组，包含 hash 中与给定的键相关的值。")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-迭代器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-迭代器"}},[this._v("#")]),this._v(" Ruby 迭代器")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("collection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("each")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("variable"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n   code\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\ncutcome "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"block1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"book2"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"book3"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ncutcome"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("each")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("pair"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pair"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nprint "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sum = "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_s\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("collection = collection.collect\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("collect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nputs b\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#返回如下结果：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-模块"}},[this._v("#")]),this._v(" Ruby 模块")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("模块提供了一个命名空间和避免名字冲突。")])]),this._v(" "),s("li",[s("p",[this._v("模块实现了 mixin 装置。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("模块不能实例化")]),this._v(" "),s("li",[this._v("模块没有子类")]),this._v(" "),s("li",[this._v("模块只能被另一个模块定义")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MoudleName")]),t._v("\n   statement1\n   statement2\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义在 trig.rb 文件中的模块")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Trig")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PI")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.141592654")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Trig")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sin")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ..")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Trig")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cos")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ..")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义在 moral.rb 文件中的模块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 就像类方法，当您在模块中定义一个方法时，您可以指定在模块名称后跟着一个点号，点号后跟着方法名")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Moral")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VERY_BAD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BAD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Moral")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sin")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("badness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ...")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Ruby 不直接支持多重继承，但是 Ruby 的模块（Module）有另一个神奇的功能。它几乎消除了多重继承的需要，提供了一种名为 "),s("code",[this._v("mixin")]),this._v(" 的装置。将模块 include 到类定义中，模块中的方法就 mix 进了类中。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("a1")])]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("a2")])]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("b1")])]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("b2")])]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sample")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("s1")])]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\nsamp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Sample")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\nsamp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a1\nsamp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a2\nsamp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b1\nsamp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b2\nsamp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("s1\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#可以看到类 Sample 继承了两个模块，您可以说类 Sample 使用了多重继承或 mixin")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-块"}},[this._v("#")]),this._v(" Ruby 块")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("块由大量的代码组成。")]),t._v(" "),a("li",[t._v("您需要给块取个名称。")]),t._v(" "),a("li",[t._v("块中的代码总是包含在大括号 {} 内。")]),t._v(" "),a("li",[t._v("块总是从与其具有相同名称的函数调用。这意味着如果您的块名称为 test，那么您要使用函数 test 来调用这个块。")]),t._v(" "),a("li",[t._v("您可以使用 "),a("code",[t._v("yield")]),t._v(" 语句来调用块。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("block_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   statement1\n   statement2\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\ntest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("block"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   block"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("call\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\ntest "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BEGIN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# BEGIN 代码块")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BEGIN 代码块"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("END")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# END 代码块")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"END 代码块"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# MAIN 代码块")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MAIN 代码块"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出以下结果:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# BEGIN 代码块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# MAIN 代码块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# END 代码块")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-类和对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-类和对象"}},[this._v("#")]),this._v(" Ruby 类和对象")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("数据封装")]),this._v(" "),s("li",[this._v("数据抽象")]),this._v(" "),s("li",[this._v("多态性")]),this._v(" "),s("li",[this._v("继承")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 Ruby 中，类总是以关键字 "),s("code",[this._v("class")]),this._v(" 开始，后跟类的名称。类名的首字母应该大写。类 User 如下所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[this._v("class")]),this._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[this._v("User")]),this._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[this._v("end")]),this._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 Ruby 中，您可以使用类的方法 "),a("code",[t._v("new")]),t._v(" 创建对象。该方法属于类方法，在 Ruby 库中预定义。您可以给方法 "),a("code",[t._v("new")]),t._v(" 传递参数，这些参数可用于初始化类变量。当您想要声明带参数的 "),a("code",[t._v("new")]),t._v(" 方法时，您需要在创建类的同时声明方法 "),a("code",[t._v("initialize")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("initialize")]),this._v(" 方法是一种特殊类型的方法，将在调用带参数的类的 new 方法时执行。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("下面的实例创建了 "),s("code",[this._v("initialize")]),this._v(" 方法：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@@no_of_users")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("initialize")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@user_id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("id\n      "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@user_name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("name\n      "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@user_addr")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("addr\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在本实例中，您可以声明带有 id、name、addr 作为局部变量的 "),a("code",[t._v("initialize")]),t._v("方法。在这里，"),a("code",[t._v("def")]),t._v("和 "),a("code",[t._v("end")]),t._v(" 用于定义 Ruby 方法 "),a("code",[t._v("initialize")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("initialize")]),this._v(" 方法中，把这些局部变量的值传给实例变量 @cust_id、@cust_name 和 @cust_addr。在这里，局部变量的值是随着 new 方法进行传递的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("user1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"张三"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"陕西西安"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nuser2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"李四"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"浙江杭州"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-方法"}},[this._v("#")]),this._v(" Ruby 方法")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_name")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arg "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" default"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" arg "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("expr "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   expr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")])]),t._v("\n   i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n   j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n   k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding: UTF-8 -*-")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sample")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"参数个数为 '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n      puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"参数值为 '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\nsample "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Allen"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"55"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"M"')]),t._v("\nsample "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Master"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"35"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"K"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"User"')]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 方法 return_date 是通过在类名后跟着一个点号，点号后跟着方法名来声明的。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_name")])]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("return_date")])]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-异常"}},[this._v("#")]),this._v(" Ruby 异常")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("1、rescue\nRuby 提供了一个完美的处理异常的机制。我们可以在 begin/end 块中附上可能抛出异常的代码，并使用 "),s("code",[this._v("rescue")]),this._v(" 子句告诉 Ruby 完美要处理的异常类型。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#开始")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#抛出异常")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ExceptionType")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("StandardException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#捕获指定类型的异常默认值是 StandardException")]),t._v("\n $"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#表示异常信息")]),t._v("\n $@ "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#表示异常出现的代码位置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#其余异常")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ensure")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#不管有没有异常，进入该代码块")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#结束")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("从 "),s("code",[this._v("begin")]),this._v(" 到 "),s("code",[this._v("rescue")]),this._v(" 中的一切是受保护的。如果代码块执行期间发生了异常，控制会传到 rescue 和 end 之间的块。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("对于 "),s("code",[this._v("begin")]),this._v(" 块中的每个 "),s("code",[this._v("rescue")]),this._v(" 子句，Ruby 把抛出的异常与每个参数进行轮流比较。如果 "),s("code",[this._v("rescue")]),this._v(" 子句中命名的异常与当前抛出的异常类型相同，或者是该异常的父类，则匹配成功。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果异常不匹配所有指定的错误类型，我们可以在所有的 "),s("code",[this._v("rescue")]),this._v(" 子句后使用一个 "),s("code",[this._v("else")]),this._v(" 子句。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n   file "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" open"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/unexistant_file"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" file\n      puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"File opened successfully"')]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v("\n      file "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("STDIN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\nprint file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"=="')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("STDIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("您可以使用 "),s("code",[this._v("rescue")]),this._v(" 块捕获异常，然后使用 "),s("code",[this._v("retry")]),this._v(" 语句从开头开始执行 "),s("code",[this._v("begin")]),this._v(" 块。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果 "),s("code",[this._v("retry")]),this._v(" 出现在 "),s("code",[this._v("begin")]),this._v(" 表达式的 "),s("code",[this._v("rescue")]),this._v(" 子句中，则从 begin 主体的开头重新开始。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n   do_something   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 抛出的异常")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 处理错误")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("retry")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新从 begin 开始")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n   file "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" open"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/unexistant_file"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" file\n      puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"File opened successfully"')]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v("\n   fname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"existant_file"')]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("retry")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("=begin\n以下是处理流程：\n\n打开时发生异常。\n跳到 rescue。fname 被重新赋值。\n通过 retry 跳到 begin 的开头。\n这次文件成功打开。\n继续基本的过程。\n=end")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果 "),s("code",[this._v("retry")]),this._v(" 出现在迭代内、块内或者 "),s("code",[this._v("for")]),this._v(" 表达式的主体内，则重新开始迭代调用。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".5")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("retry")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" some_condition "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新从 i == 1 开始")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("注")]),this._v("：如果被重新命名的文件不存在，本实例代码会无限尝试。所以异常处理时，谨慎使用 retry。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("您可以使用 "),s("code",[this._v("raise")]),this._v(" 语句抛出异常。下面的方法在调用时抛出异常。它的第二个消息将被输出。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一种形式简单地重新抛出当前异常（如果没有当前异常则抛出一个 RuntimeError）。这用在传入异常之前需要解释异常的异常处理程序中。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第二种形式创建一个新的 RuntimeError 异常，设置它的消息为给定的字符串。该异常之后抛出到调用堆栈。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Error Message"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第三种形式使用第一个参数创建一个异常，然后设置相关的消息为第二个参数。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ExceptionType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Error Message"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第四种形式与第三种形式类似，您可以添加任何额外的条件语句（比如 unless）来抛出异常。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ExceptionType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Error Message"')]),t._v(" condition\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I am before the raise.'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'An error has occurred.'")]),t._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I am after the raise.'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I am rescued.'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I am after the begin block.'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("=begin 输出结果\nI am before the raise.\nI am rescued.\nI am after the begin block.\n=end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A test exception.'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" e\n  puts e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message\n  puts e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("backtrace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inspect\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('=begin 输出结果\nA test exception.\n["main.rb:4"]\n=end')]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("ensure")]),t._v(" 子句做的就是这个。"),a("code",[t._v("ensure")]),t._v(" 放在最后一个 "),a("code",[t._v("rescue")]),t._v(" 子句后，并包含一个块终止时总是执行的代码块。它与块是否正常退出、是否抛出并处理异常、是否因一个未捕获的异常而终止，这些都没关系，"),a("code",[t._v("ensure")]),t._v(" 块始终都会运行。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#.. 过程")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#.. 抛出异常")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#.. 处理错误")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ensure")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#.. 最后确保执行")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#.. 这总是会执行")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A test exception.'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" e\n  puts e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message\n  puts e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("backtrace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inspect\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ensure")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ensuring execution"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('=begin 输出结果\nA test exception.\n["main.rb:4"]\nEnsuring execution\n=end')]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#.. 过程")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#.. 抛出异常")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#.. 处理错误")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#.. 如果没有异常则执行")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ensure")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#.. 最后确保执行")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#.. 这总是会执行")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 抛出 'A test exception.'")]),t._v("\n puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I\'m not raising exception"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" e\n  puts e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message\n  puts e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("backtrace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inspect\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n   puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Congratulations-- no errors!"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ensure")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ensuring execution"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("=begin\n以上实例运行输出结果为：\n\nI'm not raising exception\nCongratulations-- no errors!\nEnsuring execution\n=end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":lablename")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#.. 这不会被执行")]),t._v("\ncatch "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":lablename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#.. 在遇到一个 throw 后匹配将被执行的 catch")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n或\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":lablename")]),t._v(" condition\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#.. 这不会被执行")]),t._v("\ncatch "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":lablename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#.. 在遇到一个 throw 后匹配将被执行的 catch")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("promptAndGet")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prompt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   print prompt\n   res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" readline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("chomp\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":quitRequested")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"!"')]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\ncatch "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":quitRequested")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n   name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" promptAndGet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Name: "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" promptAndGet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Age: "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   sex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" promptAndGet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sex: "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ..")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 处理信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\npromptAndGet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Name:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("=begin\n上面的程序需要人工交互，您可以在您的计算机上进行尝试。以上实例运行输出结果为：\n\nName: Ruby on Rails\nAge: 3\nSex: !\nName:Just Ruby\n=end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("异常类型")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Interrupt")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("NoMemoryError")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("SignalException")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("ScriptError")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("StandardError")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("SystemExit")]),t._v(" "),a("td")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileSaveError")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("StandardError")]),t._v("\n   attr_reader "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":reason")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("initialize")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reason"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@reason")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reason\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("open"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"w"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 写出数据 ...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 发生错误")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FileSaveError")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-正则表达式"}},[this._v("#")]),this._v(" Ruby 正则表达式")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/pattern/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("pattern"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("im    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 可以指定选项")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("%r!/usr/local!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用分隔符的正则表达式")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("修饰符")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("i")]),t._v(" "),a("td",[t._v("当匹配文本时忽略大小写。")])]),t._v(" "),a("tr",[a("td",[t._v("o")]),t._v(" "),a("td",[t._v("只执行一次 #{} 插值，正则表达式在第一次时就进行判断。")])]),t._v(" "),a("tr",[a("td",[t._v("x")]),t._v(" "),a("td",[t._v("忽略空格，允许在整个表达式中放入空白符和注释。")])]),t._v(" "),a("tr",[a("td",[t._v("m")]),t._v(" "),a("td",[t._v("匹配多行，把换行字符识别为正常字符。")])]),t._v(" "),a("tr",[a("td",[t._v("u,e,s,n")]),t._v(" "),a("td",[t._v("把正则表达式解释为 Unicode（UTF-8）、EUC、SJIS 或 ASCII。如果没有指定修饰符，则认为正则表达式使用的是源编码。")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 下面匹配单个斜杠字符，不转义")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("%r|/|")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Flag 字符可通过下面的语法进行匹配")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("%r[</(.*)>]i")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("除了控制字符，(+ ? . * ^ $ ( ) [ ] { } | "),s("code",[this._v("\\")]),this._v(")，其他所有字符都匹配本身。您可以通过在控制字符前放置一个反斜杠来对控制字符进行转义。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("模式")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("^")]),t._v(" "),a("td",[t._v("匹配行的开头。")])]),t._v(" "),a("tr",[a("td",[t._v("$")]),t._v(" "),a("td",[t._v("匹配行的结尾。")])]),t._v(" "),a("tr",[a("td",[t._v(".")]),t._v(" "),a("td",[t._v("匹配除了换行符以外的任意单字符。使用 m 选项时，它也可以匹配换行符。")])]),t._v(" "),a("tr",[a("td",[t._v("[...]")]),t._v(" "),a("td",[t._v("匹配在方括号中的任意单字符。")])]),t._v(" "),a("tr",[a("td",[t._v("[^...]")]),t._v(" "),a("td",[t._v("匹配不在方括号中的任意单字符。")])]),t._v(" "),a("tr",[a("td",[t._v("re*")]),t._v(" "),a("td",[t._v("匹配前面的子表达式零次或多次。")])]),t._v(" "),a("tr",[a("td",[t._v("re+")]),t._v(" "),a("td",[t._v("匹配前面的子表达式一次或多次。")])]),t._v(" "),a("tr",[a("td",[t._v("re?")]),t._v(" "),a("td",[t._v("匹配前面的子表达式零次或一次。")])]),t._v(" "),a("tr",[a("td",[t._v("re{ n}")]),t._v(" "),a("td",[t._v("匹配前面的子表达式 n 次。")])]),t._v(" "),a("tr",[a("td",[t._v("re{ n,}")]),t._v(" "),a("td",[t._v("匹配前面的子表达式 n 次或 n 次以上。")])]),t._v(" "),a("tr",[a("td",[t._v("re{ n, m}")]),t._v(" "),a("td",[t._v("匹配前面的子表达式至少 n 次至多 m 次。")])]),t._v(" "),a("tr",[a("td",[t._v("a"),a("code",[t._v("|")]),t._v(" b")]),t._v(" "),a("td",[t._v("匹配 a 或 b。")])]),t._v(" "),a("tr",[a("td",[t._v("(re)")]),t._v(" "),a("td",[t._v("对正则表达式进行分组，并记住匹配文本。")])]),t._v(" "),a("tr",[a("td",[t._v("(?imx)")]),t._v(" "),a("td",[t._v("暂时打开正则表达式内的 i、 m 或 x 选项。如果在圆括号中，则只影响圆括号内的部分。")])]),t._v(" "),a("tr",[a("td",[t._v("(?-imx)")]),t._v(" "),a("td",[t._v("暂时关闭正则表达式内的 i、 m 或 x 选项。如果在圆括号中，则只影响圆括号内的部分。")])]),t._v(" "),a("tr",[a("td",[t._v("(?: re)")]),t._v(" "),a("td",[t._v("对正则表达式进行分组，但不记住匹配文本。")])]),t._v(" "),a("tr",[a("td",[t._v("(?imx: re)")]),t._v(" "),a("td",[t._v("暂时打开圆括号内的 i、 m 或 x 选项。")])]),t._v(" "),a("tr",[a("td",[t._v("(?-imx: re)")]),t._v(" "),a("td",[t._v("暂时关闭圆括号内的 i、 m 或 x 选项。")])]),t._v(" "),a("tr",[a("td",[t._v("(?#...)")]),t._v(" "),a("td",[t._v("注释。")])]),t._v(" "),a("tr",[a("td",[t._v("(?= re)")]),t._v(" "),a("td",[t._v("使用模式指定位置。没有范围。")])]),t._v(" "),a("tr",[a("td",[t._v("(?! re)")]),t._v(" "),a("td",[t._v("使用模式的否定指定位置。没有范围。")])]),t._v(" "),a("tr",[a("td",[t._v("(?> re)")]),t._v(" "),a("td",[t._v("匹配无回溯的独立模式。")])]),t._v(" "),a("tr",[a("td",[t._v("\\w")]),t._v(" "),a("td",[t._v("匹配单词字符。")])]),t._v(" "),a("tr",[a("td",[t._v("\\W")]),t._v(" "),a("td",[t._v("匹配非单词字符。")])]),t._v(" "),a("tr",[a("td",[t._v("\\s")]),t._v(" "),a("td",[t._v("匹配空白字符。等价于 [\\t\\n\\r\\f]。")])]),t._v(" "),a("tr",[a("td",[t._v("\\S")]),t._v(" "),a("td",[t._v("匹配非空白字符。")])]),t._v(" "),a("tr",[a("td",[t._v("\\d")]),t._v(" "),a("td",[t._v("匹配数字。等价于 [0-9]。")])]),t._v(" "),a("tr",[a("td",[t._v("\\D")]),t._v(" "),a("td",[t._v("匹配非数字。")])]),t._v(" "),a("tr",[a("td",[t._v("\\A")]),t._v(" "),a("td",[t._v("匹配字符串的开头。")])]),t._v(" "),a("tr",[a("td",[t._v("\\Z")]),t._v(" "),a("td",[t._v("匹配字符串的结尾。如果存在换行符，则只匹配到换行符之前。")])]),t._v(" "),a("tr",[a("td",[t._v("\\z")]),t._v(" "),a("td",[t._v("匹配字符串的结尾。")])]),t._v(" "),a("tr",[a("td",[t._v("\\G")]),t._v(" "),a("td",[t._v("匹配最后一个匹配完成的点。")])]),t._v(" "),a("tr",[a("td",[t._v("\\b")]),t._v(" "),a("td",[t._v("当在括号外时匹配单词边界，当在括号内时匹配退格键（0x08）。")])]),t._v(" "),a("tr",[a("td",[t._v("\\B")]),t._v(" "),a("td",[t._v("匹配非单词边界。")])]),t._v(" "),a("tr",[a("td",[t._v("\\n, \\t, etc.")]),t._v(" "),a("td",[t._v("匹配换行符、回车符、制表符，等等。")])]),t._v(" "),a("tr",[a("td",[t._v("\\1...\\9")]),t._v(" "),a("td",[t._v("匹配第 n 个分组子表达式。")])]),t._v(" "),a("tr",[a("td",[t._v("\\10")]),t._v(" "),a("td",[t._v("如果已匹配过，则匹配第 n 个分组子表达式。否则指向字符编码的八进制表示。")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("字符")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("实例")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("/ruby/")]),t._v(" "),a("td",[t._v('匹配 "ruby"')])]),t._v(" "),a("tr",[a("td",[t._v("¥")]),t._v(" "),a("td",[t._v("匹配 Yen 符号。Ruby 1.9 和 Ruby 1.8 支持多个字符。")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("字符类")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("实例")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("/[Rr]uby/")]),t._v(" "),a("td",[t._v('匹配 "Ruby" 或 "ruby"')])]),t._v(" "),a("tr",[a("td",[t._v("/rub[ye]/")]),t._v(" "),a("td",[t._v('匹配 "ruby" 或 "rube"')])]),t._v(" "),a("tr",[a("td",[t._v("/[aeiou]/")]),t._v(" "),a("td",[t._v("匹配任何一个小写元音字母")])]),t._v(" "),a("tr",[a("td",[t._v("/[0-9]/")]),t._v(" "),a("td",[t._v("匹配任何一个数字，与 /[0123456789]/ 相同")])]),t._v(" "),a("tr",[a("td",[t._v("/[a-z]/")]),t._v(" "),a("td",[t._v("匹配任何一个小写 ASCII 字母")])]),t._v(" "),a("tr",[a("td",[t._v("/[A-Z]/")]),t._v(" "),a("td",[t._v("匹配任何一个大写 ASCII 字母")])]),t._v(" "),a("tr",[a("td",[t._v("/[a-zA-Z0-9]/")]),t._v(" "),a("td",[t._v("匹配任何一个括号内的字符")])]),t._v(" "),a("tr",[a("td",[t._v("/[^aeiou]/")]),t._v(" "),a("td",[t._v("匹配任何一个非小写元音字母的字符")])]),t._v(" "),a("tr",[a("td",[t._v("/[^0-9]/")]),t._v(" "),a("td",[t._v("匹配任何一个非数字字符")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("特殊字符类")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("实例")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("/./")]),t._v(" "),a("td",[t._v("匹配除了换行符以外的其他任意字符")])]),t._v(" "),a("tr",[a("td",[t._v("/./m")]),t._v(" "),a("td",[t._v("在多行模式下，也能匹配换行符")])]),t._v(" "),a("tr",[a("td",[t._v("/\\d/")]),t._v(" "),a("td",[t._v("匹配一个数字，等同于 /[0-9]/")])]),t._v(" "),a("tr",[a("td",[t._v("/\\D/")]),t._v(" "),a("td",[t._v("匹配一个非数字，等同于 /[^0-9]/")])]),t._v(" "),a("tr",[a("td",[t._v("/\\s/")]),t._v(" "),a("td",[t._v("匹配一个空白字符，等同于 /[ \\t\\r\\n\\f]/")])]),t._v(" "),a("tr",[a("td",[t._v("/\\S/")]),t._v(" "),a("td",[t._v("匹配一个非空白字符，等同于 /[^ \\t\\r\\n\\f]/")])]),t._v(" "),a("tr",[a("td",[t._v("/\\w/")]),t._v(" "),a("td",[t._v("匹配一个单词字符，等同于 /[A-Za-z0-9_]/")])]),t._v(" "),a("tr",[a("td",[t._v("/\\W/")]),t._v(" "),a("td",[t._v("匹配一个非单词字符，等同于 /[^a-za-z0-9_]/")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("重复")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("实例")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("/ruby?/")]),t._v(" "),a("td",[t._v('匹配 "rub" 或 "ruby"。其中，y 是可有可无的。')])]),t._v(" "),a("tr",[a("td",[t._v("/ruby*/")]),t._v(" "),a("td",[t._v('匹配 "rub" 加上 0 个或多个的 y。')])]),t._v(" "),a("tr",[a("td",[t._v("/ruby+/")]),t._v(" "),a("td",[t._v('匹配 "rub" 加上 1 个或多个的 y。')])]),t._v(" "),a("tr",[a("td",[t._v("/\\d{3}/")]),t._v(" "),a("td",[t._v("刚好匹配 3 个数字。")])]),t._v(" "),a("tr",[a("td",[t._v("/\\d{3,}/")]),t._v(" "),a("td",[t._v("匹配 3 个或多个数字。")])]),t._v(" "),a("tr",[a("td",[t._v("/\\d{3,5}/")]),t._v(" "),a("td",[t._v("匹配 3 个、4 个或 5 个数字。")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("非贪婪重复")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("实例")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("/<.*>/")]),t._v(" "),a("td",[t._v('贪婪重复：匹配 "'),a("ruby",[t._v('perl>"')])])]),t._v(" "),a("tr",[a("td",[t._v("/<.*?>/")]),t._v(" "),a("td",[t._v('非贪婪重复：匹配 "'),a("ruby",[t._v('perl>" 中的 "'),a("ruby",[t._v('"')])])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("通过圆括号进行分组")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("实例")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("/\\D\\d+/")]),t._v(" "),a("td",[t._v("无分组： + 重复 \\d")])]),t._v(" "),a("tr",[a("td",[t._v("/(\\D\\d)+/")]),t._v(" "),a("td",[t._v("分组： + 重复 \\D\\d 对")])]),t._v(" "),a("tr",[a("td",[t._v("/([Rr]uby(, )?)+/")]),t._v(" "),a("td",[t._v('匹配 "Ruby"、"Ruby, ruby, ruby"，等等')])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("反向引用")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("实例")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("/([Rr])uby&\\1ails/")])]),t._v(" "),a("td",[t._v("匹配 ruby&rails 或 Ruby&Rails")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("/(['\"])(?:(?!\\1).)\\*\\1/")])]),t._v(" "),a("td",[t._v("单引号或双引号字符串。\\1 匹配第一个分组所匹配的字符，\\2 匹配第二个分组所匹配的字符，依此类推。")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("替换")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("实例")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("/ruby|rube/")])]),t._v(" "),a("td",[t._v('匹配 "ruby" 或 "rube"')])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("/rub(y|le)/")])]),t._v(" "),a("td",[t._v('匹配 "ruby" 或 "ruble"')])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("/ruby(!+|\\?)/")])]),t._v(" "),a("td",[t._v('"ruby" 后跟一个或多个 ! 或者跟一个 ?')])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("锚")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("实例")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("/^Ruby/")]),t._v(" "),a("td",[t._v('匹配以 "Ruby" 开头的字符串或行')])]),t._v(" "),a("tr",[a("td",[t._v("/Ruby$/")]),t._v(" "),a("td",[t._v('匹配以 "Ruby" 结尾的字符串或行')])]),t._v(" "),a("tr",[a("td",[t._v("/\\ARuby/")]),t._v(" "),a("td",[t._v('匹配以 "Ruby" 开头的字符串')])]),t._v(" "),a("tr",[a("td",[t._v("/Ruby\\Z/")]),t._v(" "),a("td",[t._v('匹配以 "Ruby" 结尾的字符串')])]),t._v(" "),a("tr",[a("td",[t._v("/\\bRuby\\b/")]),t._v(" "),a("td",[t._v('匹配单词边界的 "Ruby"')])]),t._v(" "),a("tr",[a("td",[t._v("/\\brub\\B/")]),t._v(" "),a("td",[t._v('\\B 是非单词边界：匹配 "rube" 和 "ruby" 中的 "rub"，但不匹配单独的 "rub"')])]),t._v(" "),a("tr",[a("td",[t._v("/Ruby(?=!)/")]),t._v(" "),a("td",[t._v('如果 "Ruby" 后跟着一个感叹号，则匹配 "Ruby"')])]),t._v(" "),a("tr",[a("td",[t._v("/Ruby(?!!)/")]),t._v(" "),a("td",[t._v('如果 "Ruby" 后没有跟着一个感叹号，则匹配 "Ruby"')])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("圆括号的特殊语法")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("实例")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("/R(?#comment)/")]),t._v(" "),a("td",[t._v('匹配 "R"。所有剩余的字符都是注释。')])]),t._v(" "),a("tr",[a("td",[t._v("/R(?i)uby/")]),t._v(" "),a("td",[t._v('当匹配 "uby" 时不区分大小写。')])]),t._v(" "),a("tr",[a("td",[t._v("/R(?i:uby)/")]),t._v(" "),a("td",[t._v("与上面相同。")])]),t._v(" "),a("tr",[a("td",[t._v("/rub(?:y"),a("code",[t._v("|")]),t._v("le))/")]),t._v(" "),a("td",[t._v("只分组，不进行 \\1 反向引用")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("sub")]),t._v(" 和 "),a("code",[t._v("gsub")]),t._v(" 及它们的替代变量 "),a("code",[t._v("sub!")]),t._v(" 和 "),a("code",[t._v("gsub!")]),t._v(" 是使用正则表达式时重要的字符串方法。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所有这些方法都是使用正则表达式模式执行搜索与替换操作。sub 和 sub! 替换模式的第一次出现，"),s("code",[this._v("gsub")]),this._v(" 和 "),s("code",[this._v("gsub!")]),this._v(" 替换模式的所有出现。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("sub 和 "),s("code",[this._v("gsub")]),this._v(" 返回一个新的字符串，保持原始的字符串不被修改，而 sub! 和 "),s("code",[this._v("gsub!")]),this._v(" 则会修改它们调用的字符串。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding: UTF-8 -*-")]),t._v("\n\nphone "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"138-3453-1111 #这是一个电话号码"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除 Ruby 的注释")]),t._v("\nphone "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" phone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sub"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/#.*$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"电话号码 : '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("phone"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 移除数字以外的其他字符")]),t._v("\nphone "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" phone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gsub"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\D/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"电话号码 : '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("phone"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("=begin\n以上实例运行输出结果为：\n\n电话号码 : 138-3453-1111\n电话号码 : 13834531111\n=end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding: UTF-8 -*-")]),t._v("\n\ntext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rails 是 rails,  Ruby on Rails 非常好的 Ruby 框架"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 把所有的 "rails" 改为 "Rails"')]),t._v("\ntext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gsub"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rails"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Rails"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 把所有的单词 "Rails" 都改成首字母大写')]),t._v("\ntext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gsub"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\brails\\b/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Rails"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("=begin\n以上实例运行输出结果为：\n\nRails 是 Rails,  Ruby on Rails 非常好的 Ruby 框架\n=end")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-日期-时间（date-time）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-日期-时间（date-time）"}},[this._v("#")]),this._v(" Ruby 日期 & 时间（Date & Time）")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby -w")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding: UTF-8 -*-")]),t._v("\n\ntime1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\n\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"当前时间 : "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" time1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inspect\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Time.now 功能相同")]),t._v("\ntime2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("now\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"当前时间 : "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" time2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inspect\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby -w")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding: UTF-8 -*-")]),t._v("\n\ntime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Time 的组件")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"当前时间 : "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inspect\nputs time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("year    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 日期的年份")]),t._v("\nputs time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("month   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 日期的月份（1 到 12）")]),t._v("\nputs time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("day     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 一个月中的第几天（1 到 31）")]),t._v("\nputs time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wday    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 一周中的星期几（0 是星期日）")]),t._v("\nputs time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("yday    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 365：一年中的第几天")]),t._v("\nputs time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hour    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 23：24 小时制")]),t._v("\nputs time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("min     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 59")]),t._v("\nputs time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sec     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 59")]),t._v("\nputs time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("usec    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 999999：微秒")]),t._v("\nputs time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zone    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "UTC"：时区名称')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("Time.utc、Time.gm 和 Time.local")]),this._v(" 这些函数可用于格式化标准格式的日期，如下所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# July 8, 2020")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("local"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# July 8, 2020, 09:10am，本地时间")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("local"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# July 8, 2020, 09:10 UTC")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# July 8, 2020, 09:10:11 GMT （与 UTC 相同）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("[sec,min,hour,day,month,year,wday,yday,isdst,zone]")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby -w")]),t._v("\n\ntime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\n\nvalues "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_a\np values "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# -> [39, 25, 15, 17, 9, 2020, 4, 260, false, "CST"]')]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -> 2020-09-17 15:26:09 UTC")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("time "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里是解释")]),t._v("\ntime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zone       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "UTC"：返回时区')]),t._v("\ntime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utc_offset "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 0：UTC 是相对于 UTC 的 0 秒偏移")]),t._v("\ntime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zone       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "PST"（或其他时区）')]),t._v("\ntime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isdst      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => false：如果 UTC 没有 DST（夏令时）")]),t._v("\ntime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => true：如果在 UTC 时区")]),t._v("\ntime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("localtime  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 转换为本地时区")]),t._v("\ntime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gmtime     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 转换回 UTC")]),t._v("\ntime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getlocal   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回本地区中的一个新的 Time 对象")]),t._v("\ntime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getutc     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回 UTC 中的一个新的 Time 对象")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby -w")]),t._v("\ntime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\n\nputs time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_s "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -> 2020-09-17 15:26:42 +0800")]),t._v("\nputs time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ctime "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -> Thu Sep 17 15:26:42 2020")]),t._v("\nputs time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("localtime "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -> 2020-09-17 15:26:42 +0800")]),t._v("\nputs time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("strftime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%Y-%m-%d %H:%M:%S"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -> 2020-09-17 15:26:42")]),t._v("\n\ntime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("now\nputs time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_i  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回从纪元以来的秒数")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("at"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把秒数转换为 Time 对象")]),t._v("\nputs time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_f "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回从纪元以来的秒数，包含微妙")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("指令")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("%a")]),t._v(" "),a("td",[t._v("星期几名称的缩写（比如 Sun）。")])]),t._v(" "),a("tr",[a("td",[t._v("%A")]),t._v(" "),a("td",[t._v("星期几名称的全称（比如 Sunday）。")])]),t._v(" "),a("tr",[a("td",[t._v("%b")]),t._v(" "),a("td",[t._v("月份名称的缩写（比如 Jan）。")])]),t._v(" "),a("tr",[a("td",[t._v("%B")]),t._v(" "),a("td",[t._v("月份名称的全称（比如 January）。")])]),t._v(" "),a("tr",[a("td",[t._v("%c")]),t._v(" "),a("td",[t._v("优选的本地日期和时间表示法。")])]),t._v(" "),a("tr",[a("td",[t._v("%d")]),t._v(" "),a("td",[t._v("一个月中的第几天（01 到 31）。")])]),t._v(" "),a("tr",[a("td",[t._v("%H")]),t._v(" "),a("td",[t._v("一天中的第几小时，24 小时制（00 到 23）。")])]),t._v(" "),a("tr",[a("td",[t._v("%I")]),t._v(" "),a("td",[t._v("一天中的第几小时，12 小时制（01 到 12）。")])]),t._v(" "),a("tr",[a("td",[t._v("%j")]),t._v(" "),a("td",[t._v("一年中的第几天（001 到 366）。")])]),t._v(" "),a("tr",[a("td",[t._v("%m")]),t._v(" "),a("td",[t._v("一年中的第几月（01 到 12）。")])]),t._v(" "),a("tr",[a("td",[t._v("%M")]),t._v(" "),a("td",[t._v("小时中的第几分钟（00 到 59）。")])]),t._v(" "),a("tr",[a("td",[t._v("%p")]),t._v(" "),a("td",[t._v("子午线指示（AM 或 PM）。")])]),t._v(" "),a("tr",[a("td",[t._v("%S")]),t._v(" "),a("td",[t._v("分钟中的第几秒（00 或 60）。")])]),t._v(" "),a("tr",[a("td",[t._v("%U")]),t._v(" "),a("td",[t._v("当前年中的周数，从第一个星期日（作为第一周的第一天）开始（00 到 53）。")])]),t._v(" "),a("tr",[a("td",[t._v("%W")]),t._v(" "),a("td",[t._v("当前年中的周数，从第一个星期一（作为第一周的第一天）开始（00 到 53）。")])]),t._v(" "),a("tr",[a("td",[t._v("%w")]),t._v(" "),a("td",[t._v("一星期中的第几天（Sunday 是 0，0 到 6）。")])]),t._v(" "),a("tr",[a("td",[t._v("%x")]),t._v(" "),a("td",[t._v("只有日期没有时间的优先表示法。")])]),t._v(" "),a("tr",[a("td",[t._v("%X")]),t._v(" "),a("td",[t._v("只有时间没有日期的优先表示法。")])]),t._v(" "),a("tr",[a("td",[t._v("%y")]),t._v(" "),a("td",[t._v("不带世纪的年份表示（00 到 99）。")])]),t._v(" "),a("tr",[a("td",[t._v("%Y")]),t._v(" "),a("td",[t._v("带有世纪的年份。")])]),t._v(" "),a("tr",[a("td",[t._v("%Z")]),t._v(" "),a("td",[t._v("时区名称。")])]),t._v(" "),a("tr",[a("td",[t._v("%%")]),t._v(" "),a("td",[t._v("% 字符。")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("now "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("now  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2020-09-17 15:27:08 +0800")]),t._v("\npast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" now "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2020-09-17 15:26:58 +0800")]),t._v("\nfuture "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" now "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2020-09-17 15:27:18 +0800")]),t._v("\ndiff "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" future "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" now "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 10.0")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-文件操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-文件操作"}},[this._v("#")]),this._v(" Ruby 文件操作")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("aFile "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"filename"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mode"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ... 处理文件")]),t._v("\naFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("open"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"filename"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mode"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("aFile"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ... process the file")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("File.open")]),this._v(" 和 "),s("code",[this._v("File.new")]),this._v(" 方法之间异同点：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("相同点：都是创建一个新的 "),a("code",[t._v("file")]),t._v(" 对象，并把该 "),a("code",[t._v("file")]),t._v(" 对象赋值给文件。")]),t._v(" "),a("li",[t._v("不同点：是 "),a("code",[t._v("File.open")]),t._v(" 方法可与块关联，而 "),a("code",[t._v("File.new")]),t._v(" 方法不能。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("下表列出了"),s("code",[this._v("File.open")]),this._v(" 和 "),s("code",[this._v("File.new")]),this._v(" 方法中可使用的模式：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("模式")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("r")]),t._v(" "),a("td",[t._v("只读模式。文件指针被放置在文件的开头。这是默认模式。")])]),t._v(" "),a("tr",[a("td",[t._v("r+")]),t._v(" "),a("td",[t._v("读写模式。文件指针被放置在文件的开头。")])]),t._v(" "),a("tr",[a("td",[t._v("w")]),t._v(" "),a("td",[t._v("只写模式。如果文件存在，则重写文件。如果文件不存在，则创建一个新文件用于写入。")])]),t._v(" "),a("tr",[a("td",[t._v("w+")]),t._v(" "),a("td",[t._v("读写模式。如果文件存在，则重写已存在的文件。如果文件不存在，则创建一个新文件用于读写。")])]),t._v(" "),a("tr",[a("td",[t._v("a")]),t._v(" "),a("td",[t._v("只写模式。如果文件存在，则文件指针被放置在文件的末尾。也就是说，文件是追加模式。如果文件不存在，则创建一个新文件用于写入。")])]),t._v(" "),a("tr",[a("td",[t._v("a+")]),t._v(" "),a("td",[t._v("读写模式。如果文件存在，则文件指针被放置在文件的末尾。也就是说，文件是追加模式。如果文件不存在，则创建一个新文件用于读写。")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("掩码")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0700")]),t._v(" "),a("td",[t._v("rwx 掩码，针对所有者")])]),t._v(" "),a("tr",[a("td",[t._v("0400")]),t._v(" "),a("td",[t._v("r ，针对所有者")])]),t._v(" "),a("tr",[a("td",[t._v("0200")]),t._v(" "),a("td",[t._v("w ，针对所有者")])]),t._v(" "),a("tr",[a("td",[t._v("0100")]),t._v(" "),a("td",[t._v("x ，针对所有者")])]),t._v(" "),a("tr",[a("td",[t._v("0070")]),t._v(" "),a("td",[t._v("rwx 掩码，针对所属组")])]),t._v(" "),a("tr",[a("td",[t._v("0040")]),t._v(" "),a("td",[t._v("r ，针对所属组")])]),t._v(" "),a("tr",[a("td",[t._v("0020")]),t._v(" "),a("td",[t._v("w ，针对所属组")])]),t._v(" "),a("tr",[a("td",[t._v("0010")]),t._v(" "),a("td",[t._v("x ，针对所属组")])]),t._v(" "),a("tr",[a("td",[t._v("0007")]),t._v(" "),a("td",[t._v("rwx 掩码，针对其他人")])]),t._v(" "),a("tr",[a("td",[t._v("0004")]),t._v(" "),a("td",[t._v("r ，针对其他人")])]),t._v(" "),a("tr",[a("td",[t._v("0002")]),t._v(" "),a("td",[t._v("w ，针对其他人")])]),t._v(" "),a("tr",[a("td",[t._v("0001")]),t._v(" "),a("td",[t._v("x ，针对其他人")])]),t._v(" "),a("tr",[a("td",[t._v("4000")]),t._v(" "),a("td",[t._v("执行时设置用户 ID")])]),t._v(" "),a("tr",[a("td",[t._v("2000")]),t._v(" "),a("td",[t._v("执行时设置所属组 ID")])]),t._v(" "),a("tr",[a("td",[t._v("1000")]),t._v(" "),a("td",[t._v("保存交换文本，甚至在使用后也会保存")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("sysread")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("syswrite")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("each_byte")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("IO.readlines")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("IO.foreach")]),t._v(" "),a("td")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n\n\naFile "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"r"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" aFile\n   content "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" aFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sysread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   puts content\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n   puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Unable to open file!"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\naFile "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"r+"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" aFile\n   aFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("syswrite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ABCDEF"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n   puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Unable to open file!"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\naFile "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"r+"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" aFile\n   aFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("syswrite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ABCDEF"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   aFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rewind\n   aFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("each_byte "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("ch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" putc ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" putc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n   puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Unable to open file!"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\narr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("IO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readlines"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nputs arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nputs arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("IO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foreach"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("block"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" puts block"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重命名文件 test1.txt 为 test2.txt")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test1.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test2.txt"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除文件 test2.txt")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delete"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text2.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfile "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"w"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("chmod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0755")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-目录操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-目录操作"}},[this._v("#")]),this._v(" Ruby 目录操作")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("创建目录")]),this._v(" "),s("li",[this._v("删除目录")]),this._v(" "),s("li",[this._v("浏览目录")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# **********创建目录**********")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 掩码 755 设置所有者（owner）、所属组（group）、每个人（world [anyone]）的权限为 rwxrxrx，其中 r = read 读取，w = write 写入，x = execute 执行。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Dir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mkdir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mynewdir"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Dir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mkdir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mynewdir"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("755")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# **********删除目录**********")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Dir.delete 可用于删除目录。Dir.unlink 和 Dir.rmdir 执行同样的功能")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Dir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delete"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"testdir"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# **********浏览目录**********")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 改变当前目录为 /usr/bin")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Dir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("chdir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/usr/bin"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看当前目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Dir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pwd\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取指定目录内的文件和目录列表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Dir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("entries"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/usr/bin"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("join"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Dir.entries 返回一个数组，包含指定目录内的所有项。Dir.foreach 提供了相同的功能")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Dir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foreach"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/usr/bin"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("entry"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n   puts entry\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tmpdir'")]),t._v("\ntempfilename "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("join"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Dir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tmpdir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tingtong"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntempfile "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tempfilename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"w"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntempfile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is a temporary file"')]),t._v("\ntempfile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delete"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tempfilename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tempfile'")]),t._v("\nf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Tempfile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tingtong'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\nputs f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("path\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-file-类和方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-file-类和方法"}},[this._v("#")]),this._v(" Ruby File 类和方法")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("序号")]),t._v(" "),a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[a("code",[t._v("File::atime( path)")])]),t._v(" "),a("td",[t._v("返回 path 的最后访问时间。")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[a("code",[t._v("File::basename( path[, suffix])")])]),t._v(" "),a("td",[t._v('返回 path 末尾的文件名。如果指定了 suffix，则它会从文件名末尾被删除。例如：File.basename("/home/users/bin/ruby.exe") #=> "ruby.exe"')])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[a("code",[t._v("File::blockdev?( path)")])]),t._v(" "),a("td",[t._v("如果 path 是一个块设备，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[a("code",[t._v("File::chardev?( path)")])]),t._v(" "),a("td",[t._v("如果 path 是一个字符设备，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[a("code",[t._v("File::chmod( mode, path...)")])]),t._v(" "),a("td",[t._v("改变指定文件的权限模式。")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[a("code",[t._v("File::chown( owner, group, path...)")])]),t._v(" "),a("td",[t._v("改变指定文件的所有者和所属组。")])]),t._v(" "),a("tr",[a("td",[t._v("7")]),t._v(" "),a("td",[a("code",[t._v("File::ctime( path)")])]),t._v(" "),a("td",[t._v("返回 path 的最后一个 inode 更改时间。")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[a("code",[t._v("File::delete( path...) File::unlink( path...)")])]),t._v(" "),a("td",[t._v("删除指定的文件。")])]),t._v(" "),a("tr",[a("td",[t._v("9")]),t._v(" "),a("td",[a("code",[t._v("File::directory?( path)")])]),t._v(" "),a("td",[t._v("如果 path 是一个目录，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("10")]),t._v(" "),a("td",[a("code",[t._v("File::dirname( path)")])]),t._v(" "),a("td",[t._v("返回 path 的目录部分，不包括最后的文件名。")])]),t._v(" "),a("tr",[a("td",[t._v("11")]),t._v(" "),a("td",[a("code",[t._v("File::executable?( path)")])]),t._v(" "),a("td",[t._v("如果 path 是可执行的，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("12")]),t._v(" "),a("td",[a("code",[t._v("File::executable_real?( path)")])]),t._v(" "),a("td",[t._v("如果 path 通过真正的用户权限是可执行的，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("13")]),t._v(" "),a("td",[a("code",[t._v("File::exist?( path)")])]),t._v(" "),a("td",[t._v("如果 path 存在，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[a("code",[t._v("File::expand_path( path[, dir])")])]),t._v(" "),a("td",[t._v("返回 path 的绝对路径，扩展 ~ 为进程所有者的主目录，~user 为用户的主目录。相对路径是相对于 dir 指定的目录，如果 dir 被省略则相对于当前工作目录。")])]),t._v(" "),a("tr",[a("td",[t._v("14")]),t._v(" "),a("td",[a("code",[t._v("File::file?( path)")])]),t._v(" "),a("td",[t._v("如果 path 是一个普通文件，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("15")]),t._v(" "),a("td",[a("code",[t._v("File::ftype( path)")])]),t._v(" "),a("td",[t._v("返回下列其中一个字符串,表示文件类型：file - 普通文件 directory - 目录 characterSpecial - 字符特殊文件 blockSpecial - 块特殊文件 fifo - 命名管道（FIFO） link - 符号链接 socket - Socket unknown - 未知的文件类型")])]),t._v(" "),a("tr",[a("td",[t._v("16")]),t._v(" "),a("td",[a("code",[t._v("File::grpowned?( path)")])]),t._v(" "),a("td",[t._v("如果 path 由用户的所属组所有，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("17")]),t._v(" "),a("td",[a("code",[t._v("File::join( item...)")])]),t._v(" "),a("td",[t._v('返回一个字符串，由指定的项连接在一起，并使用 File::Separator 进行分隔。例如：File::join("", "home", "usrs", "bin") # => "/home/usrs/bin"')])]),t._v(" "),a("tr",[a("td",[t._v("18")]),t._v(" "),a("td",[a("code",[t._v("File::link( old, new)")])]),t._v(" "),a("td",[t._v("创建一个到文件 old 的硬链接。")])]),t._v(" "),a("tr",[a("td",[t._v("19")]),t._v(" "),a("td",[a("code",[t._v("File::lstat( path)")])]),t._v(" "),a("td",[t._v("与 stat 相同，但是它返回自身符号链接上的信息，而不是所指向的文件。")])]),t._v(" "),a("tr",[a("td",[t._v("20")]),t._v(" "),a("td",[a("code",[t._v("File::mtime( path)")])]),t._v(" "),a("td",[t._v("返回 path 的最后一次修改时间。")])]),t._v(" "),a("tr",[a("td",[t._v("21")]),t._v(" "),a("td",[a("code",[t._v('File::new( path[, mode="r"]) File::open( path[, mode="r"]) File::open( path[, mode="r"]) {|f| ...}')])]),t._v(" "),a("td",[t._v("打开文件。如果指定了块，则通过传递新文件作为参数来执行块。当块退出时，文件会自动关闭。这些方法有别于 Kernel.open，即使 path 是以")])]),t._v(" "),a("tr",[a("td",[t._v("22")]),t._v(" "),a("td",[a("code",[t._v("File::owned?( path)")])]),t._v(" "),a("td",[t._v("如果 path 由有效的用户所有，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("23")]),t._v(" "),a("td",[a("code",[t._v("File::pipe?( path)")])]),t._v(" "),a("td",[t._v("如果 path 是一个管道，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("24")]),t._v(" "),a("td",[a("code",[t._v("File::readable?( path)")])]),t._v(" "),a("td",[t._v("如果 path 是可读的，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("25")]),t._v(" "),a("td",[a("code",[t._v("File::readable_real?( path)")])]),t._v(" "),a("td",[t._v("如果 path 通过真正的用户权限是可读的，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("25")]),t._v(" "),a("td",[a("code",[t._v("File::readlink( path)")])]),t._v(" "),a("td",[t._v("返回 path 所指向的文件。")])]),t._v(" "),a("tr",[a("td",[t._v("26")]),t._v(" "),a("td",[a("code",[t._v("File::rename( old, new)")])]),t._v(" "),a("td",[t._v("改变文件名 old 为 new。")])]),t._v(" "),a("tr",[a("td",[t._v("27")]),t._v(" "),a("td",[a("code",[t._v("File::setgid?( path)")])]),t._v(" "),a("td",[t._v("如果设置了 path 的 set-group-id 权限位，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("28")]),t._v(" "),a("td",[a("code",[t._v("File::setuid?( path)")])]),t._v(" "),a("td",[t._v("如果设置了 path 的 set-user-id 权限位，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("29")]),t._v(" "),a("td",[a("code",[t._v("File::size( path)")])]),t._v(" "),a("td",[t._v("返回 path 的文件大小。")])]),t._v(" "),a("tr",[a("td",[t._v("30")]),t._v(" "),a("td",[a("code",[t._v("File::size?( path)")])]),t._v(" "),a("td",[t._v("返回 path 的文件大小，如果为 0 则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("31")]),t._v(" "),a("td",[a("code",[t._v("File::socket?( path)")])]),t._v(" "),a("td",[t._v("如果 path 是一个 socket，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("32")]),t._v(" "),a("td",[a("code",[t._v("File::split( path)")])]),t._v(" "),a("td",[t._v("返回一个数组，包含 path 的内容，path 被分成 File::dirname(path) 和 File::basename(path)。")])]),t._v(" "),a("tr",[a("td",[t._v("33")]),t._v(" "),a("td",[a("code",[t._v("File::stat( path)")])]),t._v(" "),a("td",[t._v("返回 path 上带有信息的 File::Stat 对象。")])]),t._v(" "),a("tr",[a("td",[t._v("34")]),t._v(" "),a("td",[a("code",[t._v("File::sticky?( path)")])]),t._v(" "),a("td",[t._v("如果设置了 path 的 sticky 位，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("35")]),t._v(" "),a("td",[a("code",[t._v("File::symlink( old, new)")])]),t._v(" "),a("td",[t._v("创建一个指向文件 old 的符号链接。")])]),t._v(" "),a("tr",[a("td",[t._v("36")]),t._v(" "),a("td",[a("code",[t._v("File::symlink?( path)")])]),t._v(" "),a("td",[t._v("如果 path 是一个符号链接，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("37")]),t._v(" "),a("td",[a("code",[t._v("File::truncate( path, len)")])]),t._v(" "),a("td",[t._v("截断指定的文件为 len 字节。")])]),t._v(" "),a("tr",[a("td",[t._v("38")]),t._v(" "),a("td",[a("code",[t._v("File::unlink( path...)")])]),t._v(" "),a("td",[t._v("删除 path 给定的文件。")])]),t._v(" "),a("tr",[a("td",[t._v("39")]),t._v(" "),a("td",[a("code",[t._v("File::umask([ mask])")])]),t._v(" "),a("td",[t._v("如果未指定参数，则为该进程返回当前的 umask。如果指定了一个参数，则设置了 umask，并返回旧的 umask。")])]),t._v(" "),a("tr",[a("td",[t._v("40")]),t._v(" "),a("td",[a("code",[t._v("File::utime( atime, mtime, path...)")])]),t._v(" "),a("td",[t._v("改变指定文件的访问和修改时间。")])]),t._v(" "),a("tr",[a("td",[t._v("41")]),t._v(" "),a("td",[a("code",[t._v("File::writable?( path)")])]),t._v(" "),a("td",[t._v("如果 path 是可写的，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("42")]),t._v(" "),a("td",[a("code",[t._v("File::writable_real?( path)")])]),t._v(" "),a("td",[t._v("如果 path 通过真正的用户权限是可写的，则返回 true。")])]),t._v(" "),a("tr",[a("td",[t._v("43")]),t._v(" "),a("td",[a("code",[t._v("File::zero?( path)")])]),t._v(" "),a("td",[t._v("如果 path 的文件大小是 0，则返回 true。")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("序号")]),t._v(" "),a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[a("code",[t._v("f.atime")])]),t._v(" "),a("td",[t._v("返回 f 的最后访问时间。")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[a("code",[t._v("f.chmode( mode)")])]),t._v(" "),a("td",[t._v("改变 f 的权限模式。")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[a("code",[t._v("f.chown( owner, group)")])]),t._v(" "),a("td",[t._v("改变 f 的所有者和所属组。")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[a("code",[t._v("f.ctime")])]),t._v(" "),a("td",[t._v("返回 f 的最后一个 inode 更改时间。")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[a("code",[t._v("f.flock( op)")])]),t._v(" "),a("td",[t._v("调用 flock(2)。op 可以是 0 或一个逻辑值或 File 类常量 LOCK_EX、LOCK_NB、LOCK_SH 和 LOCK_UN。")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[a("code",[t._v("f.lstat")])]),t._v(" "),a("td",[t._v("与 stat 相同，但是它返回自身符号链接上的信息，而不是所指向的文件。")])]),t._v(" "),a("tr",[a("td",[t._v("7")]),t._v(" "),a("td",[a("code",[t._v("f.mtime")])]),t._v(" "),a("td",[t._v("返回 f 的最后修改时间。")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[a("code",[t._v("f.path")])]),t._v(" "),a("td",[t._v("返回用于创建 f 的路径名。")])]),t._v(" "),a("tr",[a("td",[t._v("9")]),t._v(" "),a("td",[a("code",[t._v('f.reopen( path[, mode="r"])')])]),t._v(" "),a("td",[t._v("重新打开文件。")])]),t._v(" "),a("tr",[a("td",[t._v("10")]),t._v(" "),a("td",[a("code",[t._v("f.truncate( len)")])]),t._v(" "),a("td",[t._v("截断 f 为 len 字节。")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-dir-类和方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-dir-类和方法"}},[this._v("#")]),this._v(" Ruby Dir 类和方法")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("序号")]),t._v(" "),a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[a("code",[t._v("Dir[pat] Dir::glob( pat)")])]),t._v(" "),a("td",[t._v('返回一个数组，包含与指定的通配符模式 pat 匹配的文件名：_ - 匹配包含 null 字符串的任意字符串 ** - 递归地匹配任意字符串? - 匹配任意单个字符[...] - 匹配封闭字符中的任意一个{a,b...} - 匹配字符串中的任意一个 Dir["foo._"] # 匹配 "foo.c"、 "foo.rb" 等等 Dir["foo.?"] # 匹配 "foo.c"、 "foo.h" 等等')])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[a("code",[t._v("Dir::chdir( path)")])]),t._v(" "),a("td",[t._v("改变当前目录。")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[a("code",[t._v("Dir::chroot( path)")])]),t._v(" "),a("td",[t._v("改变根目录（只允许超级用户）。并不是在所有的平台上都可用。")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[a("code",[t._v("Dir::delete( path)")])]),t._v(" "),a("td",[t._v("删除 path 指定的目录。目录必须是空的。")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[a("code",[t._v("Dir::entries( path)")])]),t._v(" "),a("td",[t._v("返回一个数组，包含目录 path 中的文件名。")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[a("code",[t._v("Dir::foreach( path) {| f| ...}")])]),t._v(" "),a("td",[t._v("为 path 指定的目录中的每个文件执行一次块。")])]),t._v(" "),a("tr",[a("td",[t._v("7")]),t._v(" "),a("td",[a("code",[t._v("Dir::getwd Dir::pwd")])]),t._v(" "),a("td",[t._v("返回当前目录。")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[a("code",[t._v("Dir::mkdir( path[, mode=0777])")])]),t._v(" "),a("td",[t._v("创建 path 指定的目录。权限模式可被 File::umask 的值修改，在 Win32 的平台上会被忽略。")])]),t._v(" "),a("tr",[a("td",[t._v("9")]),t._v(" "),a("td",[a("code",[t._v("Dir::new( path) Dir::open( path) Dir::open( path) {| dir| ...}")])]),t._v(" "),a("td",[t._v("返回 path 的新目录对象。如果 open 给出一个块，则新目录对象会传到该块，块会在终止前关闭目录对象。")])]),t._v(" "),a("tr",[a("td",[t._v("10")]),t._v(" "),a("td",[a("code",[t._v("Dir::pwd")])]),t._v(" "),a("td",[t._v("参见 Dir::getwd。")])]),t._v(" "),a("tr",[a("td",[t._v("11")]),t._v(" "),a("td",[a("code",[t._v("Dir::rmdir( path) Dir::unlink( path) Dir::delete( path)")])]),t._v(" "),a("td",[t._v("删除 path 指定的目录。目录必须是空的。")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("序号")]),t._v(" "),a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[a("code",[t._v("d.close")])]),t._v(" "),a("td",[t._v("关闭目录流。")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[a("code",[t._v("d.each {| f| ...}")])]),t._v(" "),a("td",[t._v("为 d 中的每一个条目执行一次块。")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[a("code",[t._v("d.pos d.tell")])]),t._v(" "),a("td",[t._v("返回 d 中的当前位置。")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[a("code",[t._v("d.pos= offset")])]),t._v(" "),a("td",[t._v("设置目录流中的位置。")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[a("code",[t._v("d.pos= pos d.seek(pos)")])]),t._v(" "),a("td",[t._v("移动到 d 中的某个位置。pos 必须是一个由 d.pos 返回的值或 0。")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[a("code",[t._v("d.read")])]),t._v(" "),a("td",[t._v("返回 d 的下一个条目。")])]),t._v(" "),a("tr",[a("td",[t._v("7")]),t._v(" "),a("td",[a("code",[t._v("d.rewind")])]),t._v(" "),a("td",[t._v("移动 d 中的位置到第一个条目。")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[a("code",[t._v("d.seek(po s)")])]),t._v(" "),a("td",[t._v("参见 d.pos=pos。")])]),t._v(" "),a("tr",[a("td",[t._v("9")]),t._v(" "),a("td",[a("code",[t._v("d.tell")])]),t._v(" "),a("td",[t._v("参见 d.pos。")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-cgi-编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-cgi-编程"}},[this._v("#")]),this._v(" Ruby CGI 编程")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ruby-编码类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ruby-编码类型转换"}},[this._v("#")]),this._v(" Ruby 编码类型转换")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("1、使用 "),s("code",[this._v("encode")]),this._v(" 方法，返回字符串")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[t._v("encode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("encoding "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" → str\nencode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dst_encoding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" src_encoding "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" → str\nencode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" → str\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("第一个表单返回一个已转码的 str 的副本进行编码。第二个表单返回从 src_encoding 转码到 dst_encoding 的 str 的副本。最后一个表单返回一个已转码的 str 的副本，转码类型为："),s("code",[this._v("Encoding.default_internal")]),this._v(".。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("默认情况下，第一种和第二种形式为目标编码中未定义的字符引发"),s("code",[this._v("Encoding::UndefinedConversionError")]),this._v("，以及源编码中无效的字节序列引发"),s("code",[this._v("Encoding::InvalidByteSequenceError")]),this._v("。默认情况下，最后一种不会引发异常，而是使用替换字符串。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("options")]),this._v(" Hash 值给出了可以通过 "),s("code",[this._v("keys")]),this._v(" 描述更多的转换细节：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("keys")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v(":invald")]),t._v(" "),a("td",[t._v("如果值是:replace, encode 将用替换字符替换 str 中无效的字节序列。默认情况下是引发"),a("code",[t._v("Encoding::InvalidByteSequenceError")]),t._v("异常。")])]),t._v(" "),a("tr",[a("td",[t._v(":undef")]),t._v(" "),a("td",[t._v("如果值是:replace, encode 将用替换字符替换目标编码中未定义的字符。默认情况下是引发编码"),a("code",[t._v("Encoding::UndefinedConversionError")]),t._v("。")])]),t._v(" "),a("tr",[a("td",[t._v(":replace")]),t._v(" "),a("td",[t._v("将替换字符串设置为给定值。默认的替换字符串是 Unicode 编码格式的“uFFFD”，以及“?”。")])]),t._v(" "),a("tr",[a("td",[t._v(":fallback")]),t._v(" "),a("td",[t._v("根据给定对象为未定义字符设置替换字符串。对象应该是一个 Hash、一个 Proc、一个方法或一个具有[]方法的对象。它的键是在当前转码器的源编码中编码的未定义字符。它的值可以是任何编码，直到可以转换为转码器的目标编码为止。")])]),t._v(" "),a("tr",[a("td",[t._v(":xml")]),t._v(" "),a("td",[t._v("值必须是 "),a("code",[t._v(":text")]),t._v(" 或者 "),a("code",[t._v(":attr")]),t._v("。 如果值为 "),a("code",[t._v(":text")]),t._v(" "),a("code",[t._v("encode")]),t._v(" 用(大写十六进制)数字字符引用替换未定义的字符。"),a("code",[t._v("'&'")]),t._v(", "),a("code",[t._v("'<'")]),t._v(", 和 "),a("code",[t._v("'>'")]),t._v(" 将被分别替换为 "),a("code",[t._v("“&amp;”")]),t._v(", "),a("code",[t._v("“&lt;”")]),t._v(", 和 "),a("code",[t._v("“&gt;”")]),t._v("。 如果值为 "),a("code",[t._v(":attr")]),t._v(", encode 也将引用替换结果 (using '“'), 并将 '”' 替换为 “\"”.")])]),t._v(" "),a("tr",[a("td",[t._v(":cr_newline")]),t._v(" "),a("td",[t._v('如果值为真，则将 LF (" n ")替换为 CR (" r ")。')])]),t._v(" "),a("tr",[a("td",[t._v(":crlf_newline")]),t._v(" "),a("td",[t._v('如果值为真，则用 CRLF (" rn ")替换 LF (" n ")。')])]),t._v(" "),a("tr",[a("td",[t._v(":universal_newline")]),t._v(" "),a("td",[t._v('如果值为真，将 CRLF (" rn ")和 CR (" r ")替换为 LF (" n ")。')])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("2、使用 "),s("code",[this._v("encode!")]),this._v(" 方法，返回字符串")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[t._v("encode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("encoding "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" → str\nencode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dst_encoding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" src_encoding "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" → str\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[t._v("static "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VALUE")]),t._v("\nstr_encode_bang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("int argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VALUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VALUE")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VALUE")]),t._v(" newstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    int encidx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    rb_check_frozen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    newstr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    encidx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str_transcode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("newstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("encidx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newstr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        rb_enc_associate_index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" encidx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    rb_str_shared_replace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str_encode_associate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" encidx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("3、使用 "),s("code",[this._v("encoding")]),this._v(" 方法，返回 encoding")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rb"}},[s("code",[this._v("encoding → encoding    "),s("span",{pre:!0,attrs:{class:"token comment"}},[this._v("# 返回表示obj编码的编码对象。")]),this._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VALUE")]),t._v("\nrb_obj_encoding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VALUE")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    int idx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rb_enc_get_index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("idx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\trb_raise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rb_eTypeError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unknown encoding"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" rb_enc_from_encoding_index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("idx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ENC_INDEX_MASK")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("4、使用 "),s("code",[this._v("force_encoding")]),this._v(" 方法，返回字符串")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rb"}},[s("code",[this._v("force_encoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v("(")]),this._v("encoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v(")")]),this._v(" → str   "),s("span",{pre:!0,attrs:{class:"token comment"}},[this._v("# 将编码更改为encoding并返回self。")]),this._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[t._v("static "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VALUE")]),t._v("\nrb_str_force_encoding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VALUE")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VALUE")]),t._v(" enc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    str_modifiable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    rb_enc_associate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rb_to_encoding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("enc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ENC_CODERANGE_CLEAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("5、使用 "),s("code",[this._v("valid_encoding")]),this._v(" ,验证字符串编码是否正确")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[t._v("valid_encoding"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" → "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对于正确编码的字符串返回true。")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[t._v("static "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VALUE")]),t._v("\nrb_str_valid_encoding_p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VALUE")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    int cr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rb_enc_str_coderange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ENC_CODERANGE_BROKEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Qfalse")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Qtrue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\xc2\\xa1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("force_encoding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UTF-8"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("valid_encoding"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\xc2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("force_encoding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UTF-8"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("valid_encoding"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\x80"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("force_encoding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UTF-8"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("valid_encoding"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> false")]),t._v("\n")])])])}],!1,null,null,null);s.default=n.exports}}]);