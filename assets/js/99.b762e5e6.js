(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{265:function(s,t,e){"use strict";e.r(t);var n=e(0),a=Object(n.a)({},(function(){var s=this.$createElement;this._self._c;return this._m(0)}),[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"ruby-异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ruby-异常"}},[s._v("#")]),s._v(" Ruby 异常")]),s._v(" "),e("p",[s._v("异常语句 rescue/retry/raise/ensure/else/Catch/Throw")]),s._v(" "),e("p",[s._v("1、rescue\nRuby 提供了一个完美的处理异常的机制。我们可以在 begin/end 块中附上可能抛出异常的代码，并使用 "),e("code",[s._v("rescue")]),s._v(" 子句告诉 Ruby 完美要处理的异常类型。")]),s._v(" "),e("div",{staticClass:"language-rb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#开始")]),s._v("\n\n "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("raise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#抛出异常")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ExceptionType")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("StandardException")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#捕获指定类型的异常默认值是 StandardException")]),s._v("\n $"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#表示异常信息")]),s._v("\n $@ "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#表示异常出现的代码位置")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#其余异常")]),s._v("\n "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ensure")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#不管有没有异常，进入该代码块")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#结束")]),s._v("\n")])])]),e("p",[s._v("从 "),e("code",[s._v("begin")]),s._v(" 到 "),e("code",[s._v("rescue")]),s._v(" 中的一切是受保护的。如果代码块执行期间发生了异常，控制会传到 rescue 和 end 之间的块。")]),s._v(" "),e("p",[s._v("对于 "),e("code",[s._v("begin")]),s._v(" 块中的每个 "),e("code",[s._v("rescue")]),s._v(" 子句，Ruby 把抛出的异常与每个参数进行轮流比较。如果 "),e("code",[s._v("rescue")]),s._v(" 子句中命名的异常与当前抛出的异常类型相同，或者是该异常的父类，则匹配成功。")]),s._v(" "),e("p",[s._v("如果异常不匹配所有指定的错误类型，我们可以在所有的 "),e("code",[s._v("rescue")]),s._v(" 子句后使用一个 "),e("code",[s._v("else")]),s._v(" 子句。")]),s._v(" "),e("div",{staticClass:"language-rb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/usr/bin/ruby")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n   file "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" open"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/unexistant_file"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" file\n      puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"File opened successfully"')]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v("\n      file "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("STDIN")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\nprint file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"=="')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("STDIN")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\n"')]),s._v("\n")])])]),e("p",[s._v("2、retry")]),s._v(" "),e("p",[s._v("您可以使用 "),e("code",[s._v("rescue")]),s._v(" 块捕获异常，然后使用 "),e("code",[s._v("retry")]),s._v(" 语句从开头开始执行 "),e("code",[s._v("begin")]),s._v(" 块。")]),s._v(" "),e("p",[s._v("如果 "),e("code",[s._v("retry")]),s._v(" 出现在 "),e("code",[s._v("begin")]),s._v(" 表达式的 "),e("code",[s._v("rescue")]),s._v(" 子句中，则从 begin 主体的开头重新开始。")]),s._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n   do_something   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 抛出的异常")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 处理错误")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("retry")]),s._v("          "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重新从 begin 开始")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n")])])]),e("div",{staticClass:"language-rb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/usr/bin/ruby")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n   file "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" open"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/unexistant_file"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" file\n      puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"File opened successfully"')]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v("\n   fname "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"existant_file"')]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("retry")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("=begin\n以下是处理流程：\n\n打开时发生异常。\n跳到 rescue。fname 被重新赋值。\n通过 retry 跳到 begin 的开头。\n这次文件成功打开。\n继续基本的过程。\n=end")]),s._v("\n")])])]),e("p",[s._v("如果 "),e("code",[s._v("retry")]),s._v(" 出现在迭代内、块内或者 "),e("code",[s._v("for")]),s._v(" 表达式的主体内，则重新开始迭代调用。")]),s._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v(".5")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("retry")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" some_condition "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重新从 i == 1 开始")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n")])])]),e("p",[e("strong",[s._v("注")]),s._v("：如果被重新命名的文件不存在，本实例代码会无限尝试。所以异常处理时，谨慎使用 retry。")]),s._v(" "),e("p",[s._v("3、raise")]),s._v(" "),e("p",[s._v("您可以使用 "),e("code",[s._v("raise")]),s._v(" 语句抛出异常。下面的方法在调用时抛出异常。它的第二个消息将被输出。")]),s._v(" "),e("div",{staticClass:"language-rb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第一种形式简单地重新抛出当前异常（如果没有当前异常则抛出一个 RuntimeError）。这用在传入异常之前需要解释异常的异常处理程序中。")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("raise")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第二种形式创建一个新的 RuntimeError 异常，设置它的消息为给定的字符串。该异常之后抛出到调用堆栈。")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("raise")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Error Message"')]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第三种形式使用第一个参数创建一个异常，然后设置相关的消息为第二个参数。")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("raise")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ExceptionType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Error Message"')]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第四种形式与第三种形式类似，您可以添加任何额外的条件语句（比如 unless）来抛出异常。")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("raise")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ExceptionType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Error Message"')]),s._v(" condition\n")])])]),e("div",{staticClass:"language-rb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/usr/bin/ruby")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n    puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I am before the raise.'")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("raise")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'An error has occurred.'")]),s._v("\n    puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I am after the raise.'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v("\n    puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I am rescued.'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\nputs "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I am after the begin block.'")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("=begin 输出结果\nI am before the raise.\nI am rescued.\nI am after the begin block.\n=end")]),s._v("\n")])])]),e("div",{staticClass:"language-rb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/usr/bin/ruby")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("raise")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'A test exception.'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Exception")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" e\n  puts e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("message\n  puts e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("backtrace"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("inspect\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v('=begin 输出结果\nA test exception.\n["main.rb:4"]\n=end')]),s._v("\n")])])]),e("p",[s._v("4、ensure")]),s._v(" "),e("p",[s._v("有时候，无论是否抛出异常，您需要保证一些处理在代码块结束时完成。例如，您可能在进入时打开了一个文件，当您退出块时，您需要确保关闭文件。")]),s._v(" "),e("p",[e("code",[s._v("ensure")]),s._v(" 子句做的就是这个。"),e("code",[s._v("ensure")]),s._v(" 放在最后一个 "),e("code",[s._v("rescue")]),s._v(" 子句后，并包含一个块终止时总是执行的代码块。它与块是否正常退出、是否抛出并处理异常、是否因一个未捕获的异常而终止，这些都没关系，"),e("code",[s._v("ensure")]),s._v(" 块始终都会运行。")]),s._v(" "),e("div",{staticClass:"language-rb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#.. 过程")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#.. 抛出异常")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#.. 处理错误")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ensure")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#.. 最后确保执行")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#.. 这总是会执行")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n")])])]),e("div",{staticClass:"language-rb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("raise")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'A test exception.'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Exception")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" e\n  puts e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("message\n  puts e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("backtrace"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("inspect\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ensure")]),s._v("\n  puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Ensuring execution"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v('=begin 输出结果\nA test exception.\n["main.rb:4"]\nEnsuring execution\n=end')]),s._v("\n")])])]),e("p",[s._v("5、else")]),s._v(" "),e("p",[s._v("如果提供了 else 子句，它一般是放置在 rescue 子句之后，任意 ensure 之前。")]),s._v(" "),e("p",[s._v("else 子句的主体只有在代码主体没有抛出异常时执行。")]),s._v(" "),e("div",{staticClass:"language-rb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#.. 过程")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#.. 抛出异常")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#.. 处理错误")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#.. 如果没有异常则执行")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ensure")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#.. 最后确保执行")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#.. 这总是会执行")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n")])])]),e("div",{staticClass:"language-rb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 抛出 'A test exception.'")]),s._v("\n puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I\'m not raising exception"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Exception")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" e\n  puts e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("message\n  puts e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("backtrace"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("inspect\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n   puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Congratulations-- no errors!"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ensure")]),s._v("\n  puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Ensuring execution"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("=begin\n以上实例运行输出结果为：\n\nI'm not raising exception\nCongratulations-- no errors!\nEnsuring execution\n=end")]),s._v("\n")])])]),e("p",[s._v("6、Catch 和 Throw")]),s._v(" "),e("p",[s._v("raise 和 rescue 的异常机制能在发生错误时放弃执行，有时候需要在正常处理时跳出一些深层嵌套的结构。此时 catch 和 throw 就派上用场了。")]),s._v(" "),e("p",[s._v("catch 定义了一个使用给定的名称（可以是 Symbol 或 String）作为标签的块。块会正常执行直到遇到一个 throw。")]),s._v(" "),e("div",{staticClass:"language-rb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":lablename")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#.. 这不会被执行")]),s._v("\ncatch "),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":lablename")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#.. 在遇到一个 throw 后匹配将被执行的 catch")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n或\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":lablename")]),s._v(" condition\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#.. 这不会被执行")]),s._v("\ncatch "),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":lablename")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#.. 在遇到一个 throw 后匹配将被执行的 catch")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n")])])]),e("p",[s._v("下面的实例中，如果用户键入 '!' 回应任何提示，使用一个 throw 终止与用户的交互。")]),s._v(" "),e("div",{staticClass:"language-rb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token method-definition"}},[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("promptAndGet")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("prompt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   print prompt\n   res "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" readline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("chomp\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":quitRequested")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" res "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"!"')]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" res\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\ncatch "),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":quitRequested")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n   name "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" promptAndGet"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Name: "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   age "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" promptAndGet"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Age: "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   sex "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" promptAndGet"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Sex: "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ..")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 处理信息")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\npromptAndGet"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Name:"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("=begin\n上面的程序需要人工交互，您可以在您的计算机上进行尝试。以上实例运行输出结果为：\n\nName: Ruby on Rails\nAge: 3\nSex: !\nName:Just Ruby\n=end")]),s._v("\n")])])]),e("p",[s._v("7、类 Exception")]),s._v(" "),e("p",[s._v("Ruby 的标准类和模块抛出异常。所有的异常类组成一个层次，包括顶部的 Exception 类在内。下一层是七种不同的类型：")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("异常类型")]),s._v(" "),e("th",[s._v("描述")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("Interrupt")]),s._v(" "),e("td")]),s._v(" "),e("tr",[e("td",[s._v("NoMemoryError")]),s._v(" "),e("td")]),s._v(" "),e("tr",[e("td",[s._v("SignalException")]),s._v(" "),e("td")]),s._v(" "),e("tr",[e("td",[s._v("ScriptError")]),s._v(" "),e("td")]),s._v(" "),e("tr",[e("td",[s._v("StandardError")]),s._v(" "),e("td")]),s._v(" "),e("tr",[e("td",[s._v("SystemExit")]),s._v(" "),e("td")])])]),s._v(" "),e("p",[s._v("Fatal 是该层中另一种异常，但是 Ruby 解释器只在内部使用它。")]),s._v(" "),e("p",[s._v("ScriptError 和 StandardError 都有一些子类，但是在这里我们不需要了解这些细节。最重要的事情是创建我们自己的异常类，它们必须是类 Exception 或其子代的子类。")]),s._v(" "),e("p",[s._v("让我们看一个实例：")]),s._v(" "),e("div",{staticClass:"language-rb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FileSaveError")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("StandardError")]),s._v("\n   attr_reader "),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":reason")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token method-definition"}},[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("initialize")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reason"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@reason")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reason\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n")])])]),e("p",[s._v("现在，看下面的实例，将用到上面的异常：")]),s._v(" "),e("div",{staticClass:"language-rb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("File")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("open"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"w"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("file"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 写出数据 ...")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 发生错误")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("raise")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FileSaveError")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("$"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n")])])]),e("p",[s._v("在这里，最重要的一行是 raise FileSaveError.new($!)。我们调用 raise 来示意异常已经发生，把它传给 FileSaveError 的一个新的实例，由于特定的异常引起数据写入失败。")])])}],!1,null,null,null);t.default=a.exports}}]);