(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{266:function(t,a,r){"use strict";r.r(a);var _=r(0),v=Object(_.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("div",{staticClass:"content"},[r("h2",{attrs:{id:"ruby-数组（array）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ruby-数组（array）"}},[t._v("#")]),t._v(" Ruby 数组（Array）")]),t._v(" "),r("p",[t._v("Ruby 数组是任何对象的有序整数索引集合。数组中的每个元素都与一个索引相关，并可通过索引进行获取。")]),t._v(" "),r("p",[t._v("数组的索引从 0 开始，这与 C 或 Java 中一样。一个负数的索相对于数组的末尾计数的，也就是说，索引为 -1 表示数组的最后一个元素，-2 表示数组中的倒数第二个元素，依此类推。")]),t._v(" "),r("p",[t._v("Ruby 数组可存储诸如 String、 Integer、 Fixnum、 Hash、 Symbol 等对象，甚至可以是其他 Array 对象。")]),t._v(" "),r("p",[t._v("Ruby 数组不需要指定大小，当向数组添加元素时，Ruby 数组会自动增长。")]),t._v(" "),r("p",[t._v("1、创建数组")]),t._v(" "),r("p",[t._v("有多种方式创建或初始化数组。一种方式是通过 new 类方法：")]),t._v(" "),r("div",{staticClass:"language-ruby extra-class"},[r("pre",{pre:!0,attrs:{class:"language-ruby"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\narray1 "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\narray2 "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\narray3 "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\narray4 "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("e"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" e "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#块")]),t._v("\narray5 "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\narray5 "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\narray6 "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v(".9")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nputs array2"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size  "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回 20")]),t._v("\nputs array2"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回 20")]),t._v("\nputs "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),r("span",{pre:!0,attrs:{class:"token interpolation"}},[r("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("array3"),r("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#返回 ["name", "name", "name", "name"]')]),t._v("\n\nputs "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),r("span",{pre:!0,attrs:{class:"token interpolation"}},[r("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("array4"),r("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#返回 [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]")]),t._v("\nputs "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),r("span",{pre:!0,attrs:{class:"token interpolation"}},[r("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("array6"),r("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#返回 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]")]),t._v("\n")])])]),r("p",[t._v("2、数组内建方法")]),t._v(" "),r("p",[t._v("我们需要有一个 Array 对象的实例来调用 Array 方法。下面是创建 Array 对象实例的方式：")]),t._v(" "),r("div",{staticClass:"language-ruby extra-class"},[r("pre",{pre:!0,attrs:{class:"language-ruby"}},[r("code",[r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),r("p",[t._v("这将返回一个使用给定对象进行填充的新数组。现在，使用创建的对象，我们可以调用任意可用的方法。例如：")]),t._v(" "),r("div",{staticClass:"language-ruby extra-class"},[r("pre",{pre:!0,attrs:{class:"language-ruby"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n\ndigits "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v(".9")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nnum "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" digits"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("at"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nputs "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),r("span",{pre:!0,attrs:{class:"token interpolation"}},[r("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("num"),r("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n")])])]),r("p",[t._v("下面是公共的数组方法（假设 array 是一个 Array 对象）：")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("序号")]),t._v(" "),r("th",[t._v("方法")]),t._v(" "),r("th",[t._v("描述")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("1")]),t._v(" "),r("td",[r("code",[t._v("array & other_array")])]),t._v(" "),r("td",[t._v("返回一个新的数组，包含两个数组中共同的元素，没有重复。")])]),t._v(" "),r("tr",[r("td",[t._v("2")]),t._v(" "),r("td",[r("code",[t._v("array * int [or] array * str")])]),t._v(" "),r("td",[t._v("返回一个新的数组，新数组通过连接 self 的 int 副本创建的。带有 String 参数时，相当于 self.join(str)。")])]),t._v(" "),r("tr",[r("td",[t._v("3")]),t._v(" "),r("td",[r("code",[t._v("array + other_array")])]),t._v(" "),r("td",[t._v("返回一个新的数组，新数组通过连接两个数组产生第三个数组创建的。")])]),t._v(" "),r("tr",[r("td",[t._v("4")]),t._v(" "),r("td",[r("code",[t._v("array - other_array")])]),t._v(" "),r("td",[t._v("返回一个新的数组，新数组是从初始数组中移除了在 other_array 中出现的项的副本。")])]),t._v(" "),r("tr",[r("td",[t._v("5")]),t._v(" "),r("td",[r("code",[t._v("str <=> other_str")])]),t._v(" "),r("td",[t._v("把 str 与 other_str 进行比较，返回 -1（小于）、0（等于）或 1（大于）。比较是区分大小写的。")])]),t._v(" "),r("tr",[r("td",[t._v("6")]),t._v(" "),r("td",[r("code",[t._v("array | other_array")])]),t._v(" "),r("td",[t._v("通过把 other_array 加入 array 中，移除重复项，返回一个新的数组。")])]),t._v(" "),r("tr",[r("td",[t._v("7")]),t._v(" "),r("td",[r("code",[t._v("array << obj")])]),t._v(" "),r("td",[t._v("把给定的对象附加到数组的末尾。该表达式返回数组本身，所以几个附加可以连在一起。")])]),t._v(" "),r("tr",[r("td",[t._v("8")]),t._v(" "),r("td",[r("code",[t._v("array <=> other_array")])]),t._v(" "),r("td",[t._v("如果数组小于、等于或大于 other_array，则返回一个整数（-1、 0 或 +1）。")])]),t._v(" "),r("tr",[r("td",[t._v("9")]),t._v(" "),r("td",[r("code",[t._v("array == other_array")])]),t._v(" "),r("td",[t._v("如果两个数组包含相同的元素个数，且每个元素与另一个数组中相对应的元素相等（根据 Object.==），那么这两个数组相等。")])]),t._v(" "),r("tr",[r("td",[t._v("10")]),t._v(" "),r("td",[r("code",[t._v("array[index] [or] array[start, length] [or]array[range] [or] array.slice(index) [or]array.slice(start, length) [or] array.slice(range)")])]),t._v(" "),r("td",[t._v("返回索引为 index 的元素，或者返回从 start 开始直至 length 个元素的子数组，或者返回 range 指定的子数组。负值索引从数组末尾开始计数（-1 是最后一个元素）。如果 index（或开始索引）超出范围，则返回 nil。")])]),t._v(" "),r("tr",[r("td",[t._v("11")]),t._v(" "),r("td",[r("code",[t._v("array[index] = obj [or]array[start, length] = obj or an_array or nil [or]array[range] = obj or an_array or nil")])]),t._v(" "),r("td",[t._v("设置索引为 index 的元素，或者替换从 start 开始直至 length 个元素的子数组，或者替换 range 指定的子数组。如果索引大于数组的当前容量，那么数组会自动增长。负值索引从数组末尾开始计数。如果 length 为零则插入元素。如果在第二种或第三种形式中使用了 nil，则从 self 删除元素。")])]),t._v(" "),r("tr",[r("td",[t._v("12")]),t._v(" "),r("td",[r("code",[t._v("array.abbrev(pattern = nil)")])]),t._v(" "),r("td",[t._v("为 self 中字符串计算明确的缩写集合。如果传递一个模式或一个字符串，只考虑当字符串匹配模式或者以该字符串开始时的情况。")])]),t._v(" "),r("tr",[r("td",[t._v("13")]),t._v(" "),r("td",[r("code",[t._v("array.assoc(obj)")])]),t._v(" "),r("td",[t._v("搜索一个数组，其元素也是数组，使用 obj.== 把 obj 与每个包含的数组的第一个元素进行比较。如果匹配则返回第一个包含的数组，如果未找到匹配则返回 nil。")])]),t._v(" "),r("tr",[r("td",[t._v("14")]),t._v(" "),r("td",[r("code",[t._v("array.at(index)")])]),t._v(" "),r("td",[t._v("返回索引为 index 的元素。一个负值索引从 self 的末尾开始计数。如果索引超出范围则返回 nil。")])]),t._v(" "),r("tr",[r("td",[t._v("15")]),t._v(" "),r("td",[r("code",[t._v("array.clear")])]),t._v(" "),r("td",[t._v("从数组中移除所有的元素。")])]),t._v(" "),r("tr",[r("td",[t._v("16")]),t._v(" "),r("td",[r("code",[t._v("array.collect { |item| block } [or]array.map { |item| block }")])]),t._v(" "),r("td",[t._v("为 self 中的每个元素调用一次 block。创建一个新的数组，包含 block 返回的值。")])]),t._v(" "),r("tr",[r("td",[t._v("17")]),t._v(" "),r("td",[r("code",[t._v("array.collect! { |item| block } [or]array.map! { |item| block }")])]),t._v(" "),r("td",[t._v("为 self 中的每个元素调用一次 block，把元素替换为 block 返回的值。")])]),t._v(" "),r("tr",[r("td",[t._v("18")]),t._v(" "),r("td",[r("code",[t._v("array.compact")])]),t._v(" "),r("td",[t._v("返回 self 的副本，移除了所有的 nil 元素。")])]),t._v(" "),r("tr",[r("td",[t._v("19")]),t._v(" "),r("td",[r("code",[t._v("array.compact!")])]),t._v(" "),r("td",[t._v("从数组中移除所有的 nil 元素。如果没有变化则返回 nil。")])]),t._v(" "),r("tr",[r("td",[t._v("20")]),t._v(" "),r("td",[r("code",[t._v("array.concat(other_array)")])]),t._v(" "),r("td",[t._v("追加 other_array 中的元素到 self 中。")])]),t._v(" "),r("tr",[r("td",[t._v("21")]),t._v(" "),r("td",[r("code",[t._v("array.delete(obj) [or] array.delete(obj) { block }")])]),t._v(" "),r("td",[t._v("从 self 中删除等于 obj 的项。如果未找到相等项，则返回 nil。如果未找到相等项且给出了可选的代码 block，则返回 block 的结果。")])]),t._v(" "),r("tr",[r("td",[t._v("22")]),t._v(" "),r("td",[r("code",[t._v("array.delete_at(index)")])]),t._v(" "),r("td",[t._v("删除指定的 index 处的元素，并返回该元素。如果 index 超出范围，则返回 nil。")])]),t._v(" "),r("tr",[r("td",[t._v("23")]),t._v(" "),r("td",[r("code",[t._v("array.delete_if { |item| block }")])]),t._v(" "),r("td",[t._v("当 block 为 true 时，删除 self 的每个元素。")])]),t._v(" "),r("tr",[r("td",[t._v("24")]),t._v(" "),r("td",[r("code",[t._v("array.each { |item| block }")])]),t._v(" "),r("td",[t._v("为 self 中的每个元素调用一次 block，传递该元素作为参数。")])]),t._v(" "),r("tr",[r("td",[t._v("25")]),t._v(" "),r("td",[r("code",[t._v("array.each_index { |index| block }")])]),t._v(" "),r("td",[t._v("与 Array#each 相同，但是传递元素的 index，而不是传递元素本身。")])]),t._v(" "),r("tr",[r("td",[t._v("26")]),t._v(" "),r("td",[r("code",[t._v("array.empty?")])]),t._v(" "),r("td",[t._v("如果数组本身没有包含元素，则返回 true。")])]),t._v(" "),r("tr",[r("td",[t._v("27")]),t._v(" "),r("td",[r("code",[t._v("array.eql?(other)")])]),t._v(" "),r("td",[t._v("如果 array 和 other 是相同的对象，或者两个数组带有相同的内容，则返回 true。")])]),t._v(" "),r("tr",[r("td",[t._v("28")]),t._v(" "),r("td",[r("code",[t._v("array.fetch(index) [or] array.fetch(index, default) [or] array.fetch(index) { |index| block }")])]),t._v(" "),r("td",[t._v("尝试返回位置 index 处的元素。如果 index 位于数组外部，则第一种形式会抛出 IndexError 异常，第二种形式会返回 default，第三种形式会返回调用 block 传入 index 的值。负值的 index 从数组末尾开始计数。")])]),t._v(" "),r("tr",[r("td",[t._v("29")]),t._v(" "),r("td",[r("code",[t._v("array.fill(obj) [or]array.fill(obj, start [, length]) [or]array.fill(obj, range) [or]array.fill { |index| block } [or]array.fill(start [, length] ) { |index| block } [or]array.fill(range) { |index| block }")])]),t._v(" "),r("td",[t._v("前面三种形式设置 self 的被选元素为 obj。以 nil 开头相当于零。nil 的长度相当于 self.length。最后三种形式用 block 的值填充数组。block 通过带有被填充的每个元素的绝对索引来传递。")])]),t._v(" "),r("tr",[r("td",[t._v("30")]),t._v(" "),r("td",[r("code",[t._v("array.first [or] array.first(n)")])]),t._v(" "),r("td",[t._v("返回数组的第一个元素或前 n 个元素。如果数组为空，则第一种形式返回 nil，第二种形式返回一个空的数组。")])]),t._v(" "),r("tr",[r("td",[t._v("31")]),t._v(" "),r("td",[r("code",[t._v("array.flatten")])]),t._v(" "),r("td",[t._v("返回一个新的数组，新数组是一个一维的扁平化的数组（递归）。")])]),t._v(" "),r("tr",[r("td",[t._v("32")]),t._v(" "),r("td",[r("code",[t._v("array.flatten!")])]),t._v(" "),r("td",[t._v("把 array 进行扁平化。如果没有变化则返回 nil。（数组不包含子数组。）")])]),t._v(" "),r("tr",[r("td",[t._v("33")]),t._v(" "),r("td",[r("code",[t._v("array.frozen?")])]),t._v(" "),r("td",[t._v("如果 array 被冻结（或排序时暂时冻结），则返回 true。")])]),t._v(" "),r("tr",[r("td",[t._v("34")]),t._v(" "),r("td",[r("code",[t._v("array.hash")])]),t._v(" "),r("td",[t._v("计算数组的哈希代码。两个具有相同内容的数组将具有相同的哈希代码。")])]),t._v(" "),r("tr",[r("td",[t._v("35")]),t._v(" "),r("td",[r("code",[t._v("array.include?(obj)")])]),t._v(" "),r("td",[t._v("如果 self 中包含 obj，则返回 true，否则返回 false。")])]),t._v(" "),r("tr",[r("td",[t._v("36")]),t._v(" "),r("td",[r("code",[t._v("array.index(obj)")])]),t._v(" "),r("td",[t._v("返回 self 中第一个等于 obj 的对象的 index。如果未找到匹配则返回 nil。")])]),t._v(" "),r("tr",[r("td",[t._v("37")]),t._v(" "),r("td",[r("code",[t._v("array.indexes(i1, i2, ... iN) [or] array.indices(i1, i2, ... iN)")])]),t._v(" "),r("td",[t._v("该方法在 Ruby 的最新版本中被废弃，所以请使用 Array#values_at。")])]),t._v(" "),r("tr",[r("td",[t._v("38")]),t._v(" "),r("td",[r("code",[t._v("array.indices(i1, i2, ... iN) [or] array.indexes(i1, i2, ... iN)")])]),t._v(" "),r("td",[t._v("该方法在 Ruby 的最新版本中被废弃，所以请使用 Array#values_at。")])]),t._v(" "),r("tr",[r("td",[t._v("39")]),t._v(" "),r("td",[r("code",[t._v("array.insert(index, obj...)")])]),t._v(" "),r("td",[t._v("在给定的 index 的元素前插入给定的值，index 可以是负值。")])]),t._v(" "),r("tr",[r("td",[t._v("40")]),t._v(" "),r("td",[r("code",[t._v("array.inspect")])]),t._v(" "),r("td",[t._v("创建一个数组的可打印版本。")])]),t._v(" "),r("tr",[r("td",[t._v("41")]),t._v(" "),r("td",[r("code",[t._v("array.join(sep=$,)")])]),t._v(" "),r("td",[t._v("返回一个字符串，通过把数组的每个元素转换为字符串，并使用 sep 分隔进行创建的。")])]),t._v(" "),r("tr",[r("td",[t._v("42")]),t._v(" "),r("td",[r("code",[t._v("array.last [or] array.last(n)")])]),t._v(" "),r("td",[t._v("返回 self 的最后一个元素。如果数组为空，则第一种形式返回 nil。")])]),t._v(" "),r("tr",[r("td",[t._v("43")]),t._v(" "),r("td",[r("code",[t._v("array.length")])]),t._v(" "),r("td",[t._v("返回 self 中元素的个数。可能为零。")])]),t._v(" "),r("tr",[r("td",[t._v("44")]),t._v(" "),r("td",[r("code",[t._v("array.map { |item| block } [or]array.collect { |item| block }")])]),t._v(" "),r("td",[t._v("为 self 的每个元素调用一次 block。创建一个新的数组，包含 block 返回的值。")])]),t._v(" "),r("tr",[r("td",[t._v("45")]),t._v(" "),r("td",[r("code",[t._v("array.map! { |item| block } [or] array.collect! { |item| block }")])]),t._v(" "),r("td",[t._v("为 array 的每个元素调用一次 block，把元素替换为 block 返回的值。")])]),t._v(" "),r("tr",[r("td",[t._v("46")]),t._v(" "),r("td",[r("code",[t._v("array.nitems")])]),t._v(" "),r("td",[t._v("返回 self 中 non-nil 元素的个数。可能为零。")])]),t._v(" "),r("tr",[r("td",[t._v("47")]),t._v(" "),r("td",[r("code",[t._v("array.pack(aTemplateString)")])]),t._v(" "),r("td",[t._v("根据 aTemplateString 中的指令，把数组的内容压缩为二进制序列。指令 A、 a 和 Z 后可以跟一个表示结果字段宽度的数字。剩余的指令也可以带有一个表示要转换的数组元素个数的数字。如果数字是一个星号（*），则所有剩余的数组元素都将被转换。任何指令后都可以跟一个下划线（_），表示指定类型使用底层平台的本地尺寸大小，否则使用独立于平台的一致的尺寸大小。在模板字符串中空格会被忽略。")])]),t._v(" "),r("tr",[r("td",[t._v("48")]),t._v(" "),r("td",[r("code",[t._v("array.pop")])]),t._v(" "),r("td",[t._v("从 array 中移除最后一个元素，并返回该元素。如果 array 为空则返回 nil。")])]),t._v(" "),r("tr",[r("td",[t._v("49")]),t._v(" "),r("td",[r("code",[t._v("array.push(obj, ...)")])]),t._v(" "),r("td",[t._v("把给定的 obj 附加到数组的末尾。该表达式返回数组本身，所以几个附加可以连在一起。")])]),t._v(" "),r("tr",[r("td",[t._v("50")]),t._v(" "),r("td",[r("code",[t._v("array.rassoc(key)")])]),t._v(" "),r("td",[t._v("搜索一个数组，其元素也是数组，使用 == 把 key 与每个包含的数组的第二个元素进行比较。如果匹配则返回第一个包含的数组。")])]),t._v(" "),r("tr",[r("td",[t._v("51")]),t._v(" "),r("td",[r("code",[t._v("array.reject { |item| block }")])]),t._v(" "),r("td",[t._v("返回一个新的数组，包含当 block 不为 true 时的数组项。")])]),t._v(" "),r("tr",[r("td",[t._v("52")]),t._v(" "),r("td",[r("code",[t._v("array.reject! { |item| block }")])]),t._v(" "),r("td",[t._v("当 block 为真时，从 array 删除元素，如果没有变化则返回 nil。相当于 Array#delete_if。")])]),t._v(" "),r("tr",[r("td",[t._v("53")]),t._v(" "),r("td",[r("code",[t._v("array.replace(other_array)")])]),t._v(" "),r("td",[t._v("把 array 的内容替换为 other_array 的内容，必要的时候进行截断或扩充。")])]),t._v(" "),r("tr",[r("td",[t._v("54")]),t._v(" "),r("td",[r("code",[t._v("array.reverse")])]),t._v(" "),r("td",[t._v("返回一个新的数组，包含倒序排列的数组元素。")])]),t._v(" "),r("tr",[r("td",[t._v("55")]),t._v(" "),r("td",[r("code",[t._v("array.reverse!")])]),t._v(" "),r("td",[t._v("把 array 进行逆转。")])]),t._v(" "),r("tr",[r("td",[t._v("56")]),t._v(" "),r("td",[r("code",[t._v("array.reverse_each {|item| block }")])]),t._v(" "),r("td",[t._v("与 Array#each 相同，但是把 array 进行逆转。")])]),t._v(" "),r("tr",[r("td",[t._v("57")]),t._v(" "),r("td",[r("code",[t._v("array.rindex(obj)")])]),t._v(" "),r("td",[t._v("返回 array 中最后一个等于 obj 的对象的索引。如果未找到匹配，则返回 nil。")])]),t._v(" "),r("tr",[r("td",[t._v("58")]),t._v(" "),r("td",[r("code",[t._v("array.select {|item| block }")])]),t._v(" "),r("td",[t._v("调用从数组传入连续元素的 block，返回一个数组，包含 block 返回 true 值时的元素。")])]),t._v(" "),r("tr",[r("td",[t._v("59")]),t._v(" "),r("td",[r("code",[t._v("array.shift")])]),t._v(" "),r("td",[t._v("返回 self 的第一个元素，并移除该元素（把所有的其他元素下移一位）。如果数组为空，则返回 nil。")])]),t._v(" "),r("tr",[r("td",[t._v("60")]),t._v(" "),r("td",[r("code",[t._v("array.size")])]),t._v(" "),r("td",[t._v("返回 array 的长度（元素的个数）。length 的别名。")])]),t._v(" "),r("tr",[r("td",[t._v("61")]),t._v(" "),r("td",[r("code",[t._v("array.slice(index) [or] array.slice(start, length) [or] array.slice(range) [or] array[index] [or] array[start, length] [or] array[range]")])]),t._v(" "),r("td",[t._v("返回索引为 index 的元素，或者返回从 start 开始直至 length 个元素的子数组，或者返回 range 指定的子数组。负值索引从数组末尾开始计数（-1 是最后一个元素）。如果 index（或开始索引）超出范围，则返回 nil。")])]),t._v(" "),r("tr",[r("td",[t._v("62")]),t._v(" "),r("td",[r("code",[t._v("array.slice!(index) [or] array.slice!(start, length) [or] array.slice!(range)")])]),t._v(" "),r("td",[t._v("删除 index（长度是可选的）或 range 指定的元素。返回被删除的对象、子数组，如果 index 超出范围，则返回 nil。")])]),t._v(" "),r("tr",[r("td",[t._v("63")]),t._v(" "),r("td",[r("code",[t._v("array.sort [or] array.sort { | a,b | block }")])]),t._v(" "),r("td",[t._v("返回一个排序的数组。")])]),t._v(" "),r("tr",[r("td",[t._v("64")]),t._v(" "),r("td",[r("code",[t._v("array.sort! [or] array.sort! { | a,b | block }")])]),t._v(" "),r("td",[t._v("把数组进行排序。")])]),t._v(" "),r("tr",[r("td",[t._v("65")]),t._v(" "),r("td",[r("code",[t._v("array.to_a")])]),t._v(" "),r("td",[t._v("返回 self。如果在 Array 的子类上调用，则把接收参数转换为一个 Array 对象。")])]),t._v(" "),r("tr",[r("td",[t._v("66")]),t._v(" "),r("td",[r("code",[t._v("array.to_ary")])]),t._v(" "),r("td",[t._v("返回 self。")])]),t._v(" "),r("tr",[r("td",[t._v("67")]),t._v(" "),r("td",[r("code",[t._v("array.to_s")])]),t._v(" "),r("td",[t._v("返回 self.join。")])]),t._v(" "),r("tr",[r("td",[t._v("68")]),t._v(" "),r("td",[r("code",[t._v("array.transpose")])]),t._v(" "),r("td",[t._v("假设 self 是数组的数组，且置换行和列。")])]),t._v(" "),r("tr",[r("td",[t._v("69")]),t._v(" "),r("td",[r("code",[t._v("array.uniq")])]),t._v(" "),r("td",[t._v("返回一个新的数组，移除了 array 中的重复值。")])]),t._v(" "),r("tr",[r("td",[t._v("70")]),t._v(" "),r("td",[r("code",[t._v("array.uniq!")])]),t._v(" "),r("td",[t._v("从 self 中移除重复元素。如果没有变化（也就是说，未找到重复），则返回 nil。")])]),t._v(" "),r("tr",[r("td",[t._v("71")]),t._v(" "),r("td",[r("code",[t._v("array.unshift(obj, ...)")])]),t._v(" "),r("td",[t._v("把对象前置在数组的前面，其他元素上移一位。")])]),t._v(" "),r("tr",[r("td",[t._v("72")]),t._v(" "),r("td",[r("code",[t._v("array.values_at(selector,...)")])]),t._v(" "),r("td",[t._v("返回一个数组，包含 self 中与给定的 selector（一个或多个）相对应的元素。选择器可以是整数索引或者范围。")])]),t._v(" "),r("tr",[r("td",[t._v("73")]),t._v(" "),r("td",[r("code",[t._v("array.zip(arg, ...) [or] array.zip(arg, ...){ | arr | block }")])]),t._v(" "),r("td",[t._v("把任何参数转换为数组，然后把 array 的元素与每个参数中相对应的元素合并。")])])])]),t._v(" "),r("p",[t._v("3、数组 pack 指令")]),t._v(" "),r("p",[t._v("下表列出了方法 Array#pack 的压缩指令。")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("指令")]),t._v(" "),r("th",[t._v("描述")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("@")]),t._v(" "),r("td",[t._v("移动到绝对位置。")])]),t._v(" "),r("tr",[r("td",[t._v("A")]),t._v(" "),r("td",[t._v("ASCII 字符串（填充 space，count 是宽度）。")])]),t._v(" "),r("tr",[r("td",[t._v("a")]),t._v(" "),r("td",[t._v("ASCII 字符串（填充 null，count 是宽度）。")])]),t._v(" "),r("tr",[r("td",[t._v("B")]),t._v(" "),r("td",[t._v("位字符串（降序）")])]),t._v(" "),r("tr",[r("td",[t._v("b")]),t._v(" "),r("td",[t._v("位字符串（升序）。")])]),t._v(" "),r("tr",[r("td",[t._v("C")]),t._v(" "),r("td",[t._v("无符号字符。")])]),t._v(" "),r("tr",[r("td",[t._v("c")]),t._v(" "),r("td",[t._v("字符。")])]),t._v(" "),r("tr",[r("td",[t._v("D, d")]),t._v(" "),r("td",[t._v("双精度浮点数，原生格式。")])]),t._v(" "),r("tr",[r("td",[t._v("E")]),t._v(" "),r("td",[t._v("双精度浮点数，little-endian 字节顺序。")])]),t._v(" "),r("tr",[r("td",[t._v("e")]),t._v(" "),r("td",[t._v("单精度浮点数，little-endian 字节顺序。")])]),t._v(" "),r("tr",[r("td",[t._v("F, f")]),t._v(" "),r("td",[t._v("单精度浮点数，原生格式。")])]),t._v(" "),r("tr",[r("td",[t._v("G")]),t._v(" "),r("td",[t._v("双精度浮点数，network（big-endian）字节顺序。")])]),t._v(" "),r("tr",[r("td",[t._v("g")]),t._v(" "),r("td",[t._v("单精度浮点数，network（big-endian）字节顺序。")])]),t._v(" "),r("tr",[r("td",[t._v("H")]),t._v(" "),r("td",[t._v("十六进制字符串（高位优先）。")])]),t._v(" "),r("tr",[r("td",[t._v("h")]),t._v(" "),r("td",[t._v("十六进制字符串（低位优先）。")])]),t._v(" "),r("tr",[r("td",[t._v("I")]),t._v(" "),r("td",[t._v("无符号整数。")])]),t._v(" "),r("tr",[r("td",[t._v("i")]),t._v(" "),r("td",[t._v("整数。")])]),t._v(" "),r("tr",[r("td",[t._v("L")]),t._v(" "),r("td",[t._v("无符号 long。")])]),t._v(" "),r("tr",[r("td",[t._v("l")]),t._v(" "),r("td",[t._v("Long。")])]),t._v(" "),r("tr",[r("td",[t._v("M")]),t._v(" "),r("td",[t._v("引用可打印的，MIME 编码。")])]),t._v(" "),r("tr",[r("td",[t._v("m")]),t._v(" "),r("td",[t._v("Base64 编码字符串。")])]),t._v(" "),r("tr",[r("td",[t._v("N")]),t._v(" "),r("td",[t._v("Long，network（big-endian）字节顺序。")])]),t._v(" "),r("tr",[r("td",[t._v("n")]),t._v(" "),r("td",[t._v("Short，network（big-endian）字节顺序。")])]),t._v(" "),r("tr",[r("td",[t._v("P")]),t._v(" "),r("td",[t._v("指向一个结构（固定长度的字符串）。")])]),t._v(" "),r("tr",[r("td",[t._v("p")]),t._v(" "),r("td",[t._v("指向一个空结束字符串。")])]),t._v(" "),r("tr",[r("td",[t._v("Q, q")]),t._v(" "),r("td",[t._v("64 位数字。")])]),t._v(" "),r("tr",[r("td",[t._v("S")]),t._v(" "),r("td",[t._v("无符号 short。")])]),t._v(" "),r("tr",[r("td",[t._v("s")]),t._v(" "),r("td",[t._v("Short。")])]),t._v(" "),r("tr",[r("td",[t._v("U")]),t._v(" "),r("td",[t._v("UTF-8。")])]),t._v(" "),r("tr",[r("td",[t._v("u")]),t._v(" "),r("td",[t._v("UU 编码字符串。")])]),t._v(" "),r("tr",[r("td",[t._v("V")]),t._v(" "),r("td",[t._v("Long，little-endian 字节顺序。")])]),t._v(" "),r("tr",[r("td",[t._v("v")]),t._v(" "),r("td",[t._v("Short，little-endian 字节顺序。")])]),t._v(" "),r("tr",[r("td",[t._v("w")]),t._v(" "),r("td",[t._v("BER 压缩的整数 \\fnm。")])]),t._v(" "),r("tr",[r("td",[t._v("X")]),t._v(" "),r("td",[t._v("向后跳过一个字节。")])]),t._v(" "),r("tr",[r("td",[t._v("x")]),t._v(" "),r("td",[t._v("Null 字节。")])]),t._v(" "),r("tr",[r("td",[t._v("Z")]),t._v(" "),r("td",[t._v("与 a 相同，除了 null 会被加上 *。")])])])]),t._v(" "),r("div",{staticClass:"language-ruby extra-class"},[r("pre",{pre:!0,attrs:{class:"language-ruby"}},[r("code",[t._v("a "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nn "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("66")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("67")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nputs a"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pack"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A3A3A3"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> "a  b  c  "')]),t._v("\nputs a"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pack"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a3a3a3"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> "a\\000\\000b\\000\\000c\\000\\000"')]),t._v("\nputs n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pack"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ccc"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> "ABC"')]),t._v("\n")])])])])}],!1,null,null,null);a.default=v.exports}}]);