(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{261:function(t,s,a){"use strict";a.r(s);var e=a(0),v=Object(e.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h2",{attrs:{id:"ruby-哈希（hash）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ruby-哈希（hash）"}},[t._v("#")]),t._v(" Ruby 哈希（Hash）")]),t._v(" "),a("p",[t._v('哈希（Hash）是类似 "key" => "value" 这样的键值对集合。哈希类似于一个数组，只不过它的索引不局限于使用数字。')]),t._v(" "),a("p",[t._v('Hash 的索引（或者叫"键"）或值，几乎可以是任何对象。')]),t._v(" "),a("p",[t._v("Hash 虽然和数组类似，但却有一个很重要的区别：Hash 的元素没有特定的顺序。 如果顺序很重要的话就要使用数组了。")]),t._v(" "),a("p",[t._v("1、创建哈希")]),t._v(" "),a("p",[t._v("与数组一样，有各种不同的方式来创建哈希。当您访问带有默认值的哈希中的任意键时，如果键或值不存在，访问哈希将返回默认值：")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("months "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\nmonths "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"month"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmonths "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"month"')]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("months"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -> month")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("months"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -> month")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("H")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("H")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -> 100")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("H")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -> name")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jan"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"January"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 该哈希的键为一个数组")]),t._v("\n")])])]),a("p",[t._v("2、哈希内置方法")]),t._v(" "),a("p",[t._v("如果需要调用 Hash 方法，需要先实例化一个 Hash 对象。下面是创建 Hash 对象实例的方式：")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" block "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这将返回一个使用给定对象进行填充的新的哈希。现在，使用创建的对象，我们可以调用任意可用的方法。例如：")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n\n$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('", "')]),t._v("\nmonths "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"month"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmonths "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"January"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"February"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nkeys "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" months"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keys\n\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("keys"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# -> ["1", "2"]')]),t._v("\n")])])]),a("p",[t._v("下面是公共的哈希方法（假设 hash 是一个 Hash 对象）：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("序号")]),t._v(" "),a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[a("code",[t._v("hash == other_hash")])]),t._v(" "),a("td",[t._v("检查两个哈希是否具有相同的键值对个数，键值对是否相互匹配，来判断两个哈希是否相等。")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[a("code",[t._v("hash.[key]")])]),t._v(" "),a("td",[t._v("使用键，从哈希引用值。如果未找到键，则返回默认值。")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[a("code",[t._v("hash.[key]=value")])]),t._v(" "),a("td",[t._v("把 value 给定的值与 key 给定的键进行关联。")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[a("code",[t._v("hash.clear")])]),t._v(" "),a("td",[t._v("从哈希中移除所有的键值对。")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[a("code",[t._v("hash.default(key = nil)")])]),t._v(" "),a("td",[t._v("返回 hash 的默认值，如果未通过 default= 进行设置，则返回 nil。（如果键在 hash 中不存在，则 [] 返回一个默认值。）")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[a("code",[t._v("hash.default = obj")])]),t._v(" "),a("td",[t._v("为 hash 设置默认值。")])]),t._v(" "),a("tr",[a("td",[t._v("7")]),t._v(" "),a("td",[a("code",[t._v("hash.default_proc")])]),t._v(" "),a("td",[t._v("如果 hash 通过块来创建，则返回块。")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[a("code",[t._v("hash.delete(key) [or] array.delete(key) { |key| block }")])]),t._v(" "),a("td",[t._v("通过 key 从 hash 中删除键值对。如果使用了块 且未找到匹配的键值对，则返回块的结果。把它与 delete_if 进行比较。")])]),t._v(" "),a("tr",[a("td",[t._v("9")]),t._v(" "),a("td",[a("code",[t._v("hash.delete_if { |key,value| block }")])]),t._v(" "),a("td",[t._v("block 为 true 的每个块，从 hash 中删除键值对。")])]),t._v(" "),a("tr",[a("td",[t._v("10")]),t._v(" "),a("td",[a("code",[t._v("hash.each { |key,value| block }")])]),t._v(" "),a("td",[t._v("遍历 hash，为每个 key 调用一次 block，传递 key-value 作为一个二元素数组。")])]),t._v(" "),a("tr",[a("td",[t._v("11")]),t._v(" "),a("td",[a("code",[t._v("hash.each_key { |key| block }")])]),t._v(" "),a("td",[t._v("遍历 hash，为每个 key 调用一次 block，传递 key 作为参数。")])]),t._v(" "),a("tr",[a("td",[t._v("12")]),t._v(" "),a("td",[a("code",[t._v("hash.each_key { |key_value_array| block }")])]),t._v(" "),a("td",[t._v("遍历 hash，为每个 key 调用一次 block，传递 key 和 value 作为参数。")])]),t._v(" "),a("tr",[a("td",[t._v("13")]),t._v(" "),a("td",[a("code",[t._v("hash.each_value { |value| block }")])]),t._v(" "),a("td",[t._v("遍历 hash，为每个 key 调用一次 block，传递 value 作为参数。")])]),t._v(" "),a("tr",[a("td",[t._v("14")]),t._v(" "),a("td",[a("code",[t._v("hash.empty?")])]),t._v(" "),a("td",[t._v("检查 hash 是否为空（不包含键值对），返回 true 或 false。")])]),t._v(" "),a("tr",[a("td",[t._v("15")]),t._v(" "),a("td",[a("code",[t._v("hash.fetch(key [, default] ) [or] hash.fetch(key) { | key | block }")])]),t._v(" "),a("td",[t._v("通过给定的 key 从 hash 返回值。如果未找到 key，且未提供其他参数，则抛出 IndexError 异常；如果给出了 default，则返回 default；如果指定了可选的 block，则返回 block 的结果。")])]),t._v(" "),a("tr",[a("td",[t._v("16")]),t._v(" "),a("td",[a("code",[t._v("hash.has_key?(key) [or] hash.include?(key) [or] hash.key?(key) [or] hash.member?(key)")])]),t._v(" "),a("td",[t._v("检查给定的 key 是否存在于哈希中，返回 true 或 false。")])]),t._v(" "),a("tr",[a("td",[t._v("17")]),t._v(" "),a("td",[a("code",[t._v("hash.has_value?(value)")])]),t._v(" "),a("td",[t._v("检查哈希是否包含给定的 value。")])]),t._v(" "),a("tr",[a("td",[t._v("18")]),t._v(" "),a("td",[a("code",[t._v("hash.index(value)")])]),t._v(" "),a("td",[t._v("为给定的 value 返回哈希中的 key，如果未找到匹配值则返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("19")]),t._v(" "),a("td",[a("code",[t._v("hash.indexes(keys)")])]),t._v(" "),a("td",[t._v("返回一个新的数组，由给定的键的值组成。找不到的键将插入默认值。该方法已被废弃，请使用 select。")])]),t._v(" "),a("tr",[a("td",[t._v("20")]),t._v(" "),a("td",[a("code",[t._v("hash.indices(keys)")])]),t._v(" "),a("td",[t._v("返回一个新的数组，由给定的键的值组成。找不到的键将插入默认值。该方法已被废弃，请使用 select。")])]),t._v(" "),a("tr",[a("td",[t._v("21")]),t._v(" "),a("td",[a("code",[t._v("hash.inspect")])]),t._v(" "),a("td",[t._v("返回哈希的打印字符串版本。")])]),t._v(" "),a("tr",[a("td",[t._v("22")]),t._v(" "),a("td",[a("code",[t._v("hash.invert")])]),t._v(" "),a("td",[t._v("创建一个新的 hash，倒置 hash 中的 keys 和 values。也就是说，在新的哈希中，hash 中的键将变成值，值将变成键。")])]),t._v(" "),a("tr",[a("td",[t._v("23")]),t._v(" "),a("td",[a("code",[t._v("hash.keys")])]),t._v(" "),a("td",[t._v("创建一个新的数组，带有 hash 中的键。")])]),t._v(" "),a("tr",[a("td",[t._v("24")]),t._v(" "),a("td",[a("code",[t._v("hash.length")])]),t._v(" "),a("td",[t._v("以整数形式返回 hash 的大小或长度。")])]),t._v(" "),a("tr",[a("td",[t._v("25")]),t._v(" "),a("td",[a("code",[t._v("hash.merge(other_hash) [or] hash.merge(other_hash) { |key, oldval, newval| block }")])]),t._v(" "),a("td",[t._v("返回一个新的哈希，包含 hash 和 other_hash 的内容，重写 hash 中与 other_hash 带有重复键的键值对。")])]),t._v(" "),a("tr",[a("td",[t._v("26")]),t._v(" "),a("td",[a("code",[t._v("hash.merge!(other_hash) [or] hash.merge!(other_hash) { |key, oldval, newval| block }")])]),t._v(" "),a("td",[t._v("与 merge 相同，但实际上 hash 发生了变化。")])]),t._v(" "),a("tr",[a("td",[t._v("27")]),t._v(" "),a("td",[a("code",[t._v("hash.rehash")])]),t._v(" "),a("td",[t._v("基于每个 key 的当前值重新建立 hash。如果插入后值发生了改变，该方法会重新索引 hash。")])]),t._v(" "),a("tr",[a("td",[t._v("28")]),t._v(" "),a("td",[a("code",[t._v("hash.reject { |key, value| block }")])]),t._v(" "),a("td",[t._v("类似 delete_if, 但作用在一个拷贝的哈希上。相等于 hsh.dup.delete_if。")])]),t._v(" "),a("tr",[a("td",[t._v("29")]),t._v(" "),a("td",[a("code",[t._v("hash.reject! { |key, value| block }")])]),t._v(" "),a("td",[t._v("相等于 delete_if, 但是如果没有修改，返回 nil。")])]),t._v(" "),a("tr",[a("td",[t._v("30")]),t._v(" "),a("td",[a("code",[t._v("hash.replace(other_hash)")])]),t._v(" "),a("td",[t._v("把 hash 的内容替换为 other_hash 的内容。")])]),t._v(" "),a("tr",[a("td",[t._v("31")]),t._v(" "),a("td",[a("code",[t._v("hash.select { |key, value| block }")])]),t._v(" "),a("td",[t._v("返回一个新的数组，由 block 返回 true 的 hash 中的键值对组成。")])]),t._v(" "),a("tr",[a("td",[t._v("32")]),t._v(" "),a("td",[a("code",[t._v("hash.shift")])]),t._v(" "),a("td",[t._v("从 hash 中移除一个键值对，并把该键值对作为二元素数组返回。")])]),t._v(" "),a("tr",[a("td",[t._v("33")]),t._v(" "),a("td",[a("code",[t._v("hash.size")])]),t._v(" "),a("td",[t._v("以整数形式返回 hash 的 size 或 length。")])]),t._v(" "),a("tr",[a("td",[t._v("34")]),t._v(" "),a("td",[a("code",[t._v("hash.sort")])]),t._v(" "),a("td",[t._v("把 hash 转换为一个包含键值对数组的二维数组，然后进行排序。")])]),t._v(" "),a("tr",[a("td",[t._v("35")]),t._v(" "),a("td",[a("code",[t._v("hash.store(key, value)")])]),t._v(" "),a("td",[t._v("存储 hash 中的一个键值对。")])]),t._v(" "),a("tr",[a("td",[t._v("36")]),t._v(" "),a("td",[a("code",[t._v("hash.to_a")])]),t._v(" "),a("td",[t._v("从 hash 中创建一个二维数组。每个键值对转换为一个数组，所有这些数组都存储在一个数组中。")])]),t._v(" "),a("tr",[a("td",[t._v("37")]),t._v(" "),a("td",[a("code",[t._v("hash.to_hash")])]),t._v(" "),a("td",[t._v("返回 hash（self）。")])]),t._v(" "),a("tr",[a("td",[t._v("38")]),t._v(" "),a("td",[a("code",[t._v("hash.to_s")])]),t._v(" "),a("td",[t._v("把 hash 转换为一个数组，然后把该数组转换为一个字符串。")])]),t._v(" "),a("tr",[a("td",[t._v("39")]),t._v(" "),a("td",[a("code",[t._v("hash.update(other_hash) [or] hash.update(other_hash) {|key, oldval, newval| block}")])]),t._v(" "),a("td",[t._v("返回一个新的哈希，包含 hash 和 other_hash 的内容，重写 hash 中与 other_hash 带有重复键的键值对。")])]),t._v(" "),a("tr",[a("td",[t._v("40")]),t._v(" "),a("td",[a("code",[t._v("hash.value?(value)")])]),t._v(" "),a("td",[t._v("检查 hash 是否包含给定的 value。")])]),t._v(" "),a("tr",[a("td",[t._v("41")]),t._v(" "),a("td",[a("code",[t._v("hash.values")])]),t._v(" "),a("td",[t._v("返回一个新的数组，包含 hash 的所有值。")])]),t._v(" "),a("tr",[a("td",[t._v("42")]),t._v(" "),a("td",[a("code",[t._v("hash.values_at(obj, ...)")])]),t._v(" "),a("td",[t._v("返回一个新的数组，包含 hash 中与给定的键相关的值。")])])])])])}],!1,null,null,null);s.default=v.exports}}]);