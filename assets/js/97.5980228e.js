(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{263:function(t,_,v){"use strict";v.r(_);var r=v(0),s=Object(r.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("div",{staticClass:"content"},[t._m(0),t._v(" "),v("p",[t._v("Ruby 中的 String 对象用于存储或操作一个或多个字节的序列。")]),t._v(" "),v("p",[t._v("Ruby 字符串分为单引号字符串（'）和双引号字符串（\"），区别在于双引号字符串能够支持更多的转义字符。")]),t._v(" "),v("p",[t._v("1、转义字符")]),t._v(" "),v("p",[t._v("下标列出了可使用反斜杠符号转义的转义字符或非打印字符。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),v("p",[t._v("2、字符编码")]),t._v(" "),v("p",[t._v("Ruby 的默认字符集是 ASCII，字符可用单个字节表示。如果您使用 UTF-8 或其他现代的字符集，字符可能是用一个到四个字节表示。")]),t._v(" "),v("p",[t._v("您可以在程序开头使用 $KCODE 改变字符集，如下所示：")]),t._v(" "),t._m(3),v("p",[t._v("下面是 $KCODE 可能的值。")]),t._v(" "),t._m(4),t._v(" "),v("p",[t._v("3、字符串内建方法")]),t._v(" "),t._m(5),v("p",[t._v("这将返回一个包含 str 副本的新的字符串对象。现在，使用 str 对象，我们可以调用任意可用的实例方法。例如：")]),t._v(" "),t._m(6),v("p",[t._v("下面是公共的字符串方法（假设 str 是一个 String 对象）：")]),t._v(" "),t._m(7),t._v(" "),v("p",[t._v("4、字符串 unpack 指令")]),t._v(" "),t._m(8),t._v(" "),t._m(9),v("ul",[v("li",[v("router-link",{attrs:{to:"./File类和方法.html"}},[t._v("更多文件操作请参考")]),t._v("，File 类和方法")],1)])])}),[function(){var t=this.$createElement,_=this._self._c||t;return _("h2",{attrs:{id:"ruby-字符串（string）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ruby-字符串（string）"}},[this._v("#")]),this._v(" Ruby 字符串（String）")])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[_("strong",[this._v("注")]),this._v("：在一个双引号括起的字符串内，转义字符会被解析。在一个单引号括起的字符串内，转义字符不会被解析，原样输出。")])},function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("table",[v("thead",[v("tr",[v("th",[t._v("反斜杠符号")]),t._v(" "),v("th",[t._v("十六进制字符")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("\\a")]),t._v(" "),v("td",[t._v("0x07")]),t._v(" "),v("td",[t._v("报警符")])]),t._v(" "),v("tr",[v("td",[t._v("\\b")]),t._v(" "),v("td",[t._v("0x08")]),t._v(" "),v("td",[t._v("退格键")])]),t._v(" "),v("tr",[v("td",[t._v("\\cx")]),t._v(" "),v("td"),t._v(" "),v("td",[t._v("Control-x")])]),t._v(" "),v("tr",[v("td",[t._v("\\C-x")]),t._v(" "),v("td"),t._v(" "),v("td",[t._v("Control-x")])]),t._v(" "),v("tr",[v("td",[t._v("\\e")]),t._v(" "),v("td",[t._v("0x1b")]),t._v(" "),v("td",[t._v("转义符")])]),t._v(" "),v("tr",[v("td",[t._v("\\f")]),t._v(" "),v("td",[t._v("0x0c")]),t._v(" "),v("td",[t._v("换页符")])]),t._v(" "),v("tr",[v("td",[t._v("\\M-\\C-x")]),t._v(" "),v("td"),t._v(" "),v("td",[t._v("Meta-Control-x")])]),t._v(" "),v("tr",[v("td",[t._v("\\n")]),t._v(" "),v("td",[t._v("0x0a")]),t._v(" "),v("td",[t._v("换行符")])]),t._v(" "),v("tr",[v("td",[t._v("\\nnn")]),t._v(" "),v("td"),t._v(" "),v("td",[t._v("八进制表示法，其中 n 的范围为 0.7")])]),t._v(" "),v("tr",[v("td",[t._v("\\r")]),t._v(" "),v("td",[t._v("0x0d")]),t._v(" "),v("td",[t._v("回车符")])]),t._v(" "),v("tr",[v("td",[t._v("\\s")]),t._v(" "),v("td",[t._v("0x20")]),t._v(" "),v("td",[t._v("空格符")])]),t._v(" "),v("tr",[v("td",[t._v("\\t")]),t._v(" "),v("td",[t._v("0x09")]),t._v(" "),v("td",[t._v("制表符")])]),t._v(" "),v("tr",[v("td",[t._v("\\v")]),t._v(" "),v("td",[t._v("0x0b")]),t._v(" "),v("td",[t._v("垂直制表符")])]),t._v(" "),v("tr",[v("td",[t._v("\\x")]),t._v(" "),v("td"),t._v(" "),v("td",[t._v("字符 x")])]),t._v(" "),v("tr",[v("td",[t._v("\\xnn")]),t._v(" "),v("td"),t._v(" "),v("td",[t._v("十六进制表示法，其中 n 的范围为 0.9、 a.f 或 A.F")])])])])},function(){var t=this.$createElement,_=this._self._c||t;return _("div",{staticClass:"language-ruby extra-class"},[_("pre",{pre:!0,attrs:{class:"language-ruby"}},[_("code",[_("span",{pre:!0,attrs:{class:"token variable"}},[this._v("$KCODE")]),this._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[this._v("'u'")]),this._v("\n")])])])},function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("table",[v("thead",[v("tr",[v("th",[t._v("编码")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("a")]),t._v(" "),v("td",[t._v("ASCII （与 none 相同）。这是默认的。")])]),t._v(" "),v("tr",[v("td",[t._v("e")]),t._v(" "),v("td",[t._v("EUC。")])]),t._v(" "),v("tr",[v("td",[t._v("n")]),t._v(" "),v("td",[t._v("None （与 ASCII 相同）。")])]),t._v(" "),v("tr",[v("td",[t._v("u")]),t._v(" "),v("td",[t._v("UTF-8。")])])])])},function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("div",{staticClass:"language-ruby extra-class"},[v("pre",{pre:!0,attrs:{class:"language-ruby"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),v("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("div",{staticClass:"language-ruby extra-class"},[v("pre",{pre:!0,attrs:{class:"language-ruby"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/ruby")]),t._v("\n\nmyStr "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"THIS IS TEST"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfoo "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myStr"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("downcase\n\nputs "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),v("span",{pre:!0,attrs:{class:"token interpolation"}},[v("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("foo"),v("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n")])])])},function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("table",[v("thead",[v("tr",[v("th",[t._v("序号")]),t._v(" "),v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("1")]),t._v(" "),v("td",[v("code",[t._v("str % arg")])]),t._v(" "),v("td",[t._v('使用格式规范格式化字符串。如果 arg 包含一个以上的替代，那么 arg 必须是一个数组。如需了解更多格式规范的信息，请查看"内核模块"下的 sprintf。')])]),t._v(" "),v("tr",[v("td",[t._v("2")]),t._v(" "),v("td",[v("code",[t._v("str * integer")])]),t._v(" "),v("td",[t._v("返回一个包含 integer 个 str 的新的字符串。换句话说，str 被重复了 integer 次。")])]),t._v(" "),v("tr",[v("td",[t._v("3")]),t._v(" "),v("td",[v("code",[t._v("str + other_str")])]),t._v(" "),v("td",[t._v("连接 other_str 到 str。")])]),t._v(" "),v("tr",[v("td",[t._v("4")]),t._v(" "),v("td",[v("code",[t._v("str << obj")])]),t._v(" "),v("td",[t._v("连接一个对象到字符串。如果对象是范围为 0.255 之间的固定数字 Fixnum，则它会被转换为一个字符。把它与 concat 进行比较。")])]),t._v(" "),v("tr",[v("td",[t._v("5")]),t._v(" "),v("td",[v("code",[t._v("str <=> other_str")])]),t._v(" "),v("td",[t._v("把 str 与 other_str 进行比较，返回 -1（小于）、0（等于）或 1（大于）。比较是区分大小写的。")])]),t._v(" "),v("tr",[v("td",[t._v("6")]),t._v(" "),v("td",[v("code",[t._v("str == obj")])]),t._v(" "),v("td",[t._v("检查 str 和 obj 的相等性。如果 obj 不是字符串，则返回 false，如果 str <=> obj，则返回 true，返回 0。")])]),t._v(" "),v("tr",[v("td",[t._v("7")]),t._v(" "),v("td",[v("code",[t._v("str =~ obj")])]),t._v(" "),v("td",[t._v("根据正则表达式模式 obj 匹配 str。返回匹配开始的位置，否则返回 false。")])]),t._v(" "),v("tr",[v("td",[t._v("8")]),t._v(" "),v("td",[v("code",[t._v("str[position] str[start, length] str[start..end] str[start...end]")])]),t._v(" "),v("td",[t._v("str[position] # 注意返回的是 ASCII 码而不是字符。使用索引截取子串")])]),t._v(" "),v("tr",[v("td",[t._v("9")]),t._v(" "),v("td",[v("code",[t._v("str.capitalize")])]),t._v(" "),v("td",[t._v("把字符串转换为大写字母显示。")])]),t._v(" "),v("tr",[v("td",[t._v("10")]),t._v(" "),v("td",[v("code",[t._v("str.capitalize!")])]),t._v(" "),v("td",[t._v("与 capitalize 相同，但是 str 会发生变化并返回。")])]),t._v(" "),v("tr",[v("td",[t._v("11")]),t._v(" "),v("td",[v("code",[t._v("str.casecmp")])]),t._v(" "),v("td",[t._v("不区分大小写的字符串比较。")])]),t._v(" "),v("tr",[v("td",[t._v("12")]),t._v(" "),v("td",[v("code",[t._v("str.center")])]),t._v(" "),v("td",[t._v("居中字符串。")])]),t._v(" "),v("tr",[v("td",[t._v("13")]),t._v(" "),v("td",[v("code",[t._v("str.chomp")])]),t._v(" "),v("td",[t._v("从字符串末尾移除记录分隔符（$/），通常是 \\n。如果没有记录分隔符，则不进行任何操作。")])]),t._v(" "),v("tr",[v("td",[t._v("14")]),t._v(" "),v("td",[v("code",[t._v("str.chomp!")])]),t._v(" "),v("td",[t._v("与 chomp 相同，但是 str 会发生变化并返回。")])]),t._v(" "),v("tr",[v("td",[t._v("15")]),t._v(" "),v("td",[v("code",[t._v("str.chop")])]),t._v(" "),v("td",[t._v("移除 str 中的最后一个字符。")])]),t._v(" "),v("tr",[v("td",[t._v("16")]),t._v(" "),v("td",[v("code",[t._v("str.chop!")])]),t._v(" "),v("td",[t._v("与 chop 相同，但是 str 会发生变化并返回。")])]),t._v(" "),v("tr",[v("td",[t._v("17")]),t._v(" "),v("td",[v("code",[t._v("str.concat(other_str)")])]),t._v(" "),v("td",[t._v("连接 other_str 到 str。")])]),t._v(" "),v("tr",[v("td",[t._v("18")]),t._v(" "),v("td",[v("code",[t._v("str.count(str, ...)")])]),t._v(" "),v("td",[t._v("给一个或多个字符集计数。如果有多个字符集，则给这些集合的交集计数。")])]),t._v(" "),v("tr",[v("td",[t._v("19")]),t._v(" "),v("td",[v("code",[t._v("str.crypt(other_str)")])]),t._v(" "),v("td",[t._v("对 str 应用单向加密哈希。参数是两个字符长的字符串，每个字符的范围为 a.z、 A.Z、 0.9、 . 或 /。")])]),t._v(" "),v("tr",[v("td",[t._v("20")]),t._v(" "),v("td",[v("code",[t._v("str.delete(other_str, ...)")])]),t._v(" "),v("td",[t._v("返回 str 的副本，参数交集中的所有字符会被删除。")])]),t._v(" "),v("tr",[v("td",[t._v("21")]),t._v(" "),v("td",[v("code",[t._v("str.delete!(other_str, ...)")])]),t._v(" "),v("td",[t._v("与 delete 相同，但是 str 会发生变化并返回。")])]),t._v(" "),v("tr",[v("td",[t._v("22")]),t._v(" "),v("td",[v("code",[t._v("str.downcase")])]),t._v(" "),v("td",[t._v("返回 str 的副本，所有的大写字母会被替换为小写字母。")])]),t._v(" "),v("tr",[v("td",[t._v("23")]),t._v(" "),v("td",[v("code",[t._v("str.downcase!")])]),t._v(" "),v("td",[t._v("与 downcase 相同，但是 str 会发生变化并返回。")])]),t._v(" "),v("tr",[v("td",[t._v("24")]),t._v(" "),v("td",[v("code",[t._v("str.dump")])]),t._v(" "),v("td",[t._v("返回 str 的版本，所有的非打印字符被替换为 \\nnn 符号，所有的特殊字符被转义。")])]),t._v(" "),v("tr",[v("td",[t._v("25")]),t._v(" "),v("td",[v("code",[t._v("str.each(separator=$/) { |substr| block }")])]),t._v(" "),v("td",[t._v("使用参数作为记录分隔符（默认是 $/）分隔 str，传递每个子字符串给被提供的块。")])]),t._v(" "),v("tr",[v("td",[t._v("26")]),t._v(" "),v("td",[v("code",[t._v("str.each_byte { |fixnum| block }")])]),t._v(" "),v("td",[t._v("传递 str 的每个字节给 block，以字节的十进制表示法返回每个字节。")])]),t._v(" "),v("tr",[v("td",[t._v("27")]),t._v(" "),v("td",[v("code",[t._v("str.each_line(separator=$/) { |substr| block }")])]),t._v(" "),v("td",[t._v("使用参数作为记录分隔符（默认是 $/）分隔 str，传递每个子字符串给被提供的 block。")])]),t._v(" "),v("tr",[v("td",[t._v("28")]),t._v(" "),v("td",[v("code",[t._v("str.empty?")])]),t._v(" "),v("td",[t._v("如果 str 为空（即长度为 0），则返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("29")]),t._v(" "),v("td",[v("code",[t._v("str.eql?(other)")])]),t._v(" "),v("td",[t._v("如果两个字符串有相同的长度和内容，则这两个字符串相等。")])]),t._v(" "),v("tr",[v("td",[t._v("30")]),t._v(" "),v("td",[v("code",[t._v("str.gsub(pattern, replacement) [or]str.gsub(pattern) { |match| block }")])]),t._v(" "),v("td",[t._v("返回 str 的副本，pattern 的所有出现都替换为 replacement 或 block 的值。pattern 通常是一个正则表达式 Regexp；如果是一个字符串 String，则没有正则表达式元字符被解释（即，/\\d/ 将匹配一个数字，但 '\\d' 将匹配一个反斜杠后跟一个 'd'）。")])]),t._v(" "),v("tr",[v("td",[t._v("31")]),t._v(" "),v("td",[v("code",[t._v("str[fixnum] [or] str[fixnum,fixnum] [or] str[range] [or] str[regexp] [or] str[regexp, fixnum] [or] str[other_str]")])]),t._v(" "),v("td",[t._v("使用下列的参数引用 str：参数为一个 Fixnum，则返回 fixnum 的字符编码；参数为两个 Fixnum，则返回一个从偏移（第一个 fixnum）开始截至到长度（第二个 fixnum）为止的子字符串；参数为 range，则返回该范围内的一个子字符串；参数为 regexp，则返回匹配字符串的部分；参数为带有 fixnum 的 regexp，则返回 fixnum 位置的匹配数据；参数为 other_str，则返回匹配 other_str 的子字符串。一个负数的 Fixnum 从字符串的末尾 -1 开始。")])]),t._v(" "),v("tr",[v("td",[t._v("32")]),t._v(" "),v("td",[v("code",[t._v("str[fixnum] = fixnum [or] str[fixnum] = new_str [or] str[fixnum, fixnum] = new_str [or] str[range] = aString [or] str[regexp] =new_str [or] str[regexp, fixnum] =new_str [or] str[other_str] = new_str ]")])]),t._v(" "),v("td",[t._v("替换整个字符串或部分字符串。与 slice! 同义。")])]),t._v(" "),v("tr",[v("td",[t._v("33")]),t._v(" "),v("td",[v("code",[t._v("str.gsub!(pattern, replacement) [or] str.gsub!(pattern) { |match| block }")])]),t._v(" "),v("td",[t._v("执行 String#gsub 的替换，返回 str，如果没有替换被执行则返回 nil。")])]),t._v(" "),v("tr",[v("td",[t._v("34")]),t._v(" "),v("td",[v("code",[t._v("str.hash")])]),t._v(" "),v("td",[t._v("返回一个基于字符串长度和内容的哈希。")])]),t._v(" "),v("tr",[v("td",[t._v("35")]),t._v(" "),v("td",[v("code",[t._v("str.hex")])]),t._v(" "),v("td",[t._v("把 str 的前导字符当作十六进制数字的字符串（一个可选的符号和一个可选的 0x），并返回相对应的数字。如果错误则返回零。")])]),t._v(" "),v("tr",[v("td",[t._v("36")]),t._v(" "),v("td",[v("code",[t._v("str.include? other_str [or] str.include? fixnum")])]),t._v(" "),v("td",[t._v("如果 str 包含给定的字符串或字符，则返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("37")]),t._v(" "),v("td",[v("code",[t._v("str.index(substring [, offset]) [or] str.index(fixnum [, offset]) [or]str.index(regexp [, offset])")])]),t._v(" "),v("td",[t._v("返回给定子字符串、字符（fixnum）或模式（regexp）在 str 中第一次出现的索引。如果未找到则返回 nil。如果提供了第二个参数，则指定在字符串中开始搜索的位置。")])]),t._v(" "),v("tr",[v("td",[t._v("38")]),t._v(" "),v("td",[v("code",[t._v("str.insert(index, other_str)")])]),t._v(" "),v("td",[t._v("在给定索引的字符前插入 other_str，修改 str。负值索引从字符串的末尾开始计数，并在给定字符后插入。其意图是在给定的索引处开始插入一个字符串。")])]),t._v(" "),v("tr",[v("td",[t._v("39")]),t._v(" "),v("td",[v("code",[t._v("str.inspect")])]),t._v(" "),v("td",[t._v("返回 str 的可打印版本，带有转义的特殊字符。")])]),t._v(" "),v("tr",[v("td",[t._v("40")]),t._v(" "),v("td",[v("code",[t._v("str.intern [or] str.to_sym")])]),t._v(" "),v("td",[t._v("返回与 str 相对应的符号，如果之前不存在，则创建符号。")])]),t._v(" "),v("tr",[v("td",[t._v("41")]),t._v(" "),v("td",[v("code",[t._v("str.length")])]),t._v(" "),v("td",[t._v("返回 str 的长度。把它与 size 进行比较。")])]),t._v(" "),v("tr",[v("td",[t._v("42")]),t._v(" "),v("td",[v("code",[t._v("str.ljust(integer, padstr=' ')")])]),t._v(" "),v("td",[t._v("如果 integer 大于 str 的长度，则返回长度为 integer 的新字符串，新字符串以 str 左对齐，并以 padstr 作为填充。否则，返回 str。")])]),t._v(" "),v("tr",[v("td",[t._v("43")]),t._v(" "),v("td",[v("code",[t._v("str.lstrip")])]),t._v(" "),v("td",[t._v("返回 str 的副本，移除了前导的空格。")])]),t._v(" "),v("tr",[v("td",[t._v("44")]),t._v(" "),v("td",[v("code",[t._v("str.lstrip!")])]),t._v(" "),v("td",[t._v("从 str 中移除前导的空格，如果没有变化则返回 nil。")])]),t._v(" "),v("tr",[v("td",[t._v("45")]),t._v(" "),v("td",[v("code",[t._v("str.match(pattern)")])]),t._v(" "),v("td",[t._v("如果 pattern 不是正则表达式，则把 pattern 转换为正则表达式 Regexp，然后在 str 上调用它的匹配方法。")])]),t._v(" "),v("tr",[v("td",[t._v("46")]),t._v(" "),v("td",[v("code",[t._v("str.oct")])]),t._v(" "),v("td",[t._v("把 str 的前导字符当作十进制数字的字符串（一个可选的符号），并返回相对应的数字。如果转换失败，则返回 0。")])]),t._v(" "),v("tr",[v("td",[t._v("47")]),t._v(" "),v("td",[v("code",[t._v("str.replace(other_str)")])]),t._v(" "),v("td",[t._v("把 str 中的内容替换为 other_str 中的相对应的值。")])]),t._v(" "),v("tr",[v("td",[t._v("48")]),t._v(" "),v("td",[v("code",[t._v("str.reverse")])]),t._v(" "),v("td",[t._v("返回一个新字符串，新字符串是 str 的倒序。")])]),t._v(" "),v("tr",[v("td",[t._v("49")]),t._v(" "),v("td",[v("code",[t._v("str.reverse!")])]),t._v(" "),v("td",[t._v("逆转 str，str 会发生变化并返回。")])]),t._v(" "),v("tr",[v("td",[t._v("50")]),t._v(" "),v("td",[v("code",[t._v("str.rindex(substring [, fixnum]) [or]str.rindex(fixnum [, fixnum]) [or]str.rindex(regexp [, fixnum])")])]),t._v(" "),v("td",[t._v("返回给定子字符串、字符（fixnum）或模式（regexp）在 str 中最后一次出现的索引。如果未找到则返回 nil。如果提供了第二个参数，则指定在字符串中结束搜索的位置。超出该点的字符将不被考虑。")])]),t._v(" "),v("tr",[v("td",[t._v("51")]),t._v(" "),v("td",[v("code",[t._v("str.rjust(integer, padstr=' ')")])]),t._v(" "),v("td",[t._v("如果 integer 大于 str 的长度，则返回长度为 integer 的新字符串，新字符串以 str 右对齐，并以 padstr 作为填充。否则，返回 str。")])]),t._v(" "),v("tr",[v("td",[t._v("52")]),t._v(" "),v("td",[v("code",[t._v("str.rstrip")])]),t._v(" "),v("td",[t._v("返回 str 的副本，移除了尾随的空格。")])]),t._v(" "),v("tr",[v("td",[t._v("53")]),t._v(" "),v("td",[v("code",[t._v("str.rstrip!")])]),t._v(" "),v("td",[t._v("从 str 中移除尾随的空格，如果没有变化则返回 nil。")])]),t._v(" "),v("tr",[v("td",[t._v("54")]),t._v(" "),v("td",[v("code",[t._v("str.scan(pattern) [or]str.scan(pattern) { |match, ...| block }")])]),t._v(" "),v("td",[t._v("两种形式匹配 pattern（可以是一个正则表达式 Regexp 或一个字符串 String）遍历 str。针对每个匹配，会生成一个结果，结果会添加到结果数组中或传递给 block。如果 pattern 不包含分组，则每个独立的结果由匹配的字符串、$& 组成。如果 pattern 包含分组，每个独立的结果是一个包含每个分组入口的数组。")])]),t._v(" "),v("tr",[v("td",[t._v("55")]),t._v(" "),v("td",[v("code",[t._v("str.slice(fixnum) [or] str.slice(fixnum, fixnum) [or]str.slice(range) [or] str.slice(regexp) [or]str.slice(regexp, fixnum) [or] str.slice(other_str)See str[fixnum], etc.str.slice!(fixnum) [or] str.slice!(fixnum, fixnum) [or] str.slice!(range) [or] str.slice!(regexp) [or] str.slice!(other_str)")])]),t._v(" "),v("td",[t._v("从 str 中删除指定的部分，并返回删除的部分。如果值超出范围，参数带有 Fixnum 的形式，将生成一个 IndexError。参数为 range 的形式，将生成一个 RangeError，参数为 Regexp 和 String 的形式，将忽略执行动作。")])]),t._v(" "),v("tr",[v("td",[t._v("56")]),t._v(" "),v("td",[v("code",[t._v("str.split(pattern=$;, [limit])")])]),t._v(" "),v("td",[t._v("基于分隔符，把 str 分成子字符串，并返回这些子字符串的数组。如果 pattern 是一个字符串 String，那么在分割 str 时，它将作为分隔符使用。如果 pattern 是一个单一的空格，那么 str 是基于空格进行分割，会忽略前导空格和连续空格字符。如果 pattern 是一个正则表达式 Regexp，则 str 在 pattern 匹配的地方被分割。当 pattern 匹配一个零长度的字符串时，str 被分割成单个字符。如果省略了 pattern 参数，则使用 $; 的值。如果 $; 为 nil（默认的），str 基于空格进行分割，就像是指定了 `` 作为分隔符一样。如果省略了 limit 参数，会抑制尾随的 null 字段。如果 limit 是一个正数，则最多返回该数量的字段（如果 limit 为 1，则返回整个字符串作为数组中的唯一入口）。如果 limit 是一个负数，则返回的字段数量不限制，且不抑制尾随的 null 字段。")])]),t._v(" "),v("tr",[v("td",[t._v("57")]),t._v(" "),v("td",[v("code",[t._v("str.squeeze([other_str]*)")])]),t._v(" "),v("td",[t._v("使用为 String#count 描述的程序从 other_str 参数建立一系列字符。返回一个新的字符串，其中集合中出现的相同的字符会被替换为单个字符。如果没有给出参数，则所有相同的字符都被替换为单个字符。")])]),t._v(" "),v("tr",[v("td",[t._v("58")]),t._v(" "),v("td",[v("code",[t._v("str.squeeze!([other_str]*)")])]),t._v(" "),v("td",[t._v("与 squeeze 相同，但是 str 会发生变化并返回，如果没有变化则返回 nil。")])]),t._v(" "),v("tr",[v("td",[t._v("59")]),t._v(" "),v("td",[v("code",[t._v("str.strip")])]),t._v(" "),v("td",[t._v("返回 str 的副本，移除了前导的空格和尾随的空格。")])]),t._v(" "),v("tr",[v("td",[t._v("60")]),t._v(" "),v("td",[v("code",[t._v("str.strip!")])]),t._v(" "),v("td",[t._v("从 str 中移除前导的空格和尾随的空格，如果没有变化则返回 nil。")])]),t._v(" "),v("tr",[v("td",[t._v("61")]),t._v(" "),v("td",[v("code",[t._v("str.sub(pattern, replacement) [or]str.sub(pattern) { |match| block }")])]),t._v(" "),v("td",[t._v("返回 str 的副本，pattern 的第一次出现会被替换为 replacement 或 block 的值。pattern 通常是一个正则表达式 Regexp；如果是一个字符串 String，则没有正则表达式元字符被解释。")])]),t._v(" "),v("tr",[v("td",[t._v("62")]),t._v(" "),v("td",[v("code",[t._v("str.sub!(pattern, replacement) [or]str.sub!(pattern) { |match| block }")])]),t._v(" "),v("td",[t._v("执行 String#sub 替换，并返回 str，如果没有替换执行，则返回 nil。")])]),t._v(" "),v("tr",[v("td",[t._v("63")]),t._v(" "),v("td",[v("code",[t._v("str.succ [or] str.next")])]),t._v(" "),v("td",[t._v("返回 str 的继承。")])]),t._v(" "),v("tr",[v("td",[t._v("64")]),t._v(" "),v("td",[v("code",[t._v("str.succ! [or] str.next!")])]),t._v(" "),v("td",[t._v("相当于 String#succ，但是 str 会发生变化并返回。")])]),t._v(" "),v("tr",[v("td",[t._v("65")]),t._v(" "),v("td",[v("code",[t._v("str.sum(n=16)")])]),t._v(" "),v("td",[t._v("返回 str 中字符的 n-bit 校验和，其中 n 是可选的 Fixnum 参数，默认为 16。结果是简单地把 str 中每个字符的二进制值的总和，以 2n - 1 为模。这不是一个特别好的校验和。")])]),t._v(" "),v("tr",[v("td",[t._v("66")]),t._v(" "),v("td",[v("code",[t._v("str.swapcase")])]),t._v(" "),v("td",[t._v("返回 str 的副本，所有的大写字母转换为小写字母，所有的小写字母转换为大写字母。")])]),t._v(" "),v("tr",[v("td",[t._v("67")]),t._v(" "),v("td",[v("code",[t._v("str.swapcase!")])]),t._v(" "),v("td",[t._v("相当于 String#swapcase，但是 str 会发生变化并返回，如果没有变化则返回 nil。")])]),t._v(" "),v("tr",[v("td",[t._v("68")]),t._v(" "),v("td",[v("code",[t._v("str.to_f")])]),t._v(" "),v("td",[t._v("返回把 str 中的前导字符解释为浮点数的结果。超出有效数字的末尾的多余字符会被忽略。如果在 str 的开头没有有效数字，则返回 0.0。该方法不会生成异常。")])]),t._v(" "),v("tr",[v("td",[t._v("69")]),t._v(" "),v("td",[v("code",[t._v("str.to_i(base=10)")])]),t._v(" "),v("td",[t._v("返回把 str 中的前导字符解释为整数基数（基数为 2、 8、 10 或 16）的结果。超出有效数字的末尾的多余字符会被忽略。如果在 str 的开头没有有效数字，则返回 0。该方法不会生成异常。")])]),t._v(" "),v("tr",[v("td",[t._v("70")]),t._v(" "),v("td",[v("code",[t._v("str.to_s [or] str.to_str")])]),t._v(" "),v("td",[t._v("返回接收的值。")])]),t._v(" "),v("tr",[v("td",[t._v("71")]),t._v(" "),v("td",[v("code",[t._v("str.tr(from_str, to_str)")])]),t._v(" "),v("td",[t._v("返回 str 的副本，把 from_str 中的字符替换为 to_str 中相对应的字符。如果 to_str 比 from_str 短，那么它会以最后一个字符进行填充。两个字符串都可以使用 c1.c2 符号表示字符的范围。如果 from_str 以 ^ 开头，则表示除了所列出的字符以外的所有字符。")])]),t._v(" "),v("tr",[v("td",[t._v("72")]),t._v(" "),v("td",[v("code",[t._v("str.tr!(from_str, to_str)")])]),t._v(" "),v("td",[t._v("相当于 String#tr，但是 str 会发生变化并返回，如果没有变化则返回 nil。")])]),t._v(" "),v("tr",[v("td",[t._v("73")]),t._v(" "),v("td",[v("code",[t._v("str.tr_s(from_str, to_str)")])]),t._v(" "),v("td",[t._v("把 str 按照 String#tr 描述的规则进行处理，然后移除会影响翻译的重复字符。")])]),t._v(" "),v("tr",[v("td",[t._v("74")]),t._v(" "),v("td",[v("code",[t._v("str.tr_s!(from_str, to_str)")])]),t._v(" "),v("td",[t._v("相当于 String#tr_s，但是 str 会发生变化并返回，如果没有变化则返回 nil。")])]),t._v(" "),v("tr",[v("td",[t._v("75")]),t._v(" "),v("td",[v("code",[t._v("str.unpack(format)")])]),t._v(" "),v("td",[t._v("根据 format 字符串解码 str（可能包含二进制数据），返回被提取的每个值的数组。format 字符由一系列单字符指令组成。每个指令后可以跟着一个数字，表示重复该指令的次数。星号（*）将使用所有剩余的元素。指令 sSiIlL 每个后可能都跟着一个下划线（_），为指定类型使用底层平台的本地尺寸大小，否则使用独立于平台的一致的尺寸大小。format 字符串中的空格会被忽略。")])]),t._v(" "),v("tr",[v("td",[t._v("76")]),t._v(" "),v("td",[v("code",[t._v("str.upcase")])]),t._v(" "),v("td",[t._v("返回 str 的副本，所有的小写字母会被替换为大写字母。操作是环境不敏感的，只有字符 a 到 z 会受影响。")])]),t._v(" "),v("tr",[v("td",[t._v("77")]),t._v(" "),v("td",[v("code",[t._v("str.upcase!")])]),t._v(" "),v("td",[t._v("改变 str 的内容为大写，如果没有变化则返回 nil。")])]),t._v(" "),v("tr",[v("td",[t._v("78")]),t._v(" "),v("td",[v("code",[t._v("str.upto(other_str) { |s| block }")])]),t._v(" "),v("td",[t._v("遍历连续值，以 str 开始，以 other_str 结束（包含），轮流传递每个值给 block。String#succ 方法用于生成每个值。")])])])])},function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("table",[v("thead",[v("tr",[v("th",[t._v("指令")]),t._v(" "),v("th",[t._v("返回")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("A")]),t._v(" "),v("td",[t._v("String")]),t._v(" "),v("td",[t._v("移除尾随的 null 和空格。")])]),t._v(" "),v("tr",[v("td",[t._v("a")]),t._v(" "),v("td",[t._v("String")]),t._v(" "),v("td",[t._v("字符串。")])]),t._v(" "),v("tr",[v("td",[t._v("B")]),t._v(" "),v("td",[t._v("String")]),t._v(" "),v("td",[t._v("从每个字符中提取位（首先是最高有效位）。")])]),t._v(" "),v("tr",[v("td",[t._v("b")]),t._v(" "),v("td",[t._v("String")]),t._v(" "),v("td",[t._v("从每个字符中提取位（首先是最低有效位）。")])]),t._v(" "),v("tr",[v("td",[t._v("C")]),t._v(" "),v("td",[t._v("Fixnum")]),t._v(" "),v("td",[t._v("提取一个字符作为无符号整数。")])]),t._v(" "),v("tr",[v("td",[t._v("c")]),t._v(" "),v("td",[t._v("Fixnum")]),t._v(" "),v("td",[t._v("提取一个字符作为整数。")])]),t._v(" "),v("tr",[v("td",[t._v("D, d")]),t._v(" "),v("td",[t._v("Float")]),t._v(" "),v("td",[t._v("把 sizeof(double) 长度的字符当作原生的 double。")])]),t._v(" "),v("tr",[v("td",[t._v("E")]),t._v(" "),v("td",[t._v("Float")]),t._v(" "),v("td",[t._v("把 sizeof(double) 长度的字符当作 littleendian 字节顺序的 double。")])]),t._v(" "),v("tr",[v("td",[t._v("e")]),t._v(" "),v("td",[t._v("Float")]),t._v(" "),v("td",[t._v("把 sizeof(float) 长度的字符当作 littleendian 字节顺序的 float。")])]),t._v(" "),v("tr",[v("td",[t._v("F, f")]),t._v(" "),v("td",[t._v("Float")]),t._v(" "),v("td",[t._v("把 sizeof(float) 长度的字符当作原生的 float。")])]),t._v(" "),v("tr",[v("td",[t._v("G")]),t._v(" "),v("td",[t._v("Float")]),t._v(" "),v("td",[t._v("把 sizeof(double) 长度的字符当作 network 字节顺序的 double。")])]),t._v(" "),v("tr",[v("td",[t._v("g")]),t._v(" "),v("td",[t._v("Float")]),t._v(" "),v("td",[t._v("把 sizeof(float) 长度的字符当作 network 字节顺序的 float。")])]),t._v(" "),v("tr",[v("td",[t._v("H")]),t._v(" "),v("td",[t._v("String")]),t._v(" "),v("td",[t._v("从每个字符中提取十六进制（首先是最高有效位）。")])]),t._v(" "),v("tr",[v("td",[t._v("h")]),t._v(" "),v("td",[t._v("String")]),t._v(" "),v("td",[t._v("从每个字符中提取十六进制（首先是最低有效位）。")])]),t._v(" "),v("tr",[v("td",[t._v("I")]),t._v(" "),v("td",[t._v("Integer")]),t._v(" "),v("td",[t._v("把 sizeof(int) 长度（通过 _ 修改）的连续字符当作原生的 integer。")])]),t._v(" "),v("tr",[v("td",[t._v("i")]),t._v(" "),v("td",[t._v("Integer")]),t._v(" "),v("td",[t._v("把 sizeof(int) 长度（通过 _ 修改）的连续字符当作有符号的原生的 integer。")])]),t._v(" "),v("tr",[v("td",[t._v("L")]),t._v(" "),v("td",[t._v("Integer")]),t._v(" "),v("td",[t._v("把四个（通过 _ 修改）连续字符当作无符号的原生的 long integer。")])]),t._v(" "),v("tr",[v("td",[t._v("l")]),t._v(" "),v("td",[t._v("Integer")]),t._v(" "),v("td",[t._v("把四个（通过 _ 修改）连续字符当作有符号的原生的 long integer。")])]),t._v(" "),v("tr",[v("td",[t._v("M")]),t._v(" "),v("td",[t._v("String")]),t._v(" "),v("td",[t._v("引用可打印的。")])]),t._v(" "),v("tr",[v("td",[t._v("m")]),t._v(" "),v("td",[t._v("String")]),t._v(" "),v("td",[t._v("Base64 编码。")])]),t._v(" "),v("tr",[v("td",[t._v("N")]),t._v(" "),v("td",[t._v("Integer")]),t._v(" "),v("td",[t._v("把四个字符当作 network 字节顺序的无符号的 long。")])]),t._v(" "),v("tr",[v("td",[t._v("n")]),t._v(" "),v("td",[t._v("Fixnum")]),t._v(" "),v("td",[t._v("把两个字符当作 network 字节顺序的无符号的 short。")])]),t._v(" "),v("tr",[v("td",[t._v("P")]),t._v(" "),v("td",[t._v("String")]),t._v(" "),v("td",[t._v("把 sizeof(char *) 长度的字符当作指针，并从引用的位置返回 \\emph{len} 字符。")])]),t._v(" "),v("tr",[v("td",[t._v("p")]),t._v(" "),v("td",[t._v("String")]),t._v(" "),v("td",[t._v("把 sizeof(char *) 长度的字符当作一个空结束字符的指针。")])]),t._v(" "),v("tr",[v("td",[t._v("Q")]),t._v(" "),v("td",[t._v("Integer")]),t._v(" "),v("td",[t._v("把八个字符当作无符号的 quad word（64 位）。")])]),t._v(" "),v("tr",[v("td",[t._v("q")]),t._v(" "),v("td",[t._v("Integer")]),t._v(" "),v("td",[t._v("把八个字符当作有符号的 quad word（64 位）。")])]),t._v(" "),v("tr",[v("td",[t._v("S")]),t._v(" "),v("td",[t._v("Fixnum")]),t._v(" "),v("td",[t._v("把两个（如果使用 _ 则不同）连续字符当作 native 字节顺序的无符号的 short。")])]),t._v(" "),v("tr",[v("td",[t._v("s")]),t._v(" "),v("td",[t._v("Fixnum")]),t._v(" "),v("td",[t._v("把两个（如果使用 _ 则不同）连续字符当作 native 字节顺序的有符号的 short。")])]),t._v(" "),v("tr",[v("td",[t._v("U")]),t._v(" "),v("td",[t._v("Integer")]),t._v(" "),v("td",[t._v("UTF-8 字符，作为无符号整数。")])]),t._v(" "),v("tr",[v("td",[t._v("u")]),t._v(" "),v("td",[t._v("String")]),t._v(" "),v("td",[t._v("UU 编码。")])]),t._v(" "),v("tr",[v("td",[t._v("V")]),t._v(" "),v("td",[t._v("Fixnum")]),t._v(" "),v("td",[t._v("把四个字符当作 little-endian 字节顺序的无符号的 long。")])]),t._v(" "),v("tr",[v("td",[t._v("v")]),t._v(" "),v("td",[t._v("Fixnum")]),t._v(" "),v("td",[t._v("把两个字符当作 little-endian 字节顺序的无符号的 short。")])]),t._v(" "),v("tr",[v("td",[t._v("w")]),t._v(" "),v("td",[t._v("Integer")]),t._v(" "),v("td",[t._v("BER 压缩的整数。")])]),t._v(" "),v("tr",[v("td",[t._v("X")]),t._v(" "),v("td"),t._v(" "),v("td",[t._v("向后跳过一个字符。")])]),t._v(" "),v("tr",[v("td",[t._v("x")]),t._v(" "),v("td"),t._v(" "),v("td",[t._v("向前跳过一个字符。")])]),t._v(" "),v("tr",[v("td",[t._v("Z")]),t._v(" "),v("td",[t._v("String")]),t._v(" "),v("td",[t._v("和 * 一起使用，移除尾随的 null 直到第一个 null。")])]),t._v(" "),v("tr",[v("td",[t._v("@")]),t._v(" "),v("td"),t._v(" "),v("td",[t._v("跳过 length 参数给定的偏移量。")])])])])},function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("div",{staticClass:"language-ruby extra-class"},[v("pre",{pre:!0,attrs:{class:"language-ruby"}},[v("code",[v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc \\0\\0abc \\0\\0"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpack"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A6Z6'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> ["abc", "abc "]')]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc \\0\\0"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpack"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a3a3'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> ["abc", " \\000\\000"]')]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc \\0abc \\0"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpack"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Z*Z*'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> ["abc ", "abc "]')]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aa"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpack"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b8B8'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                 "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> ["10000110", "01100001"]')]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpack"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'h2H2c'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("               "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> ["16", "61", 97]')]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\xfe\\xff\\xfe\\xff"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpack"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sS'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [-2, 65534]")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"now=20is"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpack"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'M*'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("             "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> ["now is"]')]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"whole"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpack"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xax2aX2aX1aX2a'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> ["h", "e", "l", "l", "o"]')]),t._v("\n")])])])}],!1,null,null,null);_.default=s.exports}}]);